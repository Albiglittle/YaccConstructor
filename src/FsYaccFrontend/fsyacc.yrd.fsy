%{

//  Copyright 2010-2011 Konstantin Ulitin
//
//  This file is part of YaccConctructor.
//
//  YaccConstructor is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.


open Yard.Core.IL
open Yard.Core.IL.Production

%}
%token <> ACTION_CODE
%token <> BAR
%token <> COLON
%token <> TYPE_KW
%token <> START_KW
%token <> ASSOC_KW
%token <> IDENT
%token <> TYPE
%token <> TOKEN_KW
%token <> HEAD
%token <> DOUBLE_PERC

%start s

%type <'a> s

%%

s :  yard_opt_1 yard_many_1 yard_many_2 start yard_some_1 DOUBLE_PERC
      yard_many_3 yard_opt_2
      { let h=$1  in let tokens=$2 h in let st=$4  in let rules=$7 h tokens st in  h, List.concat tokens, st, rules }

yard_opt_1 :  { None}
             | HEAD { let yard_elem=$1  in Some(yard_elem)}

yard_many_1 :  { fun h -> []}
              | token yard_many_1
                { fun h -> let yard_head=$1  in let yard_tail=$2 h in yard_head::yard_tail}

yard_many_2 :  { fun h -> fun tokens -> []}
              | assoc yard_many_2
                { fun h -> fun tokens -> let yard_head=$1  in let yard_tail=$2 h tokens in yard_head::yard_tail}

yard_some_1 :  typedef
                { fun h -> fun tokens -> fun st -> let yard_elem=$1  in [yard_elem]}
              | typedef yard_some_1
                { fun h -> fun tokens -> fun st -> let yard_head=$1  in let yard_tail=$2 h tokens st in yard_head::yard_tail}

yard_many_3 :  { fun h -> fun tokens -> fun st -> []}
              | rule yard_many_3
                { fun h -> fun tokens -> fun st -> let yard_head=$1  in let yard_tail=$2 h tokens st in yard_head::yard_tail}

yard_opt_2 :  { fun h -> fun tokens -> fun st -> fun rules -> None}
             | DOUBLE_PERC
               { fun h -> fun tokens -> fun st -> fun rules -> let yard_elem=$1  in Some(yard_elem)}

token :  TOKEN_KW yard_opt_3 yard_some_2 { let tokens=$3  in  tokens }

yard_opt_3 :  { None}
             | TYPE { let yard_elem=$1  in Some(yard_elem)}

yard_some_2 :  IDENT { let yard_elem=$1  in [yard_elem]}
              | IDENT yard_some_2
                { let yard_head=$1  in let yard_tail=$2  in yard_head::yard_tail}

assoc :  ASSOC_KW yard_some_3 { }

yard_some_3 :  IDENT { let yard_elem=$1  in [yard_elem]}
              | IDENT yard_some_3
                { let yard_head=$1  in let yard_tail=$2  in yard_head::yard_tail}

start :  START_KW yard_some_4 { let name=$2  in  name }

yard_some_4 :  IDENT { let yard_elem=$1  in [yard_elem]}
              | IDENT yard_some_4
                { let yard_head=$1  in let yard_tail=$2  in yard_head::yard_tail}

typedef :  TYPE_KW TYPE yard_some_5 { }

yard_some_5 :  IDENT { let yard_elem=$1  in [yard_elem]}
              | IDENT yard_some_5
                { let yard_head=$1  in let yard_tail=$2  in yard_head::yard_tail}

rule :  IDENT COLON yard_opt_4 alternative yard_many_4
         { let name=$1  in let alt=$4  in let opt_alts=$5 name alt in  { new Rule.t<Source.t, Source.t> with 
            name=name 
            and args=[] 
            and body=if opt_alts=[] then alt else PAlt(alt, List.reduce (fun acc prod -> PAlt(acc, prod)) opt_alts)
            and _public=false
            and metaArgs=[] } }

yard_opt_4 :  { fun name -> None}
             | BAR { fun name -> let yard_elem=$1  in Some(yard_elem)}

yard_many_4 :  { fun name -> fun alt -> []}
              | yard_exp_brackets_1 yard_many_4
                { fun name -> fun alt -> let yard_head=$1 name alt in let yard_tail=$2 name alt in yard_head::yard_tail}

alternative :  yard_many_5 ACTION_CODE
                { let lst=$1  in let ac=$2  in 
    PSeq(lst |> List.map (fun prod ->
			{new Production.elem<Source.t, Source.t>
				with omit=false
				and rule=prod
				and binding=None
				and checker=None})
		 , Some <| new Source.t(ac,new Source.Position(), new Source.Position(), "")) }

yard_many_5 :  { []}
              | yard_exp_brackets_2 yard_many_5
                { let yard_head=$1  in let yard_tail=$2  in yard_head::yard_tail}

yard_exp_brackets_1 :  BAR alternative
                        { fun name -> fun alt -> let alt=$2  in alt}

yard_exp_brackets_2 :  IDENT
                        { let s=$1  in 
        (s,(0,0,"")) |> fun st ->
            if Char.IsUpper s.[0] then PToken st
            else PRef(st, None) }
