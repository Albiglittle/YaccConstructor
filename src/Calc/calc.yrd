{
open AbstractLexer.Core
}

tokens {
    _ of string*array<Position<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpLiteralExpression>>
}

options {
    translate = false
    module = "Calc.AbstractParser"
    infEpsPath = epsilons
    pos = uint64
}

module Main

binExpr<operand binOp>:
  l=operand r=(op=binOp r=operand { op,r })*
  {List.fold (fun l (op,r) -> op l r) l r }

[<Start>]
expr: res=binExpr<term termOp> { res }
      | ERROR

termOp: PLUS { (+) } | MINUS { (-) }

term: res=binExpr<factor factorOp> { res }
      | ERROR
factorOp: MULT { ( * ) } | DIV { (/) }

factor: res=binExpr<powExpr powOp> { res }
        | ERROR

powOp: POW { ( ** ) }

powExpr: n=NUMBER { fst n |> double } | LBRACE e=expr RBRACE { e }
         | ERROR

