/// Implementation file for parser generated by the fsyacc-compatibility backend for fsharpyacc.
module internal Parser

#nowarn "64" // turn off warnings that type variables used in production annotations are instantiated to concrete type

open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers

// This type is the type of tokens accepted by the parser
type token =
    | A of (int)
    | B of (int)
    | MULT of (int)
    | PLUS of (int)

/// This type is used to give symbolic names to token indexes, useful for error messages.
type private tokenId =
    | TOKEN_A
    | TOKEN_B
    | TOKEN_MULT
    | TOKEN_PLUS
    | TOKEN_end_of_input
    | TOKEN_error

/// This type is used to give symbolic names to token indexes, useful for error messages.
type private nonterminalId =
    | NONTERM__startexpr
    | NONTERM_expr
    | NONTERM_fact
    | NONTERM_num

/// Maps tokens to integer indexes.
let private tagOfToken = function
    | A _ -> 0
    | B _ -> 1
    | MULT _ -> 2
    | PLUS _ -> 3

/// Maps integer indices to symbolic token ids.
let private tokenTagToTokenId = function
    | 0 -> TOKEN_A
    | 1 -> TOKEN_B
    | 2 -> TOKEN_MULT
    | 3 -> TOKEN_PLUS
    | 5 -> TOKEN_end_of_input
    | 4 -> TOKEN_error
    | tokenIdx ->
        failwithf "tokenTagToTokenId: Invalid token. (Tag = %i)" tokenIdx

/// Maps production indexes returned in syntax errors to strings representing
/// the non-terminal that would be produced by that production.
let private prodIdxToNonTerminal = function
    | 0 -> NONTERM__startexpr
    | 1 -> NONTERM_expr
    | 2 -> NONTERM_expr
    | 3 -> NONTERM_fact
    | 4 -> NONTERM_fact
    | 5 -> NONTERM_num
    | 6 -> NONTERM_num
    | prodIdx ->
        failwithf "prodIdxToNonTerminal: Invalid production index. (Index = %i)" prodIdx

let [<Literal>] private _fsyacc_endOfInputTag = 5
let [<Literal>] private _fsyacc_tagOfErrorTerminal = 4

/// Gets the name of a token as a string.
let token_to_string = function
    | A _ -> "A"
    | B _ -> "B"
    | MULT _ -> "MULT"
    | PLUS _ -> "PLUS"

/// Gets the data carried by a token as an object.
let private _fsyacc_dataOfToken = function
    | A _fsyacc_x -> box _fsyacc_x
    | B _fsyacc_x -> box _fsyacc_x
    | MULT _fsyacc_x -> box _fsyacc_x
    | PLUS _fsyacc_x -> box _fsyacc_x

let private _fsyacc_gotos = [| 0us; 65535us; 2us; 65535us; 0us; 1us; 6us; 8us; 3us; 65535us; 0us; 2us; 6us; 2us; 7us; 9us; 3us; 65535us; 0us; 3us; 6us; 3us; 7us; 3us; |]
let private _fsyacc_sparseGotoTableRowOffsets = [| 0us; 1us; 4us; 8us; |]
let private _fsyacc_stateToProdIdxsTableElements = [| 7us; 0us; 2us; 1us; 4us; 3us; 5us; 6us; 2us; 0us; 1us; 2us; 2us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 7us; 2us; 1us; 1us; 4us; 3us; 5us; 6us; 5us; 4us; 3us; 3us; 5us; 6us; 2us; 1us; 1us; 2us; 3us; 3us; |]
let private _fsyacc_stateToProdIdxsTableRowOffsets = [| 0us; 8us; 11us; 14us; 16us; 18us; 20us; 28us; 34us; 37us; |]
let [<Literal>] private _fsyacc_action_rows = 10
let private _fsyacc_actionTableElements = [| 2us; 32768us; 0us; 4us; 1us; 5us; 2us; 32768us; 3us; 6us; 5us; 49152us; 3us; 32768us; 2us; 7us; 3us; 16386us; 5us; 16386us; 3us; 32768us; 2us; 16388us; 3us; 16388us; 5us; 16388us; 3us; 32768us; 2us; 16389us; 3us; 16389us; 5us; 16389us; 3us; 32768us; 2us; 16390us; 3us; 16390us; 5us; 16390us; 2us; 32768us; 0us; 4us; 1us; 5us; 2us; 32768us; 0us; 4us; 1us; 5us; 2us; 32768us; 3us; 6us; 5us; 16385us; 3us; 32768us; 2us; 7us; 3us; 16387us; 5us; 16387us; |]
let private _fsyacc_actionTableRowOffsets = [| 0us; 3us; 6us; 10us; 14us; 18us; 22us; 25us; 28us; 31us; |]
let private _fsyacc_reductionSymbolCounts = [| 1us; 3us; 1us; 3us; 1us; 1us; 1us; |]
let private _fsyacc_productionToNonTerminalTable = [| 0us; 1us; 1us; 2us; 2us; 3us; 3us; |]
let private _fsyacc_immediateActions = [| 65535us; 65535us; 65535us; 16388us; 16389us; 16390us; 65535us; 65535us; 65535us; 65535us; |]
let private _fsyacc_reductions () = [|
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : obj)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    raise (Microsoft.FSharp.Text.Parsing.Accept (Microsoft.FSharp.Core.Operators.box _1))
                )
            : '_startexpr))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : obj)) in
        let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : obj)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1 + _3
                )
            : obj))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fact)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1
                )
            : obj))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fact)) in
        let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'fact)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1 * _3
                )
            : 'fact))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'num)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    _1
                )
            : 'fact))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    3
                )
            : 'num))
    (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
        let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
        Microsoft.FSharp.Core.Operators.box
            (
                (
                    5
                )
            : 'num))
    |]

let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = {
    reductions = _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken;
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError =
        (fun (ctxt : Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) ->
            match parse_error_rich with
            | Some f -> f ctxt
            | None -> parse_error ctxt.Message);
    numTerminals = 6;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable;
    }
    
let engine lexer lexbuf startState =
    (tables ()).Interpret(lexer, lexbuf, startState)

let expr lexer lexbuf : obj =
    unbox ((tables ()).Interpret(lexer, lexbuf, 0))

