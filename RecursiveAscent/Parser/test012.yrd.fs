//this file was generated by YARD Recursive-Ascent 
//source grammar:..\..\..\..\Tests\test012.yrd
//date:02.11.2009 16:46:30
#light "off"


module Actions

open Yard.Core

let getValue,getSeqNum = 
    let _getV arg = snd arg in
    let _getSeqNum arg = fst arg in
    _getV,_getSeqNum


let f1_action  arg0 = 
 (fun x2 ->
  let (n:string) = (getValue x2) in 
float (n)) arg0


let f2_action  arg0 arg1 arg2 = 
 (fun x3 x4 x5 ->
  let (l) = (getValue x3) in 
let (expr) = (getValue x4) in 
let (r) = (getValue x5) in 
expr) arg0 arg1 arg2


let t3_action  arg0 arg1 arg2 = 
 (fun x6 x7 x8 ->
  let (l) = (getValue x6) in 
let (op) = (getValue x7) in 
let (r) = (getValue x8) in 
(l: float)*(r:float)) arg0 arg1 arg2


let t4_action  arg0 = 
 (fun x9 ->
  let (res) = (getValue x9) in 
res) arg0


let e5_action  arg0 = 
 (fun x10 ->
  let (res) = (getValue x10) in 
res) arg0


let e6_action  arg0 arg1 arg2 = 
 (fun x11 x12 x13 ->
  let (l) = (getValue x11) in 
let (op) = (getValue x12) in 
let (r) = (getValue x13) in 
(l:float) + (r:float)) arg0 arg1 arg2


let s7_action  arg0 = 
 (fun x14 ->
  let (res) = (getValue x14) in 
res) arg0
