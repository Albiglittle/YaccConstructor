//this file was generated by YARD Recursive-Ascent 
//source grammar:..\..\..\..\Tests\test012.yrd
//date:01.11.2009 14:26:34
#light "off"

module Actions



let f1_action  arg0 = 
 (fun x2 ->
  let (n) = x2
in 
float (n:string)) arg0


let f2_action  arg0 arg1 arg2 = 
 (fun x3 x4 x5 ->
  let (l) = x3
in 
let (expr) = x4
in 
let (r) = x5
in 
expr) arg0 arg1 arg2


let t3_action  arg0 arg1 arg2 = 
 (fun x6 x7 x8 ->
  let (l) = x6
in 
let (op) = x7
in 
let (r) = x8
in 
(l: float)*(r:float)) arg0 arg1 arg2


let t4_action  arg0 = 
 (fun x9 ->
  let (res) = x9
in 
res) arg0


let e5_action  arg0 = 
 (fun x10 ->
  let (res) = x10
in 
res) arg0


let e6_action  arg0 arg1 arg2 = 
 (fun x11 x12 x13 ->
  let (l) = x11
in 
let (op) = x12
in 
let (r) = x13
in 
(l:float) + (r:float)) arg0 arg1 arg2


let s7_action  arg0 = 
 (fun x14 ->
  let (res) = x14
in 
res) arg0
