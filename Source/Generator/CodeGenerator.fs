// CodeGenerator.fs
//
// Copyright 2009 Semen Grigorev
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation.

#light
module Yard.Core.CodeGenerator
open Utils
open IO

type CodeGenerator(sourceGramamr: string ,outPath: string) = class

  let outStream = IO.text_writer outPath
  
  let genHeader = 
      "//this file was generated by YARD Recursive-Ascent \n//source grammar:"+
      sourceGramamr +
      "\n//date:" + System.DateTime.Now.ToString() +
       "\n #light \"off\""
                
  
  let genSome code bindings = 
      let param = 
          if bindings = []
          then "_"
          else "((" + (List.fold (fun prms prm -> prms + "),(" + prm + ")") "" bindings) + ")"
      "List.map (fun "+param+"->\n  "+code+")"    

  let genBindingMap bindings =
      List.map (fun (k:Option<_>) -> ((if k.IsNone then None else Some(IL.Source.toString k.Value)) ,"x"+(next()).ToString()))  bindings

  let genBynding (bnd,var) code =
      match bnd with
      |Some(_bnd) -> "let (" + _bnd + ") = "+ (if String.trim [' ';'\n'] code <> "" then "\n(" + code + ")" else "") + var + "\nin \n"
      |None        -> "(" + code + ")" + var + "; \n"
         
  let genSeq code bindingLst action=     
      let bnpl =  bindingLst 
      let _params = "(" + List.fold (fun buf (_,name) -> buf + "," + name) (snd (List.hd bnpl)) (List.tl bnpl) + ")"
      "fun" + _params + " ->\n  " + code + action
  
  let close () = outStream.Close();
  
  let write (str:string) = outStream.WriteLine(str)
  
  let genTopLEvelBinding name code = 
      "let " + name + "_action arg = \n (" + code + ")arg\n\n"
  
  member self.GenSome code bindings = genSome code bindings
  member self.GenBindingMap bindings = genBindingMap bindings
  member self.GenBynding bndVarMap code = genBynding bndVarMap code
  member self.GenSeq code bindingLst action = genSeq code bindingLst action
  member self.CloseOutStream () = close ()
  member self.Write str = write str
  member self.GenTopLEvelBinding name code = genTopLEvelBinding name code
  member self.GenHeader () = genHeader
end      