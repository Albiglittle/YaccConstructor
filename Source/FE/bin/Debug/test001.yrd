binExpr<<operand binOp>>
: l=operand r=( op=binOp r=operand { (op, r) } )*
{ List.fold_left ( fun l (op,r) -> op l r ) l r }
;
termOp: PLUS { ( +. ) } | MINUS { ( -. ) } ;
factorOp : MULT { ( *. ) } | DIV { ( /. ) } ;
powOp: "^" { ( ** ) } ;
powExpr: n=NUMBER { float n } | "(" e=expr ")" { e } ;
factor: res=binExpr<<powExpr powOp>> { res } ;
term: res=binExpr<<factor factorOp>> { res } ;
expr: res=binExpr<<term termOp>> { res } ;