{
module RaccLexer

open Microsoft.FSharp.Text.Lexing


open Yard.Generators.RACCGenerator
open Yard.Generators.RACCGenerator.Tables

type MyLexeme (tag,_value) =
    member self.MValue = _value
    interface ILexeme with    
       member self.tag = tag
       member self.CompareTo x =  compare (hash self) (hash x)
    end    
    member self.ToString  = sprintf "%A" _value

}

let whitespace = [' ' '\n' '\t' '\r']
let digit = ['0'-'9']

rule main = parse
  | whitespace { main lexbuf }
  | digit+ {MyLexeme(getTag T_INT, (System.Int32.Parse(LexBuffer.LexemeString(lexbuf)))) }
  | eof {MyLexeme(-1, -1) }
  | _ { main lexbuf }

{

type Lexer(lb) = 
    let locBuf = ref []
    interface ILexer with        
    
       member self.Get pos = 
        let l = !locBuf |> List.length
        if l >= pos
        then (!locBuf).[l-pos]
        else
            let t = (main lb) :> ILexeme
            locBuf := t :: !locBuf
            t      
    end

}