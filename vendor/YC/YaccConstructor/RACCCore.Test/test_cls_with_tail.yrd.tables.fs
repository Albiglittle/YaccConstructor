//this tables was generated by RACC
//source grammar:..\Tests\RACC\test_cls_with_tail\test_cls_with_tail.yrd
//date:6/7/2011 10:14:41

#light "off"
module Yard.Generators.RACCGenerator.Tables_Cls_tail

open Yard.Generators.RACCGenerator

type symbol =
    | T_MINUS
    | NT_s
    | NT_raccStart
let getTag smb =
    match smb with
    | T_MINUS -> 2
    | NT_s -> 1
    | NT_raccStart -> 0
let getName tag =
    match tag with
    | 2 -> T_MINUS
    | 1 -> NT_s
    | 0 -> NT_raccStart
    | _ -> failwith "getName: bad tag."
let private autumataDict = 
dict [|(0,{ 
   DIDToStateMap = dict [|(0,(State 0));(1,(State 1));(2,DummyState)|];
   DStartState   = 0;
   DFinaleStates = Set.ofArray [|1|];
   DRules        = Set.ofArray [|{ 
   FromStateID = 0;
   Symbol      = (DSymbol 1);
   Label       = Set.ofArray [|List.ofArray [|(FATrace (TSmbS 0))|]
|];
   ToStateID   = 1;
}
;{ 
   FromStateID = 1;
   Symbol      = Dummy;
   Label       = Set.ofArray [|List.ofArray [|(FATrace (TSmbE 0))|]
|];
   ToStateID   = 2;
}
|];
}
);(1,{ 
   DIDToStateMap = dict [|(0,(State 0));(1,(State 1));(2,DummyState)|];
   DStartState   = 1;
   DFinaleStates = Set.ofArray [|0|];
   DRules        = Set.ofArray [|{ 
   FromStateID = 0;
   Symbol      = (DSymbol 2);
   Label       = Set.ofArray [|List.ofArray [|(FATrace (TSmbE 2));(FATrace (TSeqE 3));(FATrace (TClsE 1));(FATrace (TSmbS 4))|]
;List.ofArray [|(FATrace (TSmbE 2));(FATrace (TSeqE 3));(FATrace (TSeqS 3));(FATrace (TSmbS 2))|]
;List.ofArray [|(FATrace (TSmbE 4));(FATrace (TSeqE 5))|]
|];
   ToStateID   = 0;
}
;{ 
   FromStateID = 0;
   Symbol      = Dummy;
   Label       = Set.ofArray [|List.ofArray [|(FATrace (TSmbE 2));(FATrace (TSeqE 3));(FATrace (TClsE 1));(FATrace (TSmbS 4))|]
;List.ofArray [|(FATrace (TSmbE 2));(FATrace (TSeqE 3));(FATrace (TSeqS 3));(FATrace (TSmbS 2))|]
;List.ofArray [|(FATrace (TSmbE 4));(FATrace (TSeqE 5))|]
|];
   ToStateID   = 2;
}
;{ 
   FromStateID = 1;
   Symbol      = (DSymbol 2);
   Label       = Set.ofArray [|List.ofArray [|(FATrace (TSeqS 5));(FATrace (TClsS 1));(FATrace (TClsE 1));(FATrace (TSmbS 4))|]
;List.ofArray [|(FATrace (TSeqS 5));(FATrace (TClsS 1));(FATrace (TSeqS 3));(FATrace (TSmbS 2))|]
|];
   ToStateID   = 0;
}
|];
}
)|]

let private gotoSet = 
    Set.ofArray [|((0, 0, 1), set [(0, 1)]);((0, 0, 2), set [(1, 0)]);((1, 0, 2), set [(1, 0)]);((1, 1, 2), set [(1, 0)])|]
    |> dict
let tables = { gotoSet = gotoSet; automataDict = autumataDict }

