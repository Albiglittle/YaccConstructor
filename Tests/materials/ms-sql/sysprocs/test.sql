/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
/****** Object:  StoredProcedure [sys].[sp_addlogin]    Script Date: 09/27/2011 18:56:44 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addlogin]
    @loginame       sysname
   ,@passwd         sysname = Null
   ,@defdb          sysname = 'master'      -- UNDONE: DEFAULT CONFIGURABLE???
   ,@deflanguage    sysname = Null
   ,@sid            varbinary(16) = Null
   ,@encryptopt     varchar(20) = Null
AS
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @exec_stmt nvarchar(4000)
        declare @hextext varchar(256)
        declare @ret int

    -- DISALLOW USER TRANSACTION --
        set implicit_transactions off
        IF (@@trancount > 0)
        begin
                raiserror(15002,-1,-1,'sys.sp_addlogin')
                return (1)
        end

    -- VALIDATE LOGIN NAME:
        execute @ret = sys.sp_validname @loginame
        if (@ret <> 0)
        return (1)

        set @exec_stmt = 'create login ' + quotename(@loginame)

    if @passwd is null
        select @passwd = ''

        if (@encryptopt is null)
                set @exec_stmt = @exec_stmt + ' with password = ' + quotename(@passwd, '''')
        else
        begin
                declare @passwdbin varbinary(256)
                set @passwdbin = convert(varbinary(256), @passwd)
                execute sys.sp_hexadecimal @passwdbin, @hextext OUT
                set @exec_stmt = @exec_stmt + ' with password = ' + @hextext

                if (@encryptopt = 'skip_encryption_old')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else if (@encryptopt = 'skip_encryption')
                        set @exec_stmt = @exec_stmt + ' hashed '
                else
                begin
                        raiserror(15600,-1,-1,'sys.sp_addlogin')
                        return 1
                end
        end
        
    if (@defdb is not null)
                set @exec_stmt = @exec_stmt + ', default_database = ' + quotename(@defdb)

        if (@deflanguage is not null)
                set @exec_stmt = @exec_stmt + ', default_language = ' + quotename(@deflanguage)

        if (@sid is not null)
        begin
                execute sys.sp_hexadecimal @sid, @hextext OUT
                set @exec_stmt = @exec_stmt + ', sid = ' + @hextext
        end

        exec (@exec_stmt)

        if @@error <> 0
                return (1)

    -- RETURN SUCCESS --
        return  (0)     -- sp_addlogin
go

/****** Object:  StoredProcedure [sys].[sp_addextendedproperty]    Script Date: 09/27/2011 19:11:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addextendedproperty]
        @name sysname,
        @value sql_variant                      = NULL,
        @level0type     varchar(128)    = NULL,
        @level0name     sysname                 = NULL,
        @level1type     varchar(128)    = NULL,
        @level1name     sysname                 = NULL,
        @level2type     varchar(128)    = NULL,
        @level2name     sysname                 = NULL
as

        declare @ret int

        if datalength(@value) > 7500
        begin
                raiserror(15097,-1,-1)
                return 1
        end
        
        if @name is null
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end

        execute @ret = sys.sp_validname @name
        if (@ret <> 0)
        begin
                raiserror(15600,-1,-1,'sp_addextendedproperty')
                return (1)
        end
        

        BEGIN TRANSACTION
        
        begin
                EXEC %%ExtendedPropertySet ().AddValue(Name = @name, Value = @value, Level0type = @level0type, Level0name = @level0name, Level1type = @level1type, Level1name = @level1name, Level2type = @level2type, Level2name = @level2name)
                IF @@error <> 0
                begin
                        COMMIT TRANSACTION
                        return (1)
                end
        end
        
        COMMIT TRANSACTION
        return (0)
go

/****** Object:  StoredProcedure [sys].[sp_addserver]    Script Date: 09/27/2011 19:07:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_addserver]
        @server                 sysname,                        -- server name
        @local                  varchar(10) = NULL,     -- NULL or 'local'
        @duplicate_ok   varchar(13) = NULL      -- NULL or 'duplicate_ok'
as
        -- VARS
        DECLARE @localentry     bit,
                        @dup_ok         bit,
                        @retcode        int
        select @duplicate_ok = LOWER (@duplicate_ok collate Latin1_General_CI_AS)

        -- VALIDATE PARAMETERS/OPTIONS
        SELECT  @localentry = CASE WHEN @local IS NULL THEN 0
                                                WHEN lower(@local) = 'local' THEN 1
                                                ELSE NULL END,
                        @dup_ok = CASE WHEN @duplicate_ok IS NULL THEN 0
                                                WHEN @duplicate_ok = 'duplicate_ok' THEN 1
                                                ELSE NULL END
        IF @localentry IS NULL OR @dup_ok IS NULL
        BEGIN
                raiserror(15600,-1,-1,'sys.sp_addserver')
                return (1)
        END

        -- DISALLOW USER TRANSACTION
        set implicit_transactions off
        if @@trancount > 0
        begin
                raiserror(15002,-1,-1,'sys.sp_addlinkedserver')
                return (1)
        end

        BEGIN TRANSACTION

        -- ADD THE SERVER (CHECKS PERMISSIONS, ETC)
        EXEC @retcode = sys.sp_MSaddserver_internal @server,
                                NULL, NULL, NULL, NULL, NULL, NULL, -- @srvproduct ... @catalog
                                0,                      -- @linkedstyle
                                @localentry

        if( @retcode = 0)
        begin
                if (@localentry = 1)
                begin
                        -- EMDEventType(x_eet_Alter_Instance), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 214, ID = 100, ID = 0, ID = 0, Value = NULL,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end
                else
                begin
                        -- EMDEventType(x_eet_Create_Remote_Server), EMDUniversalClass(x_eunc_Server), src major id, src minor id, src name
                        -- -1 means ignore target stuff, target major id, target minor id, target name,
                        -- # of parameters, 5 parameters
                        EXEC %%System().FireTrigger(ID = 230, ID = 100, ID = 0, ID = 0, Value = @server,
                                ID = -1, ID = 0, ID = 0, Value = NULL, 
                                ID = 3, Value = @server, Value = @local, Value = @duplicate_ok, Value = NULL, Value = NULL, Value = NULL, Value = NULL)
                end

                COMMIT TRANSACTION
                -- SUCCESS
                return (0) -- sp_addserver
        end
        else if( @retcode = 2 )
        begin
                ROLLBACK

                if @dup_ok = 1
                        return (0)
                else
                        begin
                                raiserror(15028,-1,-1,@server);
                                return (1);
                        end;
        end
        else 
        begin
                ROLLBACK
                return (1)
        end
go

/****** Object:  StoredProcedure [sys].[sp_adduser]    Script Date: 09/27/2011 18:58:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_adduser]
        @loginame       sysname,            -- user's login name in syslogins
        @name_in_db     sysname = NULL, -- user's name to add to current db
        @grpname                sysname = NULL  -- role to which user should be added.
as
    -- SETUP RUNTIME OPTIONS / DECLARE VARIABLES --
        set nocount on
        declare @ret        int

    -- LIMIT TO SQL/NT USERS IN SYSLOGINS (BCKWRD COMPAT ONLY!)
        if not exists (select * from master.dbo.syslogins where loginname = @loginame
                        and (isntuser = 1 or isntname = 0))
        and @loginame <> 'guest'
    begin
        raiserror(15007,-1,-1,@loginame)
        return (1)
    end

        -- VALIDATE THE ROLENAME --
    if @grpname is not null and
           not exists (select * from sysusers where name = @grpname and issqlrole = 1)
    begin
            raiserror(15014,-1,-1,@grpname)
            return (1)
    end

    if @name_in_db is null
        select @name_in_db = @loginame

        -- In Hydra only the user dbo can do this --
    if (not is_member('dbo') = 1)
        begin
            -- AUDIT FAILED SECURITY CHECK --
        dbcc auditevent (109, 1, 0, @loginame, @name_in_db, @grpname , NULL, NULL, NULL, NULL)
                raiserror(15247,-1,-1)
                return (1)
        end

    -- ADD THE USER TO THE DATABASE --
    EXEC @ret = sys.sp_grantdbaccess @loginame, @name_in_db OUT
    if (@ret <> 0)
        return (1)

    -- ADD USER TO ROLE IF GIVEN. NOP FOR 'public' --
    if (@grpname is not null) and (@grpname <> 'public')
    begin
        EXEC @ret = sys.sp_addrolemember @grpname, @name_in_db
        if @ret <> 0
                begin
                        -- "ROLLBACK" THE ABOVE sp_grantdbaccess --
                        exec sys.sp_revokedbaccess @name_in_db
            return (1)
                end
    end

    -- RETURN SUCCESS --
    return (0) -- sp_adduser
go
/****** Object:  StoredProcedure [sys].[sp_autostats]    Script Date: 09/27/2011 19:04:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [sys].[sp_autostats]
        @tblname        nvarchar(776),
        @flagc          varchar(10)=null,
        @indname        sysname=null
as
begin
        declare @flag           bit,    -- no recompute
                        @permit         bit,    -- locked after permission check?
                        @tabid          int,
                        @objtype        varchar(2)

        --  Check flag
        set @flag = (case lower(@flagc)
                when 'on'       then 0
                when 'off'      then 1
                end)
        if @flag is null AND @flagc is NOT null
    begin
                raiserror(17000,-1,-1)
        return (1)
    end

        -- set NORECOMPUTE mask
        select @permit = 1

        -- Check we are executing in the correct database
        declare @db sysname
        select @db = parsename(@tblname, 3)

        if (@db is NOT null AND @db <> db_name())
        begin
                raiserror(15387,-1,-1)
                return (1)
        end

        -- VERIFY WE HAVE A USER-TABLE/INDEXED-VIEW BY THIS NAME IN THE DATABASE
        select @tabid = object_id, @objtype = type from sys.objects
                where object_id = object_id(@tblname, 'local') and (type = 'U' or type = 'V' or type = 'IT')
        if (@tabid is null) OR
                (
                        @objtype = 'V' AND
                        (ObjectProperty(@tabid, 'IsIndexed') = 0 OR
                        ObjectProperty(@tabid, 'IsMSShipped') = 1)
                )
        begin
                raiserror(15390,-1,-1,@tblname)
                return @@error
        end
        
        -- PRINT or UPDATE status?
        if (@flag is null)
        begin
                -- Display global settings (sp_dboption)
                --
                PRINT 'Global statistics settings for ' + quotename(db_name(), '[') + ':'
                PRINT '  Automatic update statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoUpdateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT '  Automatic create statistics: ' + (case when DatabaseProperty(db_name(), 'IsAutoCreateStatistics') = 1 then 'ON' else 'OFF' end)
                PRINT ''

                -- Display the current status of the index(s)
                --
                PRINT 'settings for table ' + quotename(@tblname, '[')
                PRINT ''
                select 'Index Name' = quotename(s.name, '['),
                       'AUTOSTATS' = case s.no_recompute
                                when 1 then 'OFF'
                                else 'ON'
                        end,
                       'Last Updated' = stats_date(@tabid, s.stats_id)
                from sys.stats s
                where s.object_id = @tabid AND          -- Table
                        case                                    -- Match name
                                when @indname is null then 1
                                when @indname = s.name then 1
                                else 0
                        end = 1
        end
        else
        begin
                BEGIN TRANSACTION

                -- Lock the table schema and check permissions
                EXEC %%Object(MultiName = @tblname).LockMatchID(ID = @tabid, Exclusive = 1, BindInternal = 1)
                if (@@error <> 0)
                begin
                        COMMIT TRANSACTION
                        raiserror(15165,-1,-1,@tblname)
                        return @@error
                end
        
                -- Flip the status bits
                if (@indname is null)   -- Match all index
                begin
                        declare ms_crs_autostat cursor local static for
                                select  s.name
                                from sys.stats s left outer join sys.indexes i on s.[object_id] = i.[object_id] and s.[stats_id] = i.[index_id]
                                where s.[object_id] = @tabid and isnull(i.is_hypothetical, 0) = 0
                        
                        open ms_crs_autostat

                        fetch next from ms_crs_autostat into @indname

                        while @@fetch_status = 0
                        begin
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                                fetch next from ms_crs_autostat into @indname
                        end
                        deallocate ms_crs_autostat
                end
                else
                begin
                        if exists(select *
                                from sys.stats
                                where object_id = @tabid and name = @indname)
                                EXEC %%StatisticsEx(ObjectID = @tabid, Name = @indname).SetNoRecompute(Value = @flag)
                        else
                        begin
                                COMMIT TRANSACTION
                                raiserror(15323,-1,-1,@tblname)
                                return @@error
                        end
                end

                COMMIT TRANSACTION

        end

        return(0) -- sp_autostats
end
go
