//this file was generated by RACC
//source grammar:RaccParser.yrd
//date:11.05.2011 13:59:09

module RACC.Actions

open Yard.Generators.RACCGenerator

let getUnmatched x expectedType =
    "Unexpected type of node\nType " + x.ToString() + " is not expected in this position\n" + expectedType + " was expected." |> failwith


//let print l = (l:>MyLexeme).MValue |> sprintf "%A"
let value l = (l:>RaccLexer.MyLexeme).MValue
let f list =
  printfn "f start::"
  match list with
  | elem::t -> 
      List.fold
        (fun list list_elem -> (printfn "%A %A" list_elem list; list_elem::list) )
        (printfn "list_start from %A" elem; [elem] )
        t
  | [] -> failwith "Expected 1 or more elements"

(* NotExpanded 

+start: list = list { list } ;

list: list = (elem = list_elem { printfn "ELEM %A" elem; elem })+ {f list};

list_elem: x=INT { printfn "int %A" (value x); value x } ;

*)


let start0 expr = 
    let inner  = 
        match expr with
        | RESeq [x0] -> 
            let (s1) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf list -> (list :?> _ ) 
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(x0)
            ( s1 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let list1 expr = 
    let inner  = 
        match expr with
        | REAlt(Some(x), None) -> 
            let yardLAltAction expr = 
                match expr with
                | RESeq [x0] -> 
                    let (s1) =
                        let yardElemAction expr = 
                            match expr with
                            | RELeaf list_elem -> (list_elem :?> _ ) 
                            | x -> getUnmatched x "RELeaf"

                        yardElemAction(x0)
                    ( printfn "list_start from %A" s1; [s1] )
                | x -> getUnmatched x "RESeq"

            yardLAltAction x 
        | REAlt(None, Some(x)) -> 
            let yardRAltAction expr = 
                match expr with
                | RESeq [x0; x1] -> 
                    let (s1) =
                        let yardElemAction expr = 
                            match expr with
                            | RELeaf list -> (list :?> _ ) 
                            | x -> getUnmatched x "RELeaf"

                        yardElemAction(x0)
                    let (s2) =
                        let yardElemAction expr = 
                            match expr with
                            | RELeaf list_elem -> (list_elem :?> _ ) 
                            | x -> getUnmatched x "RELeaf"

                        yardElemAction(x1)
                    ( printfn "%A %A" s1 s2; s2::s1 )
                | x -> getUnmatched x "RESeq"

            yardRAltAction x 
        | x -> getUnmatched x "REAlt"
    box (inner)
let list_elem2 expr = 
    let inner  = 
        match expr with
        | RESeq [x0] -> 
            let (s1) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tINT -> tINT :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(x0)
            ( printfn "int %A" (value s1); (value s1) )
        | x -> getUnmatched x "RESeq"
    box (inner)

let ruleToAction = dict [|(3,list_elem2); (2,list1); (1,start0)|]

