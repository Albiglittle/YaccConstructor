//this file was generated by GNESCC
//source grammar:yards\a1.yrd
//date:08.12.2011 3:34:04

module GNESCC.Regexp

open Yard.Generators.GNESCCGenerator
open System.Text.RegularExpressions

let buildIndexMap kvLst =
    let ks = List.map (fun (x:string,y) -> x.Length + 2,y) kvLst
    List.fold (fun (bl,blst) (l,v) -> bl+l,((bl,v)::blst)) (0,[]) ks
    |> snd
    |> dict

let buildStr kvLst =
    let sep = ";;"
    List.map fst kvLst 
    |> String.concat sep
    |> fun s -> ";" + s + ";"

let sql_expr childsLst = 
    let str = buildStr childsLst
    let idxValMap = buildIndexMap childsLst
    let re = new Regex("(((;5;)(;1;)(;6;))|(((;1;)(;7;)(;1;))|(((;8;)(;1;)(;9;)(;1;))|((;10;)))))")
    let elts =
        let res = re.Match(str)
        if Seq.fold (&&) true [for g in res.Groups -> g.Success]
        then res.Groups
        else (new Regex("(((;5;)(;1;)(;6;))|(((;1;)(;7;)(;1;))|(((;8;)(;1;)(;9;)(;1;))|((;10;)))))",RegexOptions.RightToLeft)).Match(str).Groups
    if elts.[5].Value = ""
    then
        let e2 =
            if elts.[10].Value = ""
            then
                let e2 =
                    if elts.[16].Value = ""
                    then
                        let e2 =
                            let e0 =
                                idxValMap.[elts.[18].Captures.[0].Index] |> RELeaf
                            RESeq [e0]
                        None, Some (e2)
                    else
                        let e1 =
                            let e3 =
                                idxValMap.[elts.[16].Captures.[0].Index] |> RELeaf
                            let e2 =
                                idxValMap.[elts.[15].Captures.[0].Index] |> RELeaf
                            let e1 =
                                idxValMap.[elts.[14].Captures.[0].Index] |> RELeaf
                            let e0 =
                                idxValMap.[elts.[13].Captures.[0].Index] |> RELeaf
                            RESeq [e0; e1; e2; e3]
                        Some (e1),None
                    |> REAlt

                None, Some (e2)
            else
                let e1 =
                    let e2 =
                        idxValMap.[elts.[10].Captures.[0].Index] |> RELeaf
                    let e1 =
                        idxValMap.[elts.[9].Captures.[0].Index] |> RELeaf
                    let e0 =
                        idxValMap.[elts.[8].Captures.[0].Index] |> RELeaf
                    RESeq [e0; e1; e2]
                Some (e1),None
            |> REAlt

        None, Some (e2)
    else
        let e1 =
            let e2 =
                idxValMap.[elts.[5].Captures.[0].Index] |> RELeaf
            let e1 =
                idxValMap.[elts.[4].Captures.[0].Index] |> RELeaf
            let e0 =
                idxValMap.[elts.[3].Captures.[0].Index] |> RELeaf
            RESeq [e0; e1; e2]
        Some (e1),None
    |> REAlt

let s childsLst = 
    let str = buildStr childsLst
    let idxValMap = buildIndexMap childsLst
    let re = new Regex("(((;11;))