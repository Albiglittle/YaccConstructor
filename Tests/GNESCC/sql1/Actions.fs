//this file was generated by GNESCC
//source grammar:yards\a1.yrd
//date:11/19/2011 4:04:56 PM

module GNESCC.Actions

open Yard.Generators.GNESCCGenerator

let getUnmatched x expectedType =
    "Unexpected type of node\nType " + x.ToString() + " is not expected in this position\n" + expectedType + " was expected." |> failwith
let sql_expr0 expr = 
    let inner  = 
        match expr with
        | REAlt(Some(x), None) -> 
            let yardLAltAction expr = 
                match expr with
                | RESeq [gnescc_x0] -> 
                    let (gnescc_x0) =
                        let yardElemAction expr = 
                            match expr with
                            | RELeaf tIDENT -> tIDENT :?> 'a
                            | x -> getUnmatched x "RELeaf"

                        yardElemAction(gnescc_x0)
                    (gnescc_x0 )
                | x -> getUnmatched x "RESeq"

            yardLAltAction x 
        | REAlt(None, Some(x)) -> 
            let yardRAltAction expr = 
                match expr with
                | REAlt(Some(x), None) -> 
                    let yardLAltAction expr = 
                        match expr with
                        | RESeq [gnescc_x0; gnescc_x1; gnescc_x2] -> 
                            let (gnescc_x0) =
                                let yardElemAction expr = 
                                    match expr with
                                    | RELeaf tLPAREN -> tLPAREN :?> 'a
                                    | x -> getUnmatched x "RELeaf"

                                yardElemAction(gnescc_x0)
                            let (gnescc_x1) =
                                let yardElemAction expr = 
                                    match expr with
                                    | RELeaf sql_expr -> (sql_expr :?> _ ) 
                                    | x -> getUnmatched x "RELeaf"

                                yardElemAction(gnescc_x1)
                            let (gnescc_x2) =
                                let yardElemAction expr = 
                                    match expr with
                                    | RELeaf tRPAREN -> tRPAREN :?> 'a
                                    | x -> getUnmatched x "RELeaf"

                                yardElemAction(gnescc_x2)
                            (gnescc_x0,gnescc_x1,gnescc_x2 )
                        | x -> getUnmatched x "RESeq"

                    yardLAltAction x 
                | REAlt(None, Some(x)) -> 
                    let yardRAltAction expr = 
                        match expr with
                        | REAlt(Some(x), None) -> 
                            let yardLAltAction expr = 
                                match expr with
                                | RESeq [gnescc_x0] -> 
                                    let (gnescc_x0) =
                                        let yardElemAction expr = 
                                            match expr with
                                            | RELeaf tLOCALVAR -> tLOCALVAR :?> 'a
                                            | x -> getUnmatched x "RELeaf"

                                        yardElemAction(gnescc_x0)
                                    (gnescc_x0 )
                                | x -> getUnmatched x "RESeq"

                            yardLAltAction x 
                        | REAlt(None, Some(x)) -> 
                            let yardRAltAction expr = 
                                match expr with
                                | REAlt(Some(x), None) -> 
                                    let yardLAltAction expr = 
                                        match expr with
                                        | RESeq [gnescc_x0; gnescc_x1; gnescc_x2] -> 
                                            let (gnescc_x2) =
                                                let yardElemAction expr = 
                                                    match expr with
                                                    | RELeaf sql_expr -> (sql_expr :?> _ ) 
                                                    | x -> getUnmatched x "RELeaf"

                                                yardElemAction(gnescc_x2)
                                            let (gnescc_x1) =
                                                let yardElemAction expr = 
                                                    match expr with
                                                    | RELeaf tOP_MT -> tOP_MT :?> 'a
                                                    | x -> getUnmatched x "RELeaf"

                                                yardElemAction(gnescc_x1)
                                            let (gnescc_x2) =
                                                let yardElemAction expr = 
                                                    match expr with
                                                    | RELeaf sql_expr -> (sql_expr :?> _ ) 
                                                    | x -> getUnmatched x "RELeaf"

                                                yardElemAction(gnescc_x2)
                                            (gnescc_x0,gnescc_x1,gnescc_x2 )
                                        | x -> getUnmatched x "RESeq"

                                    yardLAltAction x 
                                | REAlt(None, Some(x)) -> 
                                    let yardRAltAction expr = 
                                        match expr with
                                        | REAlt(Some(x), None) -> 
                                            let yardLAltAction expr = 
                                                match expr with
                                                | RESeq [gnescc_x0; gnescc_x1; gnescc_x2; gnescc_x3] -> 
                                                    let (gnescc_x0) =
                                                        let yardElemAction expr = 
                                                            match expr with
                                                            | RELeaf tKW_IF -> tKW_IF :?> 'a
                                                            | x -> getUnmatched x "RELeaf"

                                                        yardElemAction(gnescc_x0)
                                                    let (gnescc_x3) =
                                                        let yardElemAction expr = 
                                                            match expr with
                                                            | RELeaf sql_expr -> (sql_expr :?> _ ) 
                                                            | x -> getUnmatched x "RELeaf"

                                                        yardElemAction(gnescc_x3)
                                                    let (gnescc_x2) =
                                                        let yardElemAction expr = 
                                                            match expr with
                                                            | RELeaf tKW_THEN -> tKW_THEN :?> 'a
                                                            | x -> getUnmatched x "RELeaf"

                                                        yardElemAction(gnescc_x2)
                                                    let (gnescc_x3) =
                                                        let yardElemAction expr = 
                                                            match expr with
                                                            | RELeaf sql_expr -> (sql_expr :?> _ ) 
                                                            | x -> getUnmatched x "RELeaf"

                                                        yardElemAction(gnescc_x3)
                                                    (gnescc_x0,gnescc_x1,gnescc_x2,gnescc_x3 )
                                                | x -> getUnmatched x "RESeq"

                                            yardLAltAction x 
                                        | REAlt(None, Some(x)) -> 
                                            let yardRAltAction expr = 
                                                match expr with
                                                | RESeq [gnescc_x0] -> 
                                                    let (gnescc_x0) =
                                                        let yardElemAction expr = 
                                                            match expr with
                                                            | RELeaf tDEC_NUMBER -> tDEC_NUMBER :?> 'a
                                                            | x -> getUnmatched x "RELeaf"

                                                        yardElemAction(gnescc_x0)
                                                    (gnescc_x0 )
                                                | x -> getUnmatched x "RESeq"

                                            yardRAltAction x 
                                        | x -> getUnmatched x "REAlt"

                                    yardRAltAction x 
                                | x -> getUnmatched x "REAlt"

                            yardRAltAction x 
                        | x -> getUnmatched x "REAlt"

                    yardRAltAction x 
                | x -> getUnmatched x "REAlt"

            yardRAltAction x 
        | x -> getUnmatched x "REAlt"
    box (inner)

let ruleToAction = dict [|(1,sql_expr0)|]

