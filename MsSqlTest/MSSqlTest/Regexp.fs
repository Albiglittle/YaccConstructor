//this file was generated by GNESCC
//source grammar:yards\mssql0.yrd
//date:11/7/2011 11:53:14 AM

module GNESCC.Regexp

open Yard.Generators.GNESCCGenerator
open System.Text.RegularExpressions

let buildIndexMap kvLst =
    let ks = List.map (fun (x:string,y) -> x.Length + 2,y) kvLst
    List.fold (fun (bl,blst) (l,v) -> bl+l,((bl,v)::blst)) (0,[]) ks
    |> snd
    |> dict

let buildStr kvLst =
    let sep = ";;"
    List.map fst kvLst 
    |> String.concat sep
    |> fun s -> ";" + s + ";"

let start childsLst = 
    let str = buildStr childsLst
    let idxValMap = buildIndexMap childsLst
    let re = new Regex("((((;4;))|((;6;)))*)")
    let elts =
        let res = re.Match(str)
        if Seq.fold (&&) true [for g in res.Groups -> g.Success]
        then res.Groups
        else (new Regex("((((;4;))|((;6;)))*)",RegexOptions.RightToLeft)).Match(str).Groups
    let e0 =
        let ofset = ref 0
        let e i =
            let str = elts.[2].Captures.[i].Value
            let re = new Regex("((;4;))|((;6;))")
            let elts =
                let res = re.Match(str)
                if Seq.fold (&&) true [for g in res.Groups -> g.Success]
                then res.Groups
                else (new Regex("((;4;))|((;6;))",RegexOptions.RightToLeft)).Match(str).Groups
            let res =
                if elts.[2].Value = ""
                then
                    let e2 =
                        let e0 =
                            idxValMap.[!ofset + elts.[4].Captures.[0].Index] |> RELeaf
                        RESeq [e0]
                    None, Some (e2)
                else
                    let e1 =
                        let e0 =
                            idxValMap.[!ofset + elts.[2].Captures.[0].Index] |> RELeaf
                        RESeq [e0]
                    Some (e1),None
                |> REAlt

            ofset := !ofset + str.Length
            res
        REClosure [for i in [0..elts.[2].Captures.Count-1] -> e i]

    RESeq [e0]
let root_rule childsLst = 
    let str = buildStr childsLst
    let idxValMap = buildIndexMap childsLst
    let re = new Regex("((;5;))|((;8;))|((;2;))")
    let elts =
        let res = re.Match(str)
        if Seq.fold (&&) true [for g in res.Groups -> g.Success]
        then res.Groups
        else (new Regex("((;5;))|((;8;))|((;2;))",RegexOptions.RightToLeft)).Match(str).Groups
    if elts.[2].Value = ""
    then
        let e2 =
            if elts.[4].Value = ""
            then
                let e2 =
                    let e0 =
                        idxValMap.[elts.[6].Captures.[0].Index] |> RELeaf
                    RESeq [e0]
                None, Some (e2)
            else
                let e1 =
                    let e0 =
                        idxValMap.[elts.[4].Captures.[0].Index] |> RELeaf
                    RESeq [e0]
                Some (e1),None
            |> REAlt

        None, Some (e2)
    else
        let e1 =
            let e0 =
                idxValMap.[elts.[2].Captures.[0].Index] |> RELeaf
            RESeq [e0]
        Some (e1),None
    |> REAlt

let start2 childsLst = 
    let str = buildStr childsLst
    let idxValMap = buildIndexMap childsLst
    let re = new Regex("((((;10;)(;11;))((;12;)(;11;))))|((;6;))|((;13;))|((;14;))|((;15;))")
    let elts =
        let res = re.Match(str)
        if Seq.fold (&&) true [for g in res.Groups -> g.Success]
        then res.Groups
        else (new Regex("((((;10;)(;11;))((;12;)(;11;))))|((;6;))|((;13;))|((;14;))|((;15;))",RegexOptions.RightToLeft)).Match(str).Groups
    if elts.[8].Value = ""
    then
        let e2 =
            if elts.[10].Value = ""
            then
                let e2 =
                    if elts.[12].Value = ""
                    then
                        let e2 =
                            if elts.[14].Value = ""
                            then
                                let e2 =
                                    let e0 =
                                        idxValMap.[elts.[16].Captures.[0].Index] |> RELeaf
                                    RESeq [e0]
                                None, Some (e2)
                            else
                                let e1 =
                                    let e0 =
                                        idxValMap.[elts.[14].Captures.[0].Index] |> RELeaf
                                    RESeq [e0]
                                Some (e1),None
                            |> REAlt

                        None, Some (e2)
                    else
                        let e1 =
                            let e0 =
                                idxValMap.[elts.[12].Captures.[0].Index] |> RELeaf
                            RESeq [e0]
                        Some (e1),None
                    |> REAlt

                None, Some (e2)
            else
                let e1 =
                    let e0 =
                        idxValMap.[elts.[10].Captures.[0].Index] |> RELeaf
                    RESeq [e0]
                Some (e1),None
            |> REAlt

        None, Some (e2)
    else
        let e1 =
            let e0 =
                let e1 =
                    let e1 =
                        idxValMap.[elts.[8].Captures.[0].Index] |> RELeaf
                    let e0 =
                        idxValMap.[elts.[7].Captures.[0].Index] |> RELeaf
                    RESeq [e0; e1]
                let e0 =
                    let e1 =
                        idxValMap.[elts.[5].Captures.[0].Index] |> RELeaf
                    let e0 =
                        idxValMap.[elts.[4].Captures.[0].Index] |> RELeaf
                    RESeq [e0; e1]
                RESeq [e0; e1]
            RESeq [e0]
        Some (e1),None
    |> REAlt

let create_proc childsLst = 
    let str = buildStr childsLst
    let idxValMap = buildIndexMap childsLst
    let re = new Regex("(((;16;)((;17;))|((;18;)))(((;11;))(;19;))?((;11;))((;20;)(;11;))?((((;21;)((;11;)(;19;))?(;3;))((;23;))?((;24;)(;11;))?((;25;))|((;26;))?((;27;))?))+((;28;)(((;7;)))+)?((;30;)(;31;))?(;32;)((;33;)?((;6;))*(;35;)?)((;20;))?)")
    let elts =
        let res = re.Match(str)
        if Seq.fold (&&) true [for g in res.Groups -> g.Success]
        then res.Groups
        else (new Regex("(((;16;)((;17;))|((;18;)))(((;11;))(;19;))?((;11;))((;20;)(;11;))?((((;21;)((;11;)(;19;))?(;3;))((;23;))?((;24;)(;11;))?((;25;))|((;26;))?((;27;))?))+((;28;)(((;7;)))+)?((;30;)(;31;))?(;32;)((;33;)?((;6;))*(;35;)?)((;20;))?)",RegexOptions.RightToLeft)).Match(str).Groups
    let e9 =
        if elts.[4].Value <> ""
        then
            let e  =
                let e0 =
                    idxValMap.[elts.[4].Captures.[0].Index] |> RELeaf
                RESeq [e0]
            Some (e)
        else None 
        |>REOpt

    let e8 =
        let e2 =
            if elts.[2].Value <> ""
            then
                let e  =
                    idxValMap.[elts.[2].Captures.[0].Index] |> RELeaf
                Some (e)
            else None 
            |>REOpt

        let e1 =
            let ofset = ref 0
            let e i =
                let str = elts.[9].Captures.[i].Value
                let re = new Regex("(;6;)")
                let elts =
                    let res = re.Match(str)
                    if Seq.fold (&&) true [for g in res.Groups -> g.Success]
                    then res.Groups
                    else (new Regex("(;6;)",RegexOptions.RightToLeft)).Match(str).Groups
                let res =
                    idxValMap.[!ofset + elts.[1].Captures.[0].Index] |> RELeaf
                ofset := !ofset + str.Length
                res
            REClosure [for i in [0..elts.[9].Captures.Count-1] -> e i]

        let e0 =
            if elts.[8].Value <> ""
            then
                let e  =
                    idxValMap.[elts.[8].Captures.[0].Index] |> RELeaf
                Some (e)
            else None 
            |>REOpt

        RESeq [e0; e1; e2]
    let e7 =
        idxValMap.[elts.[6].Captures.[0].Index] |> RELeaf
    let e6 =
        if elts.[5].Value <> ""
        then
            let e  =
                let e1 =
                    idxValMap.[elts.[5].Captures.[0].Index] |> RELeaf
                let e0 =
                    idxValMap.[elts.[4].Captures.[0].Index] |> RELeaf
                RESeq [e0; e1]
            Some (e)
        else None 
        |>REOpt

    let e5 =
        if elts.[2].Value <> ""
        then
            let e  =
                let e1 =
                    let ofset = ref 0
                    let e i =
                        let str = elts.[21].Captures.[i].Value
                        let re = new Regex("((;7;))")
                        let elts =
                            let res = re.Match(str)
                            if Seq.fold (&&) true [for g in res.Groups -> g.Success]
                            then res.Groups
                            else (new Regex("((;7;))",RegexOptions.RightToLeft)).Match(str).Groups
                        let res =
                            let e0 =
                                idxValMap.[!ofset + elts.[2].Captures.[0].Index] |> RELeaf
                            RESeq [e0]
                        ofset := !ofset + str.Length
                        res
                    REClosure [for i in [0..elts.[21].Captures.Count-1] -> e i]

                let e0 =
                    idxValMap.[elts.[20].Captures.[0].Index] |> RELeaf
                RESeq [e0; e1]
            Some (e)
        else None 
        |>REOpt

    let e4 =
        let ofset = ref 0
        let e i =
            let str = elts.[17].Captures.[i].Value
            let re = new Regex("(((;21;)((;11;)(;19;))?(;3;))((;23;))?((;24;)(;11;))?((;25;))|((;26;))?((;27;))?)")
            let elts =
                let res = re.Match(str)
                if Seq.fold (&&) true [for g in res.Groups -> g.Success]
                then res.Groups
                else (new Regex("(((;21;)((;11;)(;19;))?(;3;))((;23;))?((;24;)(;11;))?((;25;))|((;26;))?((;27;))?)",RegexOptions.RightToLeft)).Match(str).Groups
            let res =
                let e4 =
                    if elts.[18].Value <> ""
                    then
                        let e  =
                            let e0 =
                                idxValMap.[!ofset + elts.[18].Captures.[0].Index] |> RELeaf
                            RESeq [e0]
                        Some (e)
                    else None 
                    |>REOpt

                let e3 =
                    if elts.[16].Value <> ""
                    then
                        let e  =
                            if elts.[14].Value = ""
                            then
                                let e2 =
                                    let e0 =
                                        idxValMap.[!ofset + elts.[16].Captures.[0].Index] |> RELeaf
                                    RESeq [e0]
                                None, Some (e2)
                            else
                                let e1 =
                                    let e0 =
                                        idxValMap.[!ofset + elts.[14].Captures.[0].Index] |> RELeaf
                                    RESeq [e0]
                                Some (e1),None
                            |> REAlt

                        Some (e)
                    else None 
                    |>REOpt

                let e2 =
                    if elts.[12].Value <> ""
                    then
                        let e  =
                            let e1 =
                                idxValMap.[!ofset + elts.[12].Captures.[0].Index] |> RELeaf
                            let e0 =
                                idxValMap.[!ofset + elts.[11].Captures.[0].Index] |> RELeaf
                            RESeq [e0; e1]
                        Some (e)
                    else None 
                    |>REOpt

                let e1 =
                    if elts.[9].Value <> ""
                    then
                        let e  =
                            let e0 =
                                idxValMap.[!ofset + elts.[9].Captures.[0].Index] |> RELeaf
                            RESeq [e0]
                        Some (e)
                    else None 
                    |>REOpt

                let e0 =
                    let e2 =
                        idxValMap.[!ofset + elts.[7].Captures.[0].Index] |> RELeaf
                    let e1 =
                        if elts.[6].Value <> ""
                        then
                            let e  =
                                let e1 =
                                    idxValMap.[!ofset + elts.[6].Captures.[0].Index] |> RELeaf
                                let e0 =
                                    idxValMap.[!ofset + elts.[5].Captures.[0].Index] |> RELeaf
                                RESeq [e0; e1]
                            Some (e)
                        else None 
                        |>REOpt

                    let e0 =
                        idxValMap.[!ofset + elts.[3].Captures.[0].Index] |> RELeaf
                    RESeq [e0; e1; e2]
                RESeq [e0; e1; e2; e3; e4]
            ofset := !ofset + str.Length
            res
        REClosure [for i in [0..elts.[17].Captures.Count-1] -> e i]

    let e3 =
        if elts.[16].Value <> ""
        then
            let e  =
                let e1 =
                    idxValMap.[elts.[16].Captures.[0].Index] |> RELeaf
                let e0 =
                    idxValMap.[elts.[15].Captures.[0].Index] |> RELeaf
                RESeq [e0; e1]
            Some (e)
        else None 
        |>REOpt

    let e2 =
        let e0 =
            idxValMap.[elts.[13].Captures.[0].Index] |> RELeaf
        RESeq [e0]
    let e1 =
        if elts.[11].Value <> ""
        then
            let e  =
                let e1 =
                    idxValMap.[elts.[11].Captures.[0].Index] |> RELeaf
                let e0 =
                    let e0 =
                        idxValMap.[elts.[10].Captures.[0].Index] |> RELeaf
                    RESeq [e0]
                RESeq [e0; e1]
            Some (e)
        else None 
        |>REOpt

    let e0 =
        let e1 =
            if elts.[5].Value = ""
            then
                let e2 =
                    let e0 =
                        idxValMap.[elts.[7].Captures.[0].Index] |> RELeaf
                    RESeq [e0]
                None, Some (e2)
            else
                let e1 =
                    let e0 =
                        idxValMap.[elts.[5].Captures.[0].Index] |> RELeaf
                    RESeq [e0]
                Some (e1),None
            |> REAlt

        let e0 =
            idxValMap.[elts.[3].Captures.[0].Index] |> RELeaf
        RESeq [e0; e1]
    RESeq [e0; e1; e2; e3; e4; e5; e6; e7; e8; e9]
let proc_body_stmnt childsLst = 
    let str = buildStr childsLst
    let idxValMap = buildIndexMap childsLst
    let re = new Regex("((((;10;)(;11;))((;12;)(;11;))))|((;8;))")
    let elts =
        let res = re.Match(str)
        if Seq.fold (&&) true [for g in res.Groups -> g.Success]
        then res.Groups
        else (new Regex("((((;10;)(;11;))((;12;)(;11;))))|((;8;))",RegexOptions.RightToLeft)).Match(str).Groups
    if elts.[8].Value = ""
    then
        let e2 =
            let e0 =
                idxValMap.[elts.[10].Captures.[0].Index] |> RELeaf
            RESeq [e0]
        None, Some (e2)
    else
        let e1 =
            let e0 =
                let e1 =
                    let e1 =
                        idxValMap.[elts.[8].Captures.[0].Index] |> RELeaf
                    let e0 =
                        idxValMap.[elts.[7].Captures.[0].Index] |> RELeaf
                    RESeq [e0; e1]
                let e0 =
                    let e1 =
                        idxValMap.[elts.[5].Captures.[0].Index] |> RELeaf
                    let e0 =
                        idxValMap.[elts.[4].Captures.[0].Index] |> RELeaf
                    RESeq [e0; e1]
                RESeq [e0; e1]
            RESeq [e0]
        Some (e1),None
    |> REAlt

let set_stmnt childsLst = 
    let str = buildStr childsLst
    let idxValMap = buildIndexMap childsLst
    let re = new Regex("((;37;)(;38;)((;39;))|((;40;)))|((;37;)(;41;)((;39;))|((;40;)))|((;37;)(;42;)((;39;))|((;40;)))|((;37;)(;43;)((;39;))|((;40;)))|((;37;)(;21;)((;44;)(;11;))?(;45;)(;9;))")
    let elts =
        let res = re.Match(str)
        if Seq.fold (&&) true [for g in res.Groups -> g.Success]
        then res.Groups
        else (new Regex("((;37;)(;38;)((;39;))|((;40;)))|((;37;)(;41;)((;39;))|((;40;)))|((;37;)(;42;)((;39;))|((;40;)))|((;37;)(;43;)((;39;))|((;40;)))|((;37;)(;21;)((;44;)(;11;))?(;45;)(;9;))",RegexOptions.RightToLeft)).Match(str).Groups
    if elts.[7].Value = ""
    then
        let e2 =
            if elts.[14].Value = ""
            then
                let e2 =
                    if elts.[21].Value = ""
                    then
                        let e2 =
                            if elts.[28].Value = ""
                            then
                                let e2 =
                                    let e4 =
                                        idxValMap.[elts.[36].Captures.[0].Index] |> RELeaf
                                    let e3 =
                                        idxValMap.[elts.[35].Captures.[0].Index] |> RELeaf
                                    let e2 =
                                        if elts.[34].Value <> ""
                                        then
                                            let e  =
                                                let e1 =
                                                    idxValMap.[elts.[34].Captures.[0].Index] |> RELeaf
                                                let e0 =
                                                    idxValMap.[elts.[33].Captures.[0].Index] |> RELeaf
                                                RESeq [e0; e1]
                                            Some (e)
                                        else None 
                                        |>REOpt

                                    let e1 =
                                        idxValMap.[elts.[31].Captures.[0].Index] |> RELeaf
                                    let e0 =
                                        idxValMap.[elts.[30].Captures.[0].Index] |> RELeaf
                                    RESeq [e0; e1; e2; e3; e4]
                                None, Some (e2)
                            else
                                let e1 =
                                    let e2 =
                                        if elts.[26].Value = ""
                                        then
                                            let e2 =
                                                let e0 =
                                                    idxValMap.[elts.[28].Captures.[0].Index] |> RELeaf
                                                RESeq [e0]
                                            None, Some (e2)
                                        else
                                            let e1 =
                                                let e0 =
                                                    idxValMap.[elts.[26].Captures.[0].Index] |> RELeaf
                                                RESeq [e0]
                                            Some (e1),None
                                        |> REAlt

                                    let e1 =
                                        idxValMap.[elts.[24].Captures.[0].Index] |> RELeaf
                                    let e0 =
                                        idxValMap.[elts.[23].Captures.[0].Index] |> RELeaf
                                    RESeq [e0; e1; e2]
                                Some (e1),None
                            |> REAlt

                        None, Some (e2)
                    else
                        let e1 =
                            let e2 =
                                if elts.[19].Value = ""
                                then
                                    let e2 =
                                        let e0 =
                                            idxValMap.[elts.[21].Captures.[0].Index] |> RELeaf
                                        RESeq [e0]
                                    None, Some (e2)
                                else
                                    let e1 =
                                        let e0 =
                                            idxValMap.[elts.[19].Captures.[0].Index] |> RELeaf
                                        RESeq [e0]
                                    Some (e1),None
                                |> REAlt

                            let e1 =
                                idxValMap.[elts.[17].Captures.[0].Index] |> RELeaf
                            let e0 =
                                idxValMap.[elts.[16].Captures.[0].Index] |> RELeaf
                            RESeq [e0; e1; e2]
                        Some (e1),None
                    |> REAlt

                None, Some (e2)
            else
                let e1 =
                    let e2 =
                        if elts.[12].Value = ""
                        then
                            let e2 =
                                let e0 =
                                    idxValMap.[elts.[14].Captures.[0].Index] |> RELeaf
                                RESeq [e0]
                            None, Some (e2)
                        else
                            let e1 =
                                let e0 =
                                    idxValMap.[elts.[12].Captures.[0].Index] |> RELeaf
                                RESeq [e0]
                            Some (e1),None
                        |> REAlt

                    let e1 =
                        idxValMap.[elts.[10].Captures.[0].Index] |> RELeaf
                    let e0 =
                        idxValMap.[elts.[9].Captures.[0].Index] |> RELeaf
                    RESeq [e0; e1; e2]
                Some (e1),None
            |> REAlt

        None, Some (e2)
    else
        let e1 =
            let e2 =
                if elts.[5].Value = ""
                then
                    let e2 =
                        let e0 =
                            idxValMap.[elts.[7].Captures.[0].Index] |> RELeaf
                        RESeq [e0]
                    None, Some (e2)
                else
                    let e1 =
                        let e0 =
                            idxValMap.[elts.[5].Captures.[0].Index] |> RELeaf
                        RESeq [e0]
                    Some (e1),None
                |> REAlt

            let e1 =
                idxValMap.[elts.[3].Captures.[0].Index] |> RELeaf
            let e0 =
                idxValMap.[elts.[2].Captures.[0].Index] |> RELeaf
            RESeq [e0; e1; e2]
        Some (e1),None
    |> REAlt

let sql_datatype childsLst = 
    let str = buildStr childsLst
    let idxValMap = buildIndexMap childsLst
    let re = new Regex("(((;47;))|((;48;))|((;49;))|((;50;))|((;51;))|((;52;))|((;53;))|((;54;))|((;55;)))")
    let elts =
        let res = re.Match(str)
        if Seq.fold (&&) true [for g in res.Groups -> g.Success]
        then res.Groups
        else (new Regex("(((;47;))|((;48;))|((;49;))|((;50;))|((;51;))|((;52;))|((;53;))|((;54;))|((;55;)))",RegexOptions.RightToLeft)).Match(str).Groups
    let e0 =
        if elts.[3].Value = ""
        then
            let e2 =
                if elts.[5].Value = ""
                then
                    let e2 =
                        if elts.[7].Value = ""
                        then
                            let e2 =
                                if elts.[9].Value = ""
                                then
                                    let e2 =
                                        if elts.[11].Value = ""
                                        then
                                            let e2 =
                                                if elts.[13].Value = ""
                                                then
                                                    let e2 =
                                                        if elts.[15].Value = ""
                                                        then
                                                            let e2 =
                                                                if elts.[17].Value = ""
                                                                then
                                                                    let e2 =
                                                                        let e0 =
                                                                            idxValMap.[elts.[19].Captures.[0].Index] |> RELeaf
                                                                        RESeq [e0]
                                                                    None, Some (e2)
                                                                else
                                                                    let e1 =
                                                                        let e0 =
                                                                            idxValMap.[elts.[17].Captures.[0].Index] |> RELeaf
                                                                        RESeq [e0]
                                                                    Some (e1),None
                                                                |> REAlt

                                                            None, Some (e2)
                                                        else
                                                            let e1 =
                                                                let e0 =
                                                                    idxValMap.[elts.[15].Captures.[0].Index] |> RELeaf
                                                                RESeq [e0]
                                                            Some (e1),None
                                                        |> REAlt

                                                    None, Some (e2)
                                                else
                                                    let e1 =
                                                        let e0 =
                                                            idxValMap.[elts.[13].Captures.[0].Index] |> RELeaf
                                                        RESeq [e0]
                                                    Some (e1),None
                                                |> REAlt

                                            None, Some (e2)
                                        else
                                            let e1 =
                                                let e0 =
                                                    idxValMap.[elts.[11].Captures.[0].Index] |> RELeaf
                                                RESeq [e0]
                                            Some (e1),None
                                        |> REAlt

                                    None, Some (e2)
                                else
                                    let e1 =
                                        let e0 =
                                            idxValMap.[elts.[9].Captures.[0].Index] |> RELeaf
                                        RESeq [e0]
                                    Some (e1),None
                                |> REAlt

                            None, Some (e2)
                        else
                            let e1 =
                                let e0 =
                                    idxValMap.[elts.[7].Captures.[0].Index] |> RELeaf
                                RESeq [e0]
                            Some (e1),None
                        |> REAlt

                    None, Some (e2)
                else
                    let e1 =
                        let e0 =
                            idxValMap.[elts.[5].Captures.[0].Index] |> RELeaf
                        RESeq [e0]
                    Some (e1),None
                |> REAlt

            None, Some (e2)
        else
            let e1 =
                let e0 =
                    idxValMap.[elts.[3].Captures.[0].Index] |> RELeaf
                RESeq [e0]
            Some (e1),None
        |> REAlt

    RESeq [e0]
let execute_as childsLst = 
    let str = buildStr childsLst
    let idxValMap = buildIndexMap childsLst
    let re = new Regex("(((;56;))|((;57;))(;32;)((;58;))|((;59;))|((;60;))|(((;11;))))")
    let elts =
        let res = re.Match(str)
        if Seq.fold (&&) true [for g in res.Groups -> g.Success]
        then res.Groups
        else (new Regex("(((;56;))|((;57;))(;32;)((;58;))|((;59;))|((;60;))|(((;11;))))",RegexOptions.RightToLeft)).Match(str).Groups
    let e2 =
        if elts.[8].Value = ""
        then
            let e2 =
                if elts.[10].Value = ""
                then
                    let e2 =
                        if elts.[12].Value = ""
                        then
                            let e2 =
                                let e0 =
                                    let e0 =
                                        idxValMap.[elts.[15].Captures.[0].Index] |> RELeaf
                                    RESeq [e0]
                                RESeq [e0]
                            None, Some (e2)
                        else
                            let e1 =
                                let e0 =
                                    idxValMap.[elts.[12].Captures.[0].Index] |> RELeaf
                                RESeq [e0]
                            Some (e1),None
                        |> REAlt

                    None, Some (e2)
                else
                    let e1 =
                        let e0 =
                            idxValMap.[elts.[10].Captures.[0].Index] |> RELeaf
                        RESeq [e0]
                    Some (e1),None
                |> REAlt

            None, Some (e2)
        else
            let e1 =
                let e0 =
                    idxValMap.[elts.[8].Captures.[0].Index] |> RELeaf
                RESeq [e0]
            Some (e1),None
        |> REAlt

    let e1 =
        idxValMap.[elts.[6].Captures.[0].Index] |> RELeaf
    let e0 =
        if elts.[3].Value = ""
        then
            let e2 =
                let e0 =
                    idxValMap.[elts.[5].Captures.[0].Index] |> RELeaf
                RESeq [e0]
            None, Some (e2)
        else
            let e1 =
                let e0 =
                    idxValMap.[elts.[3].Captures.[0].Index] |> RELeaf
                RESeq [e0]
            Some (e1),None
        |> REAlt

    RESeq [e0; e1; e2]
let binop childsLst = 
    let str = buildStr childsLst
    let idxValMap = buildIndexMap childsLst
    let re = new Regex("((;61;))|((;62;))|((;63;))|((;64;))|((;65;))|((;66;))|((;67;))|((;68;))|((;45;))|((;69;))|((;70;))|((;71;))|((;72;))|((;73;))")
    let elts =
        let res = re.Match(str)
        if Seq.fold (&&) true [for g in res.Groups -> g.Success]
        then res.Groups
        else (new Regex("((;61;))|((;62;))|((;63;))|((;64;))|((;65;))|((;66;))|((;67;))|((;68;))|((;45;))|((;69;))|((;70;))|((;71;))|((;72;))|((;73;))",RegexOptions.RightToLeft)).Match(str).Groups
    if elts.[2].Value = ""
    then
        let e2 =
            if elts.[4].Value = ""
            then
                let e2 =
                    if elts.[6].Value = ""
                    then
                        let e2 =
                            if elts.[8].Value = ""
                            then
                                let e2 =
                                    if elts.[10].Value = ""
                                    then
                                        let e2 =
                                            if elts.[12].Value = ""
                                            then
                                                let e2 =
                                                    if elts.[14].Value = ""
                                                    then
                                                        let e2 =
                                                            if elts.[16].Value = ""
                                                            then
                                                                let e2 =
                                                                    if elts.[18].Value = ""
                                                                    then
                                                                        let e2 =
                                                                            if elts.[20].Value = ""
                                                                            then
                                                                                let e2 =
                                                                                    if elts.[22].Value = ""
                                                                                    then
                                                                                        let e2 =
                                                                                            if elts.[24].Value = ""
                                                                                            then
                                                                                                let e2 =
                                                                                                    if elts.[26].Value = ""
                                                                                                    then
                                                                                                        let e2 =
                                                                                                            let e0 =
                                                                                                                idxValMap.[elts.[28].Captures.[0].Index] |> RELeaf
                                                                                                            RESeq [e0]
                                                                                                        None, Some (e2)
                                                                                                    else
                                                                                                        let e1 =
                                                                                                            let e0 =
                                                                                                                idxValMap.[elts.[26].Captures.[0].Index] |> RELeaf
                                                                                                            RESeq [e0]
                                                                                                        Some (e1),None
                                                                                                    |> REAlt

                                                                                                None, Some (e2)
                                                                                            else
                                                                                                let e1 =
                                                                                                    let e0 =
                                                                                                        idxValMap.[elts.[24].Captures.[0].Index] |> RELeaf
                                                                                                    RESeq [e0]
                                                                                                Some (e1),None
                                                                                            |> REAlt

                                                                                        None, Some (e2)
                                                                                    else
                                                                                        let e1 =
                                                                                            let e0 =
                                                                                                idxValMap.[elts.[22].Captures.[0].Index] |> RELeaf
                                                                                            RESeq [e0]
                                                                                        Some (e1),None
                                                                                    |> REAlt

                                                                                None, Some (e2)
                                                                            else
                                                                                let e1 =
                                                                                    let e0 =
                                                                                        idxValMap.[elts.[20].Captures.[0].Index] |> RELeaf
                                                                                    RESeq [e0]
                                                                                Some (e1),None
                                                                            |> REAlt

                                                                        None, Some (e2)
                                                                    else
                                                                        let e1 =
                                                                            let e0 =
                                                                                idxValMap.[elts.[18].Captures.[0].Index] |> RELeaf
                                                                            RESeq [e0]
                                                                        Some (e1),None
                                                                    |> REAlt

                                                                None, Some (e2)
                                                            else
                                                                let e1 =
                                                                    let e0 =
                                                                        idxValMap.[elts.[16].Captures.[0].Index] |> RELeaf
                                                                    RESeq [e0]
                                                                Some (e1),None
                                                            |> REAlt

                                                        None, Some (e2)
                                                    else
                                                        let e1 =
                                                            let e0 =
                                                                idxValMap.[elts.[14].Captures.[0].Index] |> RELeaf
                                                            RESeq [e0]
                                                        Some (e1),None
                                                    |> REAlt

                                                None, Some (e2)
                                            else
                                                let e1 =
                                                    let e0 =
                                                        idxValMap.[elts.[12].Captures.[0].Index] |> RELeaf
                                                    RESeq [e0]
                                                Some (e1),None
                                            |> REAlt

                                        None, Some (e2)
                                    else
                                        let e1 =
                                            let e0 =
                                                idxValMap.[elts.[10].Captures.[0].Index] |> RELeaf
                                            RESeq [e0]
                                        Some (e1),None
                                    |> REAlt

                                None, Some (e2)
                            else
                                let e1 =
                                    let e0 =
                                        idxValMap.[elts.[8].Captures.[0].Index] |> RELeaf
                                    RESeq [e0]
                                Some (e1),None
                            |> REAlt

                        None, Some (e2)
                    else
                        let e1 =
                            let e0 =
                                idxValMap.[elts.[6].Captures.[0].Index] |> RELeaf
                            RESeq [e0]
                        Some (e1),None
                    |> REAlt

                None, Some (e2)
            else
                let e1 =
                    let e0 =
                        idxValMap.[elts.[4].Captures.[0].Index] |> RELeaf
                    RESeq [e0]
                Some (e1),None
            |> REAlt

        None, Some (e2)
    else
        let e1 =
            let e0 =
                idxValMap.[elts.[2].Captures.[0].Index] |> RELeaf
            RESeq [e0]
        Some (e1),None
    |> REAlt

let sql_expr childsLst = 
    let str = buildStr childsLst
    let idxValMap = buildIndexMap childsLst
    let re = new Regex("((;74;))|((;75;)(;9;)(;76;))|(((;11;)(;19;))?(;11;))|((;9;)(;10;)(;9;))|(((;61;))|((;62;))|((;78;))(;9;))")
    let elts =
        let res = re.Match(str)
        if Seq.fold (&&) true [for g in res.Groups -> g.Success]
        then res.Groups
        else (new Regex("((;74;))|((;75;)(;9;)(;76;))|(((;11;)(;19;))?(;11;))|((;9;)(;10;)(;9;))|(((;61;))|((;62;))|((;78;))(;9;))",RegexOptions.RightToLeft)).Match(str).Groups
    if elts.[2].Value = ""
    then
        let e2 =
            if elts.[6].Value = ""
            then
                let e2 =
                    if elts.[11].Value = ""
                    then
                        let e2 =
                            if elts.[15].Value = ""
                            then
                                let e2 =
                                    let e1 =
                                        idxValMap.[elts.[23].Captures.[0].Index] |> RELeaf
                                    let e0 =
                                        if elts.[18].Value = ""
                                        then
                                            let e2 =
                                                if elts.[20].Value = ""
                                                then
                                                    let e2 =
                                                        let e0 =
                                                            idxValMap.[elts.[22].Captures.[0].Index] |> RELeaf
                                                        RESeq [e0]
                                                    None, Some (e2)
                                                else
                                                    let e1 =
                                                        let e0 =
                                                            idxValMap.[elts.[20].Captures.[0].Index] |> RELeaf
                                                        RESeq [e0]
                                                    Some (e1),None
                                                |> REAlt

                                            None, Some (e2)
                                        else
                                            let e1 =
                                                let e0 =
                                                    idxValMap.[elts.[18].Captures.[0].Index] |> RELeaf
                                                RESeq [e0]
                                            Some (e1),None
                                        |> REAlt

                                    RESeq [e0; e1]
                                None, Some (e2)
                            else
                                let e1 =
                                    let e2 =
                                        idxValMap.[elts.[15].Captures.[0].Index] |> RELeaf
                                    let e1 =
                                        idxValMap.[elts.[14].Captures.[0].Index] |> RELeaf
                                    let e0 =
                                        idxValMap.[elts.[13].Captures.[0].Index] |> RELeaf
                                    RESeq [e0; e1; e2]
                                Some (e1),None
                            |> REAlt

                        None, Some (e2)
                    else
                        let e1 =
                            let e1 =
                                idxValMap.[elts.[11].Captures.[0].Index] |> RELeaf
                            let e0 =
                                if elts.[10].Value <> ""
                                then
                                    let e  =
                                        let e1 =
                                            idxValMap.[elts.[10].Captures.[0].Index] |> RELeaf
                                        let e0 =
                                            idxValMap.[elts.[9].Captures.[0].Index] |> RELeaf
                                        RESeq [e0; e1]
                                    Some (e)
                                else None 
                                |>REOpt

                            RESeq [e0; e1]
                        Some (e1),None
                    |> REAlt

                None, Some (e2)
            else
                let e1 =
                    let e2 =
                        idxValMap.[elts.[6].Captures.[0].Index] |> RELeaf
                    let e1 =
                        idxValMap.[elts.[5].Captures.[0].Index] |> RELeaf
                    let e0 =
                        idxValMap.[elts.[4].Captures.[0].Index] |> RELeaf
                    RESeq [e0; e1; e2]
                Some (e1),None
            |> REAlt

        None, Some (e2)
    else
        let e1 =
            let e0 =
                idxValMap.[elts.[2].Captures.[0].Index] |> RELeaf
            RESeq [e0]
        Some (e1),None
    |> REAlt


let ruleToRegex = dict [|(9,sql_expr); (10,binop); (7,execute_as); (3,sql_datatype); (8,set_stmnt); (6,proc_body_stmnt); (5,create_proc); (2,start2); (4,root_rule); (0,start)|]

