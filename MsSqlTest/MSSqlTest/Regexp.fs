//this file was generated by GNESCC
//source grammar:yards\mssql0.yrd
//date:11/1/2011 1:39:11 PM

module GNESCC.Regexp

open Yard.Generators.GNESCCGenerator
open System.Text.RegularExpressions

let buildIndexMap kvLst =
    let ks = List.map (fun (x:string,y) -> x.Length + 2,y) kvLst
    List.fold (fun (bl,blst) (l,v) -> bl+l,((bl,v)::blst)) (0,[]) ks
    |> snd
    |> dict

let buildStr kvLst =
    let sep = ";;"
    List.map fst kvLst 
    |> String.concat sep
    |> fun s -> ";" + s + ";"

let start childsLst = 
    let str = buildStr childsLst
    let idxValMap = buildIndexMap childsLst
    let re = new Regex("((((;5;)(;6;))((;7;)(;6;))))|((;8;))|((;9;))|((;10;))|((;11;))|((;12;))")
    let elts =
        let res = re.Match(str)
        if Seq.fold (&&) true [for g in res.Groups -> g.Success]
        then res.Groups
        else (new Regex("((((;5;)(;6;))((;7;)(;6;))))|((;8;))|((;9;))|((;10;))|((;11;))|((;12;))",RegexOptions.RightToLeft)).Match(str).Groups
    if elts.[8].Value = ""
    then
        let e2 =
            if elts.[10].Value = ""
            then
                let e2 =
                    if elts.[12].Value = ""
                    then
                        let e2 =
                            if elts.[14].Value = ""
                            then
                                let e2 =
                                    if elts.[16].Value = ""
                                    then
                                        let e2 =
                                            let e0 =
                                                idxValMap.[elts.[18].Captures.[0].Index] |> RELeaf
                                            RESeq [e0]
                                        None, Some (e2)
                                    else
                                        let e1 =
                                            let e0 =
                                                idxValMap.[elts.[16].Captures.[0].Index] |> RELeaf
                                            RESeq [e0]
                                        Some (e1),None
                                    |> REAlt

                                None, Some (e2)
                            else
                                let e1 =
                                    let e0 =
                                        idxValMap.[elts.[14].Captures.[0].Index] |> RELeaf
                                    RESeq [e0]
                                Some (e1),None
                            |> REAlt

                        None, Some (e2)
                    else
                        let e1 =
                            let e0 =
                                idxValMap.[elts.[12].Captures.[0].Index] |> RELeaf
                            RESeq [e0]
                        Some (e1),None
                    |> REAlt

                None, Some (e2)
            else
                let e1 =
                    let e0 =
                        idxValMap.[elts.[10].Captures.[0].Index] |> RELeaf
                    RESeq [e0]
                Some (e1),None
            |> REAlt

        None, Some (e2)
    else
        let e1 =
            let e0 =
                let e1 =
                    let e1 =
                        idxValMap.[elts.[8].Captures.[0].Index] |> RELeaf
                    let e0 =
                        idxValMap.[elts.[7].Captures.[0].Index] |> RELeaf
                    RESeq [e0; e1]
                let e0 =
                    let e1 =
                        idxValMap.[elts.[5].Captures.[0].Index] |> RELeaf
                    let e0 =
                        idxValMap.[elts.[4].Captures.[0].Index] |> RELeaf
                    RESeq [e0; e1]
                RESeq [e0; e1]
            RESeq [e0]
        Some (e1),None
    |> REAlt

let create_proc childsLst = 
    let str = buildStr childsLst
    let idxValMap = buildIndexMap childsLst
    let re = new Regex("(((;13;)((;14;))|((;15;)))(((;6;))(;16;))?((;6;))((;17;)(;6;))?((((;18;)((;6;)(;16;))?(;1;))((;20;))?((;21;)(;6;))?((;22;))|((;23;))?((;24;))?))+((;25;)(((;4;)))+)?((;27;)(;28;))?(;29;)((;30;)?(;0;)(;32;)?)((;17;))?)|((;5;))")
    let elts =
        let res = re.Match(str)
        if Seq.fold (&&) true [for g in res.Groups -> g.Success]
        then res.Groups
        else (new Regex("(((;13;)((;14;))|((;15;)))(((;6;))(;16;))?((;6;))((;17;)(;6;))?((((;18;)((;6;)(;16;))?(;1;))((;20;))?((;21;)(;6;))?((;22;))|((;23;))?((;24;))?))+((;25;)(((;4;)))+)?((;27;)(;28;))?(;29;)((;30;)?(;0;)(;32;)?)((;17;))?)|((;5;))",RegexOptions.RightToLeft)).Match(str).Groups
    if elts.[12].Value = ""
    then
        let e2 =
            let e0 =
                idxValMap.[elts.[14].Captures.[0].Index] |> RELeaf
            RESeq [e0]
        None, Some (e2)
    else
        let e1 =
            let e9 =
                if elts.[12].Value <> ""
                then
                    let e  =
                        let e0 =
                            idxValMap.[elts.[12].Captures.[0].Index] |> RELeaf
                        RESeq [e0]
                    Some (e)
                else None 
                |>REOpt

            let e8 =
                let e2 =
                    if elts.[10].Value <> ""
                    then
                        let e  =
                            idxValMap.[elts.[10].Captures.[0].Index] |> RELeaf
                        Some (e)
                    else None 
                    |>REOpt

                let e1 =
                    idxValMap.[elts.[9].Captures.[0].Index] |> RELeaf
                let e0 =
                    if elts.[8].Value <> ""
                    then
                        let e  =
                            idxValMap.[elts.[8].Captures.[0].Index] |> RELeaf
                        Some (e)
                    else None 
                    |>REOpt

                RESeq [e0; e1; e2]
            let e7 =
                idxValMap.[elts.[6].Captures.[0].Index] |> RELeaf
            let e6 =
                if elts.[5].Value <> ""
                then
                    let e  =
                        let e1 =
                            idxValMap.[elts.[5].Captures.[0].Index] |> RELeaf
                        let e0 =
                            idxValMap.[elts.[4].Captures.[0].Index] |> RELeaf
                        RESeq [e0; e1]
                    Some (e)
                else None 
                |>REOpt

            let e5 =
                if elts.[2].Value <> ""
                then
                    let e  =
                        let e1 =
                            let ofset = ref 0
                            let e i =
                                let str = elts.[21].Captures.[i].Value
                                let re = new Regex("((;4;))")
                                let elts =
                                    let res = re.Match(str)
                                    if Seq.fold (&&) true [for g in res.Groups -> g.Success]
                                    then res.Groups
                                    else (new Regex("((;4;))",RegexOptions.RightToLeft)).Match(str).Groups
                                let res =
                                    let e0 =
                                        idxValMap.[!ofset + elts.[2].Captures.[0].Index] |> RELeaf
                                    RESeq [e0]
                                ofset := !ofset + str.Length
                                res
                            REClosure [for i in [0..elts.[21].Captures.Count-1] -> e i]

                        let e0 =
                            idxValMap.[elts.[20].Captures.[0].Index] |> RELeaf
                        RESeq [e0; e1]
                    Some (e)
                else None 
                |>REOpt

            let e4 =
                let ofset = ref 0
                let e i =
                    let str = elts.[17].Captures.[i].Value
                    let re = new Regex("(((;18;)((;6;)(;16;))?(;1;))((;20;))?((;21;)(;6;))?((;22;))|((;23;))?((;24;))?)")
                    let elts =
                        let res = re.Match(str)
                        if Seq.fold (&&) true [for g in res.Groups -> g.Success]
                        then res.Groups
                        else (new Regex("(((;18;)((;6;)(;16;))?(;1;))((;20;))?((;21;)(;6;))?((;22;))|((;23;))?((;24;))?)",RegexOptions.RightToLeft)).Match(str).Groups
                    let res =
                        let e4 =
                            if elts.[18].Value <> ""
                            then
                                let e  =
                                    let e0 =
                                        idxValMap.[!ofset + elts.[18].Captures.[0].Index] |> RELeaf
                                    RESeq [e0]
                                Some (e)
                            else None 
                            |>REOpt

                        let e3 =
                            if elts.[16].Value <> ""
                            then
                                let e  =
                                    if elts.[14].Value = ""
                                    then
                                        let e2 =
                                            let e0 =
                                                idxValMap.[!ofset + elts.[16].Captures.[0].Index] |> RELeaf
                                            RESeq [e0]
                                        None, Some (e2)
                                    else
                                        let e1 =
                                            let e0 =
                                                idxValMap.[!ofset + elts.[14].Captures.[0].Index] |> RELeaf
                                            RESeq [e0]
                                        Some (e1),None
                                    |> REAlt

                                Some (e)
                            else None 
                            |>REOpt

                        let e2 =
                            if elts.[12].Value <> ""
                            then
                                let e  =
                                    let e1 =
                                        idxValMap.[!ofset + elts.[12].Captures.[0].Index] |> RELeaf
                                    let e0 =
                                        idxValMap.[!ofset + elts.[11].Captures.[0].Index] |> RELeaf
                                    RESeq [e0; e1]
                                Some (e)
                            else None 
                            |>REOpt

                        let e1 =
                            if elts.[9].Value <> ""
                            then
                                let e  =
                                    let e0 =
                                        idxValMap.[!ofset + elts.[9].Captures.[0].Index] |> RELeaf
                                    RESeq [e0]
                                Some (e)
                            else None 
                            |>REOpt

                        let e0 =
                            let e2 =
                                idxValMap.[!ofset + elts.[7].Captures.[0].Index] |> RELeaf
                            let e1 =
                                if elts.[6].Value <> ""
                                then
                                    let e  =
                                        let e1 =
                                            idxValMap.[!ofset + elts.[6].Captures.[0].Index] |> RELeaf
                                        let e0 =
                                            idxValMap.[!ofset + elts.[5].Captures.[0].Index] |> RELeaf
                                        RESeq [e0; e1]
                                    Some (e)
                                else None 
                                |>REOpt

                            let e0 =
                                idxValMap.[!ofset + elts.[3].Captures.[0].Index] |> RELeaf
                            RESeq [e0; e1; e2]
                        RESeq [e0; e1; e2; e3; e4]
                    ofset := !ofset + str.Length
                    res
                REClosure [for i in [0..elts.[17].Captures.Count-1] -> e i]

            let e3 =
                if elts.[16].Value <> ""
                then
                    let e  =
                        let e1 =
                            idxValMap.[elts.[16].Captures.[0].Index] |> RELeaf
                        let e0 =
                            idxValMap.[elts.[15].Captures.[0].Index] |> RELeaf
                        RESeq [e0; e1]
                    Some (e)
                else None 
                |>REOpt

            let e2 =
                let e0 =
                    idxValMap.[elts.[13].Captures.[0].Index] |> RELeaf
                RESeq [e0]
            let e1 =
                if elts.[11].Value <> ""
                then
                    let e  =
                        let e1 =
                            idxValMap.[elts.[11].Captures.[0].Index] |> RELeaf
                        let e0 =
                            let e0 =
                                idxValMap.[elts.[10].Captures.[0].Index] |> RELeaf
                            RESeq [e0]
                        RESeq [e0; e1]
                    Some (e)
                else None 
                |>REOpt

            let e0 =
                let e1 =
                    if elts.[5].Value = ""
                    then
                        let e2 =
                            let e0 =
                                idxValMap.[elts.[7].Captures.[0].Index] |> RELeaf
                            RESeq [e0]
                        None, Some (e2)
                    else
                        let e1 =
                            let e0 =
                                idxValMap.[elts.[5].Captures.[0].Index] |> RELeaf
                            RESeq [e0]
                        Some (e1),None
                    |> REAlt

                let e0 =
                    idxValMap.[elts.[3].Captures.[0].Index] |> RELeaf
                RESeq [e0; e1]
            RESeq [e0; e1; e2; e3; e4; e5; e6; e7; e8; e9]
        Some (e1),None
    |> REAlt

let sql_statement childsLst = 
    let str = buildStr childsLst
    let idxValMap = buildIndexMap childsLst
    let re = new Regex("((((;5;)(;6;))((;7;)(;6;))))")
    let elts =
        let res = re.Match(str)
        if Seq.fold (&&) true [for g in res.Groups -> g.Success]
        then res.Groups
        else (new Regex("((((;5;)(;6;))((;7;)(;6;))))",RegexOptions.RightToLeft)).Match(str).Groups
    let e0 =
        let e1 =
            let e1 =
                idxValMap.[elts.[8].Captures.[0].Index] |> RELeaf
            let e0 =
                idxValMap.[elts.[7].Captures.[0].Index] |> RELeaf
            RESeq [e0; e1]
        let e0 =
            let e1 =
                idxValMap.[elts.[5].Captures.[0].Index] |> RELeaf
            let e0 =
                idxValMap.[elts.[4].Captures.[0].Index] |> RELeaf
            RESeq [e0; e1]
        RESeq [e0; e1]
    RESeq [e0]
let sql_datatype childsLst = 
    let str = buildStr childsLst
    let idxValMap = buildIndexMap childsLst
    let re = new Regex("(((;34;))|((;35;))|((;36;))|((;37;))|((;38;))|((;39;))|((;40;))|((;41;))|((;42;)))")
    let elts =
        let res = re.Match(str)
        if Seq.fold (&&) true [for g in res.Groups -> g.Success]
        then res.Groups
        else (new Regex("(((;34;))|((;35;))|((;36;))|((;37;))|((;38;))|((;39;))|((;40;))|((;41;))|((;42;)))",RegexOptions.RightToLeft)).Match(str).Groups
    let e0 =
        if elts.[3].Value = ""
        then
            let e2 =
                if elts.[5].Value = ""
                then
                    let e2 =
                        if elts.[7].Value = ""
                        then
                            let e2 =
                                if elts.[9].Value = ""
                                then
                                    let e2 =
                                        if elts.[11].Value = ""
                                        then
                                            let e2 =
                                                if elts.[13].Value = ""
                                                then
                                                    let e2 =
                                                        if elts.[15].Value = ""
                                                        then
                                                            let e2 =
                                                                if elts.[17].Value = ""
                                                                then
                                                                    let e2 =
                                                                        let e0 =
                                                                            idxValMap.[elts.[19].Captures.[0].Index] |> RELeaf
                                                                        RESeq [e0]
                                                                    None, Some (e2)
                                                                else
                                                                    let e1 =
                                                                        let e0 =
                                                                            idxValMap.[elts.[17].Captures.[0].Index] |> RELeaf
                                                                        RESeq [e0]
                                                                    Some (e1),None
                                                                |> REAlt

                                                            None, Some (e2)
                                                        else
                                                            let e1 =
                                                                let e0 =
                                                                    idxValMap.[elts.[15].Captures.[0].Index] |> RELeaf
                                                                RESeq [e0]
                                                            Some (e1),None
                                                        |> REAlt

                                                    None, Some (e2)
                                                else
                                                    let e1 =
                                                        let e0 =
                                                            idxValMap.[elts.[13].Captures.[0].Index] |> RELeaf
                                                        RESeq [e0]
                                                    Some (e1),None
                                                |> REAlt

                                            None, Some (e2)
                                        else
                                            let e1 =
                                                let e0 =
                                                    idxValMap.[elts.[11].Captures.[0].Index] |> RELeaf
                                                RESeq [e0]
                                            Some (e1),None
                                        |> REAlt

                                    None, Some (e2)
                                else
                                    let e1 =
                                        let e0 =
                                            idxValMap.[elts.[9].Captures.[0].Index] |> RELeaf
                                        RESeq [e0]
                                    Some (e1),None
                                |> REAlt

                            None, Some (e2)
                        else
                            let e1 =
                                let e0 =
                                    idxValMap.[elts.[7].Captures.[0].Index] |> RELeaf
                                RESeq [e0]
                            Some (e1),None
                        |> REAlt

                    None, Some (e2)
                else
                    let e1 =
                        let e0 =
                            idxValMap.[elts.[5].Captures.[0].Index] |> RELeaf
                        RESeq [e0]
                    Some (e1),None
                |> REAlt

            None, Some (e2)
        else
            let e1 =
                let e0 =
                    idxValMap.[elts.[3].Captures.[0].Index] |> RELeaf
                RESeq [e0]
            Some (e1),None
        |> REAlt

    RESeq [e0]
let execute_as childsLst = 
    let str = buildStr childsLst
    let idxValMap = buildIndexMap childsLst
    let re = new Regex("(((;43;))|((;44;))(;29;)((;45;))|((;46;))|((;47;))|(((;6;))))")
    let elts =
        let res = re.Match(str)
        if Seq.fold (&&) true [for g in res.Groups -> g.Success]
        then res.Groups
        else (new Regex("(((;43;))|((;44;))(;29;)((;45;))|((;46;))|((;47;))|(((;6;))))",RegexOptions.RightToLeft)).Match(str).Groups
    let e2 =
        if elts.[8].Value = ""
        then
            let e2 =
                if elts.[10].Value = ""
                then
                    let e2 =
                        if elts.[12].Value = ""
                        then
                            let e2 =
                                let e0 =
                                    let e0 =
                                        idxValMap.[elts.[15].Captures.[0].Index] |> RELeaf
                                    RESeq [e0]
                                RESeq [e0]
                            None, Some (e2)
                        else
                            let e1 =
                                let e0 =
                                    idxValMap.[elts.[12].Captures.[0].Index] |> RELeaf
                                RESeq [e0]
                            Some (e1),None
                        |> REAlt

                    None, Some (e2)
                else
                    let e1 =
                        let e0 =
                            idxValMap.[elts.[10].Captures.[0].Index] |> RELeaf
                        RESeq [e0]
                    Some (e1),None
                |> REAlt

            None, Some (e2)
        else
            let e1 =
                let e0 =
                    idxValMap.[elts.[8].Captures.[0].Index] |> RELeaf
                RESeq [e0]
            Some (e1),None
        |> REAlt

    let e1 =
        idxValMap.[elts.[6].Captures.[0].Index] |> RELeaf
    let e0 =
        if elts.[3].Value = ""
        then
            let e2 =
                let e0 =
                    idxValMap.[elts.[5].Captures.[0].Index] |> RELeaf
                RESeq [e0]
            None, Some (e2)
        else
            let e1 =
                let e0 =
                    idxValMap.[elts.[3].Captures.[0].Index] |> RELeaf
                RESeq [e0]
            Some (e1),None
        |> REAlt

    RESeq [e0; e1; e2]

let ruleToRegex = dict [|(4,execute_as); (1,sql_datatype); (0,sql_statement); (3,create_proc); (5,start)|]

