
# 3 "MSParser.fs"
module Yard.Examples.MSParser
#nowarn "64";; // From fsyacc: turn off warnings that type variables used in production annotations are instantiated to concrete type
open Yard.Generators.RNGLR.Parser
open Yard.Generators.RNGLR
open Yard.Generators.RNGLR.AST
type Token =
    | ANSI_NULLS of string
    | COMMA of string
    | DEC_NUMBER of string
    | DOLLAR of string
    | DOT of string
    | DOUBLE_COLON of string
    | EOF of string
    | GLOBALTEMPOBJ of string
    | GLOBALVAR of string
    | GO of string
    | IDENT of string
    | IMPLICIT_TRANSACTIONS of string
    | KW_ALL of string
    | KW_AND of string
    | KW_AS of string
    | KW_BEGIN of string
    | KW_BIGINT of string
    | KW_BIT of string
    | KW_CALLER of string
    | KW_CHAR of string
    | KW_CREATE of string
    | KW_DECIMAL of string
    | KW_DECLARE of string
    | KW_END of string
    | KW_EXCEPT of string
    | KW_EXEC of string
    | KW_EXECUTE of string
    | KW_FLOAT of string
    | KW_FOR of string
    | KW_FROM of string
    | KW_IDENTITY of string
    | KW_IF of string
    | KW_INT of string
    | KW_INTERSECT of string
    | KW_INTO of string
    | KW_IS of string
    | KW_LIKE of string
    | KW_MAX of string
    | KW_MONEY of string
    | KW_NCHAR of string
    | KW_NOEXPAND of string
    | KW_NOT of string
    | KW_NULL of string
    | KW_NUMERIC of string
    | KW_NVARCHAR of string
    | KW_OR of string
    | KW_OUT of string
    | KW_OUTPUT of string
    | KW_OWNER of string
    | KW_PROC of string
    | KW_PROCEDURE of string
    | KW_READONLY of string
    | KW_REAL of string
    | KW_RECOMPILE of string
    | KW_REPEATABLE of string
    | KW_REPLICATION of string
    | KW_RERCENT of string
    | KW_RETURN of string
    | KW_ROWGUID of string
    | KW_ROWS of string
    | KW_SELECT of string
    | KW_SELF of string
    | KW_SMALLINT of string
    | KW_SMALLMONEY of string
    | KW_SYSTEM of string
    | KW_TABLESAMPLE of string
    | KW_THEN of string
    | KW_TINYINT of string
    | KW_UNION of string
    | KW_VARCHAR of string
    | KW_VARYING of string
    | KW_WHERE of string
    | KW_WITH of string
    | LBRACKET of string
    | LOCALVAR of string
    | LPAREN of string
    | NOCOUNT of string
    | NOLOCK of string
    | OFF of string
    | ON of string
    | OP_AND_EQ of string
    | OP_DIV of string
    | OP_DIV_EQ of string
    | OP_EQ of string
    | OP_LT of string
    | OP_LT_EQ of string
    | OP_MINUS of string
    | OP_MINUS_EQ of string
    | OP_MOD of string
    | OP_MOD_EQ of string
    | OP_MT of string
    | OP_MT_EQ of string
    | OP_MUL of string
    | OP_MUL_EQ of string
    | OP_OR_EQ of string
    | OP_PLUS of string
    | OP_PLUS_EQ of string
    | OP_TILDA of string
    | OP_XOR_EQ of string
    | QUOTED_IDENTIFIER of string
    | RBRACKET of string
    | RPAREN of string
    | SEMI of string
    | SET of string
    | STAR of string
    | STRING_CONST of string
    | TEMPOBJ of string

let numToString = function
    | 0 -> "binop"
    | 1 -> "create_proc"
    | 2 -> "execute_as"
    | 3 -> "execute_stmnt"
    | 4 -> "from_stmnt"
    | 5 -> "full_ident"
    | 6 -> "ident"
    | 7 -> "proc_body_stmnt"
    | 8 -> "proc_formal_param"
    | 9 -> "query_expression"
    | 10 -> "query_specification"
    | 11 -> "root_rule"
    | 12 -> "search_condition"
    | 13 -> "search_condition_predicate"
    | 14 -> "select_stmnt"
    | 15 -> "set_stmnt"
    | 16 -> "sql_datatype"
    | 17 -> "sql_expr"
    | 18 -> "sql_expr_lrecu"
    | 19 -> "sql_value"
    | 20 -> "start2"
    | 21 -> "table_hint"
    | 22 -> "tablesample_clause"
    | 23 -> "yard_exp_brackets_11"
    | 24 -> "yard_exp_brackets_12"
    | 25 -> "yard_exp_brackets_13"
    | 26 -> "yard_exp_brackets_14"
    | 27 -> "yard_exp_brackets_15"
    | 28 -> "yard_exp_brackets_16"
    | 29 -> "yard_exp_brackets_17"
    | 30 -> "yard_exp_brackets_18"
    | 31 -> "yard_exp_brackets_19"
    | 32 -> "yard_exp_brackets_20"
    | 33 -> "yard_exp_brackets_21"
    | 34 -> "yard_exp_brackets_22"
    | 35 -> "yard_exp_brackets_23"
    | 36 -> "yard_exp_brackets_24"
    | 37 -> "yard_exp_brackets_25"
    | 38 -> "yard_exp_brackets_26"
    | 39 -> "yard_exp_brackets_27"
    | 40 -> "yard_exp_brackets_28"
    | 41 -> "yard_exp_brackets_29"
    | 42 -> "yard_exp_brackets_30"
    | 43 -> "yard_exp_brackets_31"
    | 44 -> "yard_exp_brackets_32"
    | 45 -> "yard_exp_brackets_33"
    | 46 -> "yard_exp_brackets_34"
    | 47 -> "yard_exp_brackets_35"
    | 48 -> "yard_exp_brackets_36"
    | 49 -> "yard_exp_brackets_37"
    | 50 -> "yard_exp_brackets_38"
    | 51 -> "yard_exp_brackets_39"
    | 52 -> "yard_exp_brackets_40"
    | 53 -> "yard_exp_brackets_41"
    | 54 -> "yard_exp_brackets_42"
    | 55 -> "yard_exp_brackets_43"
    | 56 -> "yard_exp_brackets_44"
    | 57 -> "yard_exp_brackets_45"
    | 58 -> "yard_exp_brackets_46"
    | 59 -> "yard_exp_brackets_47"
    | 60 -> "yard_exp_brackets_48"
    | 61 -> "yard_exp_brackets_49"
    | 62 -> "yard_exp_brackets_50"
    | 63 -> "yard_exp_brackets_51"
    | 64 -> "yard_exp_brackets_52"
    | 65 -> "yard_exp_brackets_53"
    | 66 -> "yard_exp_brackets_54"
    | 67 -> "yard_exp_brackets_55"
    | 68 -> "yard_exp_brackets_56"
    | 69 -> "yard_exp_brackets_57"
    | 70 -> "yard_exp_brackets_58"
    | 71 -> "yard_exp_brackets_59"
    | 72 -> "yard_exp_brackets_60"
    | 73 -> "yard_exp_brackets_61"
    | 74 -> "yard_exp_brackets_62"
    | 75 -> "yard_exp_brackets_63"
    | 76 -> "yard_exp_brackets_64"
    | 77 -> "yard_exp_brackets_65"
    | 78 -> "yard_exp_brackets_66"
    | 79 -> "yard_exp_brackets_67"
    | 80 -> "yard_exp_brackets_68"
    | 81 -> "yard_exp_brackets_69"
    | 82 -> "yard_exp_brackets_70"
    | 83 -> "yard_exp_brackets_71"
    | 84 -> "yard_exp_brackets_72"
    | 85 -> "yard_exp_brackets_73"
    | 86 -> "yard_exp_brackets_74"
    | 87 -> "yard_exp_brackets_75"
    | 88 -> "yard_exp_brackets_76"
    | 89 -> "yard_exp_brackets_77"
    | 90 -> "yard_exp_brackets_78"
    | 91 -> "yard_exp_brackets_79"
    | 92 -> "yard_exp_brackets_80"
    | 93 -> "yard_exp_brackets_81"
    | 94 -> "yard_exp_brackets_82"
    | 95 -> "yard_exp_brackets_83"
    | 96 -> "yard_exp_brackets_84"
    | 97 -> "yard_exp_brackets_85"
    | 98 -> "yard_exp_brackets_86"
    | 99 -> "yard_exp_brackets_87"
    | 100 -> "yard_exp_brackets_88"
    | 101 -> "yard_exp_brackets_89"
    | 102 -> "yard_exp_brackets_90"
    | 103 -> "yard_exp_brackets_91"
    | 104 -> "yard_exp_brackets_92"
    | 105 -> "yard_exp_brackets_93"
    | 106 -> "yard_exp_brackets_94"
    | 107 -> "yard_exp_brackets_95"
    | 108 -> "yard_exp_brackets_96"
    | 109 -> "yard_exp_brackets_97"
    | 110 -> "yard_exp_brackets_98"
    | 111 -> "yard_many_1"
    | 112 -> "yard_many_2"
    | 113 -> "yard_many_3"
    | 114 -> "yard_many_4"
    | 115 -> "yard_many_5"
    | 116 -> "yard_many_6"
    | 117 -> "yard_many_7"
    | 118 -> "yard_many_8"
    | 119 -> "yard_opt_1"
    | 120 -> "yard_opt_10"
    | 121 -> "yard_opt_11"
    | 122 -> "yard_opt_12"
    | 123 -> "yard_opt_13"
    | 124 -> "yard_opt_14"
    | 125 -> "yard_opt_15"
    | 126 -> "yard_opt_16"
    | 127 -> "yard_opt_17"
    | 128 -> "yard_opt_18"
    | 129 -> "yard_opt_19"
    | 130 -> "yard_opt_2"
    | 131 -> "yard_opt_20"
    | 132 -> "yard_opt_21"
    | 133 -> "yard_opt_22"
    | 134 -> "yard_opt_23"
    | 135 -> "yard_opt_24"
    | 136 -> "yard_opt_25"
    | 137 -> "yard_opt_26"
    | 138 -> "yard_opt_27"
    | 139 -> "yard_opt_28"
    | 140 -> "yard_opt_29"
    | 141 -> "yard_opt_3"
    | 142 -> "yard_opt_30"
    | 143 -> "yard_opt_31"
    | 144 -> "yard_opt_32"
    | 145 -> "yard_opt_33"
    | 146 -> "yard_opt_34"
    | 147 -> "yard_opt_35"
    | 148 -> "yard_opt_36"
    | 149 -> "yard_opt_37"
    | 150 -> "yard_opt_38"
    | 151 -> "yard_opt_39"
    | 152 -> "yard_opt_4"
    | 153 -> "yard_opt_40"
    | 154 -> "yard_opt_41"
    | 155 -> "yard_opt_42"
    | 156 -> "yard_opt_43"
    | 157 -> "yard_opt_44"
    | 158 -> "yard_opt_45"
    | 159 -> "yard_opt_46"
    | 160 -> "yard_opt_47"
    | 161 -> "yard_opt_48"
    | 162 -> "yard_opt_49"
    | 163 -> "yard_opt_5"
    | 164 -> "yard_opt_50"
    | 165 -> "yard_opt_51"
    | 166 -> "yard_opt_52"
    | 167 -> "yard_opt_53"
    | 168 -> "yard_opt_54"
    | 169 -> "yard_opt_55"
    | 170 -> "yard_opt_56"
    | 171 -> "yard_opt_57"
    | 172 -> "yard_opt_58"
    | 173 -> "yard_opt_59"
    | 174 -> "yard_opt_6"
    | 175 -> "yard_opt_60"
    | 176 -> "yard_opt_61"
    | 177 -> "yard_opt_62"
    | 178 -> "yard_opt_63"
    | 179 -> "yard_opt_7"
    | 180 -> "yard_opt_8"
    | 181 -> "yard_opt_9"
    | 182 -> "yard_rule_comma_list_1"
    | 183 -> "yard_rule_comma_list_3"
    | 184 -> "yard_rule_comma_list_6"
    | 185 -> "yard_rule_comma_list_8"
    | 186 -> "yard_rule_list_10"
    | 187 -> "yard_rule_list_2"
    | 188 -> "yard_rule_list_4"
    | 189 -> "yard_rule_list_5"
    | 190 -> "yard_rule_list_7"
    | 191 -> "yard_rule_list_9"
    | 192 -> "yard_some_1"
    | 193 -> "yard_some_2"
    | 194 -> "yard_some_3"
    | 195 -> "yard_start_rule"
    | 196 -> "ANSI_NULLS"
    | 197 -> "COMMA"
    | 198 -> "DEC_NUMBER"
    | 199 -> "DOLLAR"
    | 200 -> "DOT"
    | 201 -> "DOUBLE_COLON"
    | 202 -> "EOF"
    | 203 -> "GLOBALTEMPOBJ"
    | 204 -> "GLOBALVAR"
    | 205 -> "GO"
    | 206 -> "IDENT"
    | 207 -> "IMPLICIT_TRANSACTIONS"
    | 208 -> "KW_ALL"
    | 209 -> "KW_AND"
    | 210 -> "KW_AS"
    | 211 -> "KW_BEGIN"
    | 212 -> "KW_BIGINT"
    | 213 -> "KW_BIT"
    | 214 -> "KW_CALLER"
    | 215 -> "KW_CHAR"
    | 216 -> "KW_CREATE"
    | 217 -> "KW_DECIMAL"
    | 218 -> "KW_DECLARE"
    | 219 -> "KW_END"
    | 220 -> "KW_EXCEPT"
    | 221 -> "KW_EXEC"
    | 222 -> "KW_EXECUTE"
    | 223 -> "KW_FLOAT"
    | 224 -> "KW_FOR"
    | 225 -> "KW_FROM"
    | 226 -> "KW_IDENTITY"
    | 227 -> "KW_IF"
    | 228 -> "KW_INT"
    | 229 -> "KW_INTERSECT"
    | 230 -> "KW_INTO"
    | 231 -> "KW_IS"
    | 232 -> "KW_LIKE"
    | 233 -> "KW_MAX"
    | 234 -> "KW_MONEY"
    | 235 -> "KW_NCHAR"
    | 236 -> "KW_NOEXPAND"
    | 237 -> "KW_NOT"
    | 238 -> "KW_NULL"
    | 239 -> "KW_NUMERIC"
    | 240 -> "KW_NVARCHAR"
    | 241 -> "KW_OR"
    | 242 -> "KW_OUT"
    | 243 -> "KW_OUTPUT"
    | 244 -> "KW_OWNER"
    | 245 -> "KW_PROC"
    | 246 -> "KW_PROCEDURE"
    | 247 -> "KW_READONLY"
    | 248 -> "KW_REAL"
    | 249 -> "KW_RECOMPILE"
    | 250 -> "KW_REPEATABLE"
    | 251 -> "KW_REPLICATION"
    | 252 -> "KW_RERCENT"
    | 253 -> "KW_RETURN"
    | 254 -> "KW_ROWGUID"
    | 255 -> "KW_ROWS"
    | 256 -> "KW_SELECT"
    | 257 -> "KW_SELF"
    | 258 -> "KW_SMALLINT"
    | 259 -> "KW_SMALLMONEY"
    | 260 -> "KW_SYSTEM"
    | 261 -> "KW_TABLESAMPLE"
    | 262 -> "KW_THEN"
    | 263 -> "KW_TINYINT"
    | 264 -> "KW_UNION"
    | 265 -> "KW_VARCHAR"
    | 266 -> "KW_VARYING"
    | 267 -> "KW_WHERE"
    | 268 -> "KW_WITH"
    | 269 -> "LBRACKET"
    | 270 -> "LOCALVAR"
    | 271 -> "LPAREN"
    | 272 -> "NOCOUNT"
    | 273 -> "NOLOCK"
    | 274 -> "OFF"
    | 275 -> "ON"
    | 276 -> "OP_AND_EQ"
    | 277 -> "OP_DIV"
    | 278 -> "OP_DIV_EQ"
    | 279 -> "OP_EQ"
    | 280 -> "OP_LT"
    | 281 -> "OP_LT_EQ"
    | 282 -> "OP_MINUS"
    | 283 -> "OP_MINUS_EQ"
    | 284 -> "OP_MOD"
    | 285 -> "OP_MOD_EQ"
    | 286 -> "OP_MT"
    | 287 -> "OP_MT_EQ"
    | 288 -> "OP_MUL"
    | 289 -> "OP_MUL_EQ"
    | 290 -> "OP_OR_EQ"
    | 291 -> "OP_PLUS"
    | 292 -> "OP_PLUS_EQ"
    | 293 -> "OP_TILDA"
    | 294 -> "OP_XOR_EQ"
    | 295 -> "QUOTED_IDENTIFIER"
    | 296 -> "RBRACKET"
    | 297 -> "RPAREN"
    | 298 -> "SEMI"
    | 299 -> "SET"
    | 300 -> "STAR"
    | 301 -> "STRING_CONST"
    | 302 -> "TEMPOBJ"
    | _ -> ""
let tokenToNumber = function
    | ANSI_NULLS _ -> 196
    | COMMA _ -> 197
    | DEC_NUMBER _ -> 198
    | DOLLAR _ -> 199
    | DOT _ -> 200
    | DOUBLE_COLON _ -> 201
    | EOF _ -> 202
    | GLOBALTEMPOBJ _ -> 203
    | GLOBALVAR _ -> 204
    | GO _ -> 205
    | IDENT _ -> 206
    | IMPLICIT_TRANSACTIONS _ -> 207
    | KW_ALL _ -> 208
    | KW_AND _ -> 209
    | KW_AS _ -> 210
    | KW_BEGIN _ -> 211
    | KW_BIGINT _ -> 212
    | KW_BIT _ -> 213
    | KW_CALLER _ -> 214
    | KW_CHAR _ -> 215
    | KW_CREATE _ -> 216
    | KW_DECIMAL _ -> 217
    | KW_DECLARE _ -> 218
    | KW_END _ -> 219
    | KW_EXCEPT _ -> 220
    | KW_EXEC _ -> 221
    | KW_EXECUTE _ -> 222
    | KW_FLOAT _ -> 223
    | KW_FOR _ -> 224
    | KW_FROM _ -> 225
    | KW_IDENTITY _ -> 226
    | KW_IF _ -> 227
    | KW_INT _ -> 228
    | KW_INTERSECT _ -> 229
    | KW_INTO _ -> 230
    | KW_IS _ -> 231
    | KW_LIKE _ -> 232
    | KW_MAX _ -> 233
    | KW_MONEY _ -> 234
    | KW_NCHAR _ -> 235
    | KW_NOEXPAND _ -> 236
    | KW_NOT _ -> 237
    | KW_NULL _ -> 238
    | KW_NUMERIC _ -> 239
    | KW_NVARCHAR _ -> 240
    | KW_OR _ -> 241
    | KW_OUT _ -> 242
    | KW_OUTPUT _ -> 243
    | KW_OWNER _ -> 244
    | KW_PROC _ -> 245
    | KW_PROCEDURE _ -> 246
    | KW_READONLY _ -> 247
    | KW_REAL _ -> 248
    | KW_RECOMPILE _ -> 249
    | KW_REPEATABLE _ -> 250
    | KW_REPLICATION _ -> 251
    | KW_RERCENT _ -> 252
    | KW_RETURN _ -> 253
    | KW_ROWGUID _ -> 254
    | KW_ROWS _ -> 255
    | KW_SELECT _ -> 256
    | KW_SELF _ -> 257
    | KW_SMALLINT _ -> 258
    | KW_SMALLMONEY _ -> 259
    | KW_SYSTEM _ -> 260
    | KW_TABLESAMPLE _ -> 261
    | KW_THEN _ -> 262
    | KW_TINYINT _ -> 263
    | KW_UNION _ -> 264
    | KW_VARCHAR _ -> 265
    | KW_VARYING _ -> 266
    | KW_WHERE _ -> 267
    | KW_WITH _ -> 268
    | LBRACKET _ -> 269
    | LOCALVAR _ -> 270
    | LPAREN _ -> 271
    | NOCOUNT _ -> 272
    | NOLOCK _ -> 273
    | OFF _ -> 274
    | ON _ -> 275
    | OP_AND_EQ _ -> 276
    | OP_DIV _ -> 277
    | OP_DIV_EQ _ -> 278
    | OP_EQ _ -> 279
    | OP_LT _ -> 280
    | OP_LT_EQ _ -> 281
    | OP_MINUS _ -> 282
    | OP_MINUS_EQ _ -> 283
    | OP_MOD _ -> 284
    | OP_MOD_EQ _ -> 285
    | OP_MT _ -> 286
    | OP_MT_EQ _ -> 287
    | OP_MUL _ -> 288
    | OP_MUL_EQ _ -> 289
    | OP_OR_EQ _ -> 290
    | OP_PLUS _ -> 291
    | OP_PLUS_EQ _ -> 292
    | OP_TILDA _ -> 293
    | OP_XOR_EQ _ -> 294
    | QUOTED_IDENTIFIER _ -> 295
    | RBRACKET _ -> 296
    | RPAREN _ -> 297
    | SEMI _ -> 298
    | SET _ -> 299
    | STAR _ -> 300
    | STRING_CONST _ -> 301
    | TEMPOBJ _ -> 302

let mutable private cur = 0
let leftSide = [|110; 109; 108; 108; 108; 107; 106; 105; 105; 104; 104; 103; 103; 103; 102; 102; 102; 101; 101; 100; 100; 99; 99; 98; 97; 97; 96; 95; 94; 94; 93; 93; 92; 92; 92; 92; 91; 91; 90; 90; 89; 89; 88; 88; 87; 87; 87; 86; 86; 86; 85; 84; 83; 83; 83; 82; 81; 81; 81; 80; 80; 80; 80; 79; 79; 78; 77; 76; 75; 74; 73; 72; 72; 71; 71; 70; 70; 69; 69; 68; 68; 67; 66; 65; 64; 64; 63; 63; 62; 61; 61; 60; 59; 58; 57; 56; 55; 54; 53; 53; 52; 52; 52; 52; 52; 52; 51; 51; 50; 49; 48; 47; 46; 45; 44; 43; 42; 41; 40; 40; 40; 40; 39; 38; 38; 37; 37; 36; 35; 34; 34; 33; 32; 31; 30; 29; 28; 28; 27; 26; 26; 25; 24; 23; 5; 118; 118; 186; 6; 6; 19; 19; 178; 178; 17; 17; 17; 17; 17; 17; 17; 17; 17; 18; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 177; 177; 176; 176; 175; 175; 173; 173; 172; 172; 16; 16; 16; 16; 16; 16; 16; 16; 16; 16; 16; 16; 16; 16; 16; 171; 171; 15; 15; 15; 15; 15; 170; 170; 169; 169; 168; 168; 167; 167; 3; 166; 166; 21; 165; 165; 164; 164; 162; 162; 22; 4; 185; 117; 117; 160; 160; 161; 161; 159; 159; 194; 194; 158; 158; 156; 156; 157; 157; 154; 154; 155; 155; 153; 153; 193; 193; 151; 151; 149; 149; 150; 150; 191; 148; 148; 147; 147; 13; 13; 13; 146; 146; 145; 145; 12; 184; 116; 116; 144; 144; 143; 143; 190; 142; 142; 140; 140; 10; 115; 115; 138; 138; 139; 139; 136; 136; 137; 137; 135; 135; 133; 133; 134; 134; 131; 131; 132; 132; 129; 129; 189; 183; 114; 114; 188; 127; 127; 128; 128; 9; 126; 126; 14; 113; 113; 125; 125; 7; 7; 7; 7; 7; 7; 7; 124; 124; 123; 123; 112; 112; 122; 122; 121; 121; 120; 120; 181; 181; 192; 192; 180; 180; 179; 179; 174; 174; 1; 182; 111; 111; 187; 163; 163; 152; 152; 141; 141; 130; 130; 119; 119; 8; 20; 20; 20; 20; 11; 11; 11; 195|]
let private rules = [|199; 254; 199; 226; 110; 109; 206; 199; 254; 199; 226; 271; 12; 297; 13; 241; 209; 17; 138; 206; 136; 135; 108; 107; 106; 206; 233; 198; 233; 198; 201; 200; 5; 168; 206; 160; 5; 156; 158; 159; 280; 286; 104; 144; 105; 271; 12; 297; 13; 241; 209; 206; 279; 17; 103; 5; 200; 300; 300; 206; 271; 137; 297; 206; 201; 200; 206; 271; 132; 297; 206; 201; 200; 17; 133; 206; 131; 129; 102; 229; 220; 264; 128; 271; 9; 297; 211; 113; 219; 301; 198; 238; 200; 6; 293; 283; 292; 301; 244; 257; 214; 222; 221; 271; 101; 297; 271; 198; 297; 271; 100; 297; 271; 198; 297; 271; 198; 297; 200; 206; 206; 99; 206; 17; 274; 275; 274; 275; 274; 275; 274; 275; 268; 249; 298; 198; 270; 279; 270; 98; 222; 221; 250; 271; 198; 297; 255; 252; 197; 97; 161; 206; 268; 271; 194; 297; 157; 206; 155; 206; 268; 271; 193; 297; 150; 206; 206; 154; 5; 149; 151; 153; 287; 281; 96; 286; 280; 279; 271; 12; 297; 145; 13; 197; 95; 93; 143; 94; 267; 12; 197; 92; 139; 206; 90; 91; 5; 200; 134; 206; 88; 89; 5; 200; 206; 279; 17; 87; 5; 200; 300; 300; 197; 17; 271; 9; 297; 86; 10; 85; 10; 230; 5; 279; 17; 17; 84; 7; 122; 224; 251; 268; 192; 298; 198; 6; 200; 245; 246; 197; 8; 243; 242; 279; 83; 5; 200; 270; 119; 16; 186; 82; 118; 6; 118; 206; 269; 6; 296; 198; 301; 183; 5; 204; 81; 17; 256; 17; 225; 206; 5; 271; 178; 297; 270; 271; 17; 297; 19; 18; 17; 0; 17; 287; 281; 286; 280; 293; 284; 277; 288; 282; 291; 279; 290; 294; 276; 285; 278; 289; 283; 292; 79; 210; 80; 78; 77; 76; 75; 74; 240; 177; 235; 176; 265; 175; 215; 173; 248; 223; 172; 234; 263; 228; 259; 217; 258; 213; 239; 212; 73; 299; 270; 171; 279; 72; 299; 295; 71; 299; 196; 70; 299; 272; 69; 299; 207; 68; 298; 67; 66; 65; 63; 167; 64; 169; 170; 236; 166; 273; 62; 61; 260; 261; 162; 271; 198; 164; 297; 165; 225; 185; 191; 60; 117; 59; 210; 58; 21; 194; 21; 22; 57; 210; 56; 210; 55; 21; 193; 21; 22; 54; 210; 53; 117; 237; 237; 17; 231; 148; 238; 17; 147; 232; 17; 17; 52; 17; 184; 237; 51; 146; 190; 50; 116; 237; 237; 49; 116; 48; 4; 256; 189; 140; 142; 47; 115; 46; 210; 45; 183; 44; 43; 210; 42; 183; 41; 40; 115; 188; 39; 114; 17; 114; 38; 208; 37; 127; 36; 9; 126; 17; 113; 35; 227; 17; 262; 34; 253; 17; 218; 270; 210; 16; 125; 17; 3; 15; 14; 298; 219; 33; 112; 298; 211; 32; 31; 2; 192; 2; 182; 30; 29; 216; 28; 174; 6; 179; 180; 181; 120; 210; 121; 112; 123; 124; 187; 27; 111; 8; 111; 247; 26; 25; 266; 24; 23; 130; 141; 152; 163; 302; 203; 204; 256; 6; 225; 6; 20; 205; 1; 11|]
let private rulesStart = [|0; 2; 4; 5; 6; 7; 9; 11; 14; 15; 16; 17; 19; 21; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 34; 36; 40; 42; 45; 48; 49; 50; 51; 54; 55; 58; 59; 63; 64; 65; 66; 70; 71; 72; 73; 75; 77; 79; 80; 81; 83; 86; 89; 90; 91; 92; 94; 95; 96; 97; 98; 99; 100; 101; 102; 103; 106; 109; 112; 115; 118; 120; 123; 124; 125; 126; 127; 128; 129; 130; 131; 132; 134; 136; 138; 139; 140; 141; 142; 146; 147; 148; 150; 152; 156; 158; 160; 164; 166; 168; 172; 173; 174; 175; 176; 177; 178; 181; 183; 185; 188; 190; 192; 194; 196; 198; 200; 202; 204; 207; 208; 211; 212; 214; 217; 219; 220; 221; 223; 225; 226; 227; 229; 231; 233; 235; 237; 238; 239; 241; 242; 243; 245; 247; 250; 251; 253; 253; 255; 256; 259; 260; 261; 262; 262; 263; 264; 266; 270; 274; 275; 278; 279; 280; 283; 284; 285; 286; 287; 288; 289; 290; 291; 292; 293; 294; 295; 296; 297; 298; 299; 300; 301; 302; 305; 306; 306; 307; 307; 308; 308; 309; 309; 310; 310; 312; 314; 316; 318; 319; 321; 322; 323; 324; 325; 326; 327; 328; 329; 330; 331; 331; 336; 339; 342; 345; 348; 349; 349; 350; 350; 351; 351; 352; 352; 357; 358; 358; 360; 361; 361; 362; 362; 363; 363; 370; 372; 373; 375; 375; 376; 376; 377; 377; 378; 378; 380; 381; 382; 382; 383; 383; 384; 384; 385; 385; 386; 386; 387; 387; 389; 390; 391; 391; 392; 392; 393; 393; 395; 396; 396; 397; 397; 401; 405; 408; 409; 409; 410; 410; 412; 413; 415; 415; 416; 416; 417; 417; 419; 420; 420; 421; 421; 425; 427; 427; 428; 428; 429; 429; 430; 430; 431; 431; 432; 432; 433; 433; 434; 434; 435; 435; 436; 436; 437; 437; 439; 440; 442; 442; 444; 445; 445; 446; 446; 448; 449; 449; 451; 453; 453; 454; 454; 458; 460; 465; 466; 467; 468; 469; 470; 470; 471; 471; 473; 473; 474; 474; 475; 475; 476; 476; 477; 477; 479; 480; 481; 481; 482; 482; 483; 483; 496; 497; 499; 499; 501; 502; 502; 503; 503; 504; 504; 505; 505; 506; 506; 511; 512; 513; 514; 518; 519; 520; 521; 522|]
let startRule = 384

let acceptEmptyInput = false

let defaultAstToDot =
    (fun (tree : Yard.Generators.RNGLR.AST.Tree<Token>) -> tree.AstToDot numToString tokenToNumber leftSide)

let private lists_gotos = [|1; 2; 3; 4; 5; 6; 7; 503; 507; 8; 501; 502; 9; 11; 12; 45; 46; 10; 13; 14; 15; 499; 16; 21; 99; 497; 498; 37; 17; 98; 19; 18; 20; 22; 36; 23; 24; 31; 25; 26; 29; 30; 27; 28; 32; 33; 34; 35; 38; 40; 50; 51; 97; 39; 41; 49; 43; 42; 44; 47; 48; 52; 53; 54; 55; 61; 62; 68; 69; 70; 76; 77; 85; 86; 87; 88; 89; 56; 57; 58; 59; 60; 63; 64; 65; 66; 67; 71; 72; 73; 74; 75; 78; 79; 80; 81; 83; 84; 82; 90; 91; 92; 93; 95; 96; 94; 100; 101; 484; 102; 103; 482; 104; 105; 481; 106; 107; 158; 161; 166; 167; 168; 169; 133; 134; 170; 171; 397; 135; 393; 476; 137; 138; 417; 425; 426; 427; 441; 443; 143; 445; 147; 148; 149; 446; 150; 108; 111; 109; 156; 157; 139; 144; 110; 112; 151; 155; 153; 114; 115; 116; 117; 118; 119; 120; 121; 122; 123; 124; 125; 126; 127; 128; 129; 130; 131; 132; 113; 136; 140; 141; 142; 145; 146; 152; 154; 159; 160; 162; 163; 164; 165; 416; 172; 173; 384; 385; 386; 387; 390; 174; 175; 176; 179; 185; 225; 226; 227; 235; 369; 383; 177; 178; 180; 181; 182; 184; 183; 186; 224; 188; 187; 189; 192; 198; 199; 200; 201; 209; 223; 190; 191; 193; 194; 195; 197; 196; 202; 203; 204; 205; 208; 206; 207; 210; 211; 218; 219; 220; 221; 212; 213; 214; 215; 217; 216; 222; 228; 229; 230; 231; 234; 232; 233; 236; 237; 297; 238; 239; 240; 241; 242; 281; 283; 296; 243; 274; 288; 289; 290; 294; 295; 244; 273; 246; 245; 247; 248; 292; 293; 249; 291; 250; 251; 269; 270; 252; 254; 255; 258; 262; 263; 264; 266; 267; 268; 253; 256; 257; 259; 261; 260; 265; 271; 284; 272; 275; 287; 276; 277; 278; 279; 280; 282; 285; 286; 298; 333; 361; 362; 363; 299; 300; 330; 332; 301; 302; 314; 303; 304; 305; 306; 307; 308; 312; 311; 310; 309; 313; 315; 329; 316; 317; 318; 319; 327; 328; 320; 321; 322; 323; 324; 325; 326; 331; 334; 360; 336; 335; 337; 353; 354; 338; 339; 350; 352; 340; 341; 342; 343; 344; 345; 346; 348; 347; 349; 351; 355; 356; 357; 359; 358; 364; 365; 366; 368; 367; 370; 371; 378; 379; 380; 381; 372; 373; 374; 375; 377; 376; 382; 388; 389; 391; 394; 392; 395; 396; 398; 399; 414; 400; 405; 412; 413; 401; 402; 403; 404; 406; 407; 410; 408; 409; 411; 415; 418; 419; 420; 421; 422; 423; 424; 428; 429; 430; 431; 432; 433; 434; 439; 435; 436; 437; 438; 440; 442; 444; 447; 451; 455; 468; 472; 448; 449; 450; 452; 453; 454; 456; 457; 466; 458; 459; 460; 461; 462; 464; 465; 463; 467; 469; 470; 471; 473; 474; 475; 477; 480; 478; 479; 483; 485; 486; 496; 494; 495; 493; 487; 488; 489; 490; 491; 492; 500; 504; 505; 506|]
let private small_gotos =
        [|9; 65536; 720897; 1310722; 13303811; 13369348; 13434885; 14155782; 16777223; 19791880; 458755; 1835017; 16056330; 16121867; 524293; 393228; 1900557; 11403278; 13500431; 17629200; 589825; 13107217; 786435; 393234; 13500431; 17629200; 851971; 1966099; 11730964; 19529749; 983046; 524310; 1507351; 11796504; 11927577; 12255258; 17694747; 1048579; 1769500; 7274525; 12910622; 1114115; 1769500; 7274527; 12910622; 1245187; 524320; 1507351; 17694747; 1376258; 8519713; 17432610; 1441795; 1638435; 9240612; 18284581; 1572868; 1703974; 9961511; 15859752; 15925289; 1703938; 10682410; 16187435; 2031620; 5439532; 12976173; 15597614; 19726383; 2424839; 327728; 393265; 1572914; 7798835; 12189748; 13500431; 17629200; 2490369; 13107253; 2621443; 5374006; 7733303; 13107256; 2686979; 5374006; 7733305; 13107256; 2818051; 393274; 13500431; 17629200; 3014659; 393275; 13500431; 17629200; 3080193; 19398716; 3342352; 1048637; 13893694; 13959231; 14090304; 14221377; 14614594; 14942275; 15335492; 15401029; 15663174; 15728711; 16253000; 16908361; 16973898; 17236043; 17367116; 3604483; 4915277; 11337806; 17760335; 3801089; 12976208; 3866625; 19464273; 4063235; 4849746; 11272275; 17760340; 4259841; 12976213; 4325377; 19464278; 4587523; 5046359; 11534424; 17760345; 4784129; 12976218; 4849665; 19464283; 5046275; 5111900; 11599965; 17760350; 5242883; 6619231; 12976224; 15269985; 5308417; 19464290; 5832707; 4980835; 11468900; 17760357; 6029315; 6553702; 12976231; 15269992; 6094849; 19464297; 6488067; 2031722; 11862123; 17563756; 6619139; 2097261; 7864430; 14680175; 6750209; 13762672; 6815746; 7929969; 13828210; 6881315; 196723; 327796; 393265; 458869; 589942; 655479; 917624; 983161; 1114234; 1179771; 1245308; 2162813; 2424958; 4128895; 5308544; 5570689; 7340162; 12189748; 12976259; 13369476; 13500431; 14286981; 14483590; 14549127; 14876808; 16580745; 16777354; 17629200; 17694859; 17760396; 18546829; 19136654; 19202191; 19595408; 19726481; 7012353; 17760402; 7077909; 327796; 393265; 1114259; 1179771; 1245308; 5308544; 11665556; 11993237; 12189748; 12320918; 12976259; 13369476; 13500431; 16777367; 17629200; 17694859; 17760408; 18546829; 19136654; 19202191; 19726481; 7143425; 19464345; 7274519; 154; 2556059; 7471260; 12910749; 18088094; 18153631; 18219168; 18284705; 18350242; 18415779; 18481316; 18546853; 18612390; 18677927; 18743464; 18809001; 18874538; 18940075; 19005612; 19071149; 19136686; 19202223; 19267760; 7340050; 327796; 393265; 1114289; 1179771; 1245308; 5308544; 12189748; 12976259; 13369476; 13500431; 16777367; 17629200; 17694859; 17760408; 18546829; 19136654; 19202191; 19726481; 7405588; 154; 18088094; 18153631; 18219168; 18284705; 18350242; 18415779; 18481316; 18546853; 18612390; 18677927; 18743464; 18809001; 18874538; 18940075; 19005612; 19071149; 19136686; 19202223; 19267760; 8847378; 327796; 393265; 1114290; 1179771; 1245308; 5308544; 12189748; 12976259; 13369476; 13500431; 16777367; 17629200; 17694859; 17760408; 18546829; 19136654; 19202191; 19726481; 8912916; 154; 18088094; 18153631; 18219168; 18284705; 18350242; 18415779; 18481316; 18546853; 18612390; 18677927; 18743464; 18809001; 18874538; 18940075; 19005612; 19071149; 19136686; 19202223; 19267760; 9109522; 327796; 393265; 1114291; 1179771; 1245308; 5308544; 12189748; 12976259; 13369476; 13500431; 16777367; 17629200; 17694859; 17760408; 18546829; 19136654; 19202191; 19726481; 9175061; 154; 14745780; 18088094; 18153631; 18219168; 18284705; 18350242; 18415779; 18481316; 18546853; 18612390; 18677927; 18743464; 18809001; 18874538; 18940075; 19005612; 19071149; 19136686; 19202223; 19267760; 9240577; 13500597; 9437202; 327796; 393265; 1114294; 1179771; 1245308; 5308544; 12189748; 12976259; 13369476; 13500431; 16777367; 17629200; 17694859; 17760408; 18546829; 19136654; 19202191; 19726481; 9502741; 154; 18088094; 18153631; 18219168; 18284705; 18350242; 18415779; 18481316; 18546853; 18612390; 18677927; 18743464; 18809001; 18874538; 18940075; 19005612; 19071149; 19136686; 19202223; 19267760; 19464375; 9895939; 2556059; 7471288; 12910749; 10027026; 327796; 393265; 1114297; 1179771; 1245308; 5308544; 12189748; 12976259; 13369476; 13500431; 16777367; 17629200; 17694859; 17760408; 18546829; 19136654; 19202191; 19726481; 10092564; 154; 18088094; 18153631; 18219168; 18284705; 18350242; 18415779; 18481316; 18546853; 18612390; 18677927; 18743464; 18809001; 18874538; 18940075; 19005612; 19071149; 19136686; 19202223; 19267760; 10354690; 7995578; 19529915; 10551299; 2359484; 8257725; 15073470; 10747909; 327871; 393265; 12189748; 13500431; 17629200; 11075604; 154; 18088094; 18153631; 18219168; 18284705; 18350242; 18415779; 18481316; 18546853; 18612390; 18677927; 18743464; 18809001; 18874538; 18940075; 19005612; 19071149; 19136686; 19202223; 19267760; 11141155; 196723; 327796; 393265; 458869; 589942; 655479; 917624; 983161; 1114234; 1179771; 1245308; 2162813; 2424958; 4128895; 5308544; 5570689; 7340224; 12189748; 12976259; 13369476; 13500431; 14286981; 14483590; 14549127; 14876808; 16580745; 16777354; 17629200; 17694859; 17760396; 18546829; 19136654; 19202191; 19595408; 19726481; 11206663; 2490561; 5636290; 8323267; 14418116; 15007941; 17301702; 17760455; 11337730; 655560; 16777417; 11468824; 327882; 393265; 1114315; 1179771; 1245308; 2621644; 2687181; 5308544; 5701838; 8454351; 12189748; 12386512; 12976259; 13369476; 13500625; 16777367; 17629200; 17694859; 17760408; 18546829; 19136654; 19202191; 19661010; 19726481; 11534338; 13107411; 17760402; 11599873; 19661012; 11730968; 154; 2818261; 8716502; 8782039; 13762776; 18088094; 18153631; 18219168; 18284705; 18350242; 18415779; 18481316; 18546853; 18612390; 18677927; 18743464; 18809001; 18874538; 18940075; 19005612; 19071149; 19136686; 19202223; 19267760; 11927553; 13500633; 12124163; 3080410; 7536859; 12910812; 12189699; 3080410; 7536861; 12910812; 12320791; 327902; 393265; 1114335; 1179771; 1245308; 2883808; 5308544; 6029537; 6750434; 8847587; 12189748; 12976259; 13369476; 13500644; 16777367; 17629200; 17694859; 17760408; 18546829; 19136654; 19202191; 19661029; 19726481; 12386306; 13107430; 17760402; 12451841; 19661031; 12582936; 154; 3014888; 9044201; 9109738; 13762795; 18088094; 18153631; 18219168; 18284705; 18350242; 18415779; 18481316; 18546853; 18612390; 18677927; 18743464; 18809001; 18874538; 18940075; 19005612; 19071149; 19136686; 19202223; 19267760; 12779521; 13500652; 13172741; 7078125; 7143662; 7209199; 13041904; 13500657; 13434882; 14811378; 16646387; 13697030; 2949364; 5898485; 8913142; 13107447; 13172984; 18284793; 13828098; 5964026; 13500667; 13959169; 17760508; 14024725; 327796; 393265; 1114259; 1179771; 1245308; 5308544; 8978685; 11993342; 12189748; 12320918; 12976259; 13369476; 13500431; 16777367; 17629200; 17694859; 17760408; 18546829; 19136654; 19202191; 19726481; 14090241; 19464447; 14483474; 327796; 393265; 1114368; 1179771; 1245308; 5308544; 12189748; 12976259; 13369476; 13500431; 16777367; 17629200; 17694859; 17760408; 18546829; 19136654; 19202191; 19726481; 14549012; 154; 18088094; 18153631; 18219168; 18284705; 18350242; 18415779; 18481316; 18546853; 18612390; 18677927; 18743464; 18809001; 18874538; 18940075; 19005612; 19071149; 19136686; 19202223; 19267760; 14876677; 6684929; 6947074; 7012611; 13041924; 13500677; 15138818; 14811398; 16646407; 15400963; 262408; 9175305; 14745866; 15532035; 3145995; 9306380; 17498381; 15728645; 786702; 3342607; 9502992; 15532305; 17760530; 15859719; 3211539; 6095124; 9568533; 12058902; 12452119; 13697304; 15794457; 15925251; 3277082; 7602459; 12910876; 15990787; 3277082; 7602461; 12910876; 16121860; 6226206; 6816031; 13697312; 15794465; 16252930; 9437474; 15532323; 16318484; 327796; 393265; 852260; 1114405; 1179771; 1245308; 5308544; 6881574; 12189748; 12976259; 13369476; 13500431; 16777367; 17629200; 17694859; 17760551; 18546829; 19136654; 19202191; 19726481; 16449561; 154; 3408168; 6291753; 9634090; 15139115; 15532332; 18088094; 18153631; 18219168; 18284845; 18350382; 18415919; 18481316; 18546853; 18612390; 18677927; 18743600; 18809137; 18874538; 18940075; 19005612; 19071149; 19136686; 19202223; 19267760; 16515090; 327796; 393265; 1114418; 1179771; 1245308; 5308544; 12189748; 12976259; 13369476; 13500431; 16777367; 17629200; 17694859; 17760408; 18546829; 19136654; 19202191; 19726481; 16580628; 154; 18088094; 18153631; 18219168; 18284705; 18350242; 18415779; 18481316; 18546853; 18612390; 18677927; 18743464; 18809001; 18874538; 18940075; 19005612; 19071149; 19136686; 19202223; 19267760; 16711681; 15204659; 16777234; 327796; 393265; 1114420; 1179771; 1245308; 5308544; 12189748; 12976259; 13369476; 13500431; 16777367; 17629200; 17694859; 17760408; 18546829; 19136654; 19202191; 19726481; 16842772; 154; 18088094; 18153631; 18219168; 18284705; 18350242; 18415779; 18481316; 18546853; 18612390; 18677927; 18743464; 18809001; 18874538; 18940075; 19005612; 19071149; 19136686; 19202223; 19267760; 16908290; 9699637; 15532342; 16973825; 15597879; 17301505; 18743608; 17694742; 327796; 393265; 786745; 1114294; 1179771; 1245308; 3342607; 5308544; 9502992; 12189748; 12976259; 13369476; 13500431; 15532305; 16777367; 17629200; 17694859; 17760570; 18546829; 19136654; 19202191; 19726481; 17760257; 19464507; 17956866; 9371964; 15532349; 18022420; 327796; 393265; 852286; 1114405; 1179771; 1245308; 5308544; 6160703; 12189748; 12976259; 13369476; 13500431; 16777367; 17629200; 17694859; 17760576; 18546829; 19136654; 19202191; 19726481; 18219030; 327796; 393265; 786753; 1114294; 1179771; 1245308; 3342607; 5308544; 9502992; 12189748; 12976259; 13369476; 13500431; 15532305; 16777367; 17629200; 17694859; 17760570; 18546829; 19136654; 19202191; 19726481; 18284545; 19464514; 18415635; 327796; 393265; 852291; 1114405; 1179771; 1245308; 5308544; 12189748; 12976259; 13369476; 13500431; 16777367; 17629200; 17694859; 17760408; 18546829; 19136654; 19202191; 19726481; 18612246; 327796; 393265; 786756; 1114294; 1179771; 1245308; 3342607; 5308544; 9502992; 12189748; 12976259; 13369476; 13500431; 15532305; 16777367; 17629200; 17694859; 17760570; 18546829; 19136654; 19202191; 19726481; 18677761; 19464517; 19398661; 786756; 3342607; 9502992; 15532305; 17760530; 19464200; 328006; 393265; 3473735; 12124488; 12189748; 12517705; 13500746; 17629200; 19529732; 3539275; 9765196; 9830733; 13762894; 19660803; 1442127; 9896272; 17105233; 19791875; 3604818; 10027347; 17563988; 19988481; 17760597; 20054020; 1376598; 10879319; 12648792; 15466841; 20119556; 1376598; 10879319; 12648794; 15466841; 20185089; 17891675; 20447233; 19464540; 20578306; 10617181; 17039710; 20643841; 17760607; 20709377; 12976480; 20774916; 3998049; 10748258; 16515427; 16712036; 20905985; 19464549; 20971523; 4063590; 10813799; 16384360; 21168129; 17760617; 21233665; 12976490; 21299201; 19464555; 21626881; 13500780; 21823491; 3932525; 7668078; 12910959; 21889027; 3932525; 7668080; 12910959; 22020102; 328049; 393265; 6357362; 12189748; 13500787; 17629200; 22085636; 3735924
                                        ; 10223989; 10289526; 13762935; 22216707; 1442168; 10355065; 17105233; 22347779; 3801466; 10420603; 17564028; 22544385; 17760637; 22609924; 1376638; 10879319; 12714367; 15466841; 22675460; 1376638; 10879319; 12714368; 15466841; 22806529; 19464577; 22937601; 13500802; 23199748; 3867011; 10486148; 10551685; 13762950; 23396353; 13500807; 23789572; 3670408; 10092937; 10158474; 13762955; 23986177; 13500812; 24182790; 2752909; 5767566; 8585615; 13107600; 13173137; 18284946; 24313858; 5833107; 13500820; 24444929; 17760661; 24510485; 327796; 393265; 1114259; 1179771; 1245308; 5308544; 8651158; 11993495; 12189748; 12320918; 12976259; 13369476; 13500431; 16777367; 17629200; 17694859; 17760408; 18546829; 19136654; 19202191; 19726481; 24576001; 19464600; 24969234; 327796; 393265; 1114521; 1179771; 1245308; 5308544; 12189748; 12976259; 13369476; 13500431; 16777367; 17629200; 17694859; 17760408; 18546829; 19136654; 19202191; 19726481; 25034772; 154; 18088094; 18153631; 18219168; 18284705; 18350242; 18415779; 18481316; 18546853; 18612390; 18677927; 18743464; 18809001; 18874538; 18940075; 19005612; 19071149; 19136686; 19202223; 19267760; 25362434; 8389018; 13631899; 25559046; 590236; 655479; 2424958; 5570689; 16777417; 17760669; 25624577; 19464606; 25821190; 590239; 655479; 2424958; 5570689; 16777417; 17760669; 25886721; 19464608; 26017795; 4260257; 10944930; 17695139; 26148872; 328100; 393265; 4194725; 6422950; 12189748; 13500431; 17629200; 17695143; 26214403; 4325800; 11010473; 19530154; 26411009; 12976555; 26542083; 4391340; 11076013; 17564078; 26673154; 11141551; 19530160; 26869761; 16318897; 27131905; 18284978; 27328513; 17695155; 27394049; 13762996; 27459600; 1049013; 13893694; 13959231; 14090304; 14221377; 14614594; 14942275; 15335492; 15401029; 15663174; 15728711; 16253000; 16908361; 16973898; 17236043; 17367116; 27525123; 2294198; 8192439; 18284984; 27721746; 327796; 393265; 1114553; 1179771; 1245308; 5308544; 12189748; 12976259; 13369476; 13500431; 16777367; 17629200; 17694859; 17760408; 18546829; 19136654; 19202191; 19726481; 27787284; 154; 18088094; 18153631; 18219168; 18284705; 18350242; 18415779; 18481316; 18546853; 18612390; 18677927; 18743464; 18809001; 18874538; 18940075; 19005612; 19071149; 19136686; 19202223; 19267760; 27983890; 327796; 393265; 1114554; 1179771; 1245308; 5308544; 12189748; 12976259; 13369476; 13500431; 16777367; 17629200; 17694859; 17760408; 18546829; 19136654; 19202191; 19726481; 28049429; 154; 17170875; 18088094; 18153631; 18219168; 18284705; 18350242; 18415779; 18481316; 18546853; 18612390; 18677927; 18743464; 18809001; 18874538; 18940075; 19005612; 19071149; 19136686; 19202223; 19267760; 28114965; 327796; 393265; 1114556; 1179771; 1245308; 2228669; 5308544; 5505470; 12189748; 12976259; 13369476; 13500431; 13828543; 16777367; 17629200; 17694859; 17760408; 18546829; 19136654; 19202191; 19726481; 28180500; 154; 18088094; 18153631; 18219168; 18284705; 18350242; 18415779; 18481316; 18546853; 18612390; 18677927; 18743464; 18809001; 18874538; 18940075; 19005612; 19071149; 19136686; 19202223; 19267760; 28377107; 327796; 393265; 1114560; 1179771; 1245308; 5308544; 7406017; 12189748; 12976259; 13369476; 13500431; 16777367; 17629200; 17694859; 17760408; 18546829; 19136654; 19202191; 19726481; 28442660; 154; 327796; 393265; 1114560; 1179771; 1245308; 5308544; 7406018; 12189748; 12976259; 13369476; 13500431; 16777367; 17629200; 17694859; 17760408; 18088094; 18153631; 18219168; 18284705; 18350242; 18415779; 18481316; 18547139; 18612390; 18677927; 18743464; 18809001; 18874538; 18940075; 19005612; 19071149; 19136964; 19202501; 19267760; 19726481; 28770305; 14352838; 28901394; 327796; 393265; 1114567; 1179771; 1245308; 5308544; 12189748; 12976259; 13369476; 13500431; 16777367; 17629200; 17694859; 17760408; 18546829; 19136654; 19202191; 19726481; 28966932; 154; 18088094; 18153631; 18219168; 18284705; 18350242; 18415779; 18481316; 18546853; 18612390; 18677927; 18743464; 18809001; 18874538; 18940075; 19005612; 19071149; 19136686; 19202223; 19267760; 29032472; 327882; 393265; 1114568; 1179771; 1245308; 2621644; 2687181; 5308544; 5701838; 8454351; 12189748; 12386512; 12976259; 13369476; 13500625; 16777367; 17629200; 17694859; 17760408; 18546829; 19136654; 19202191; 19661010; 19726481; 29098009; 154; 2818261; 8716502; 8782039; 13762776; 14745780; 18088094; 18153631; 18219168; 18284705; 18350242; 18415779; 18481316; 18546853; 18612390; 18677927; 18743464; 18809001; 18874538; 18940075; 19005612; 19071149; 19136686; 19202223; 19267760; 29163542; 327796; 393265; 590239; 655479; 1114294; 1179771; 1245308; 2424958; 5308544; 5570689; 12189748; 12976259; 13369476; 13500431; 16777354; 17629200; 17694859; 17760396; 18546829; 19136654; 19202191; 19726481; 29229061; 12845513; 13566410; 17695179; 17826252; 19333581; 29294595; 4587982; 17957327; 18022864; 29556739; 4456913; 17957330; 18022867; 29818883; 4784596; 11207125; 13107670; 29949953; 18285015; 30015507; 327796; 393265; 1114584; 1179771; 1245308; 4719065; 5308544; 12189748; 12976259; 13369476; 13500890; 16777367; 17629200; 17694859; 17760408; 18546829; 19136654; 19202191; 19726481; 30081044; 154; 18088094; 18153631; 18219168; 18284705; 18350242; 18415779; 18481316; 18546853; 18612390; 18677927; 18743464; 18809001; 18874538; 18940075; 19005612; 19071149; 19136686; 19202223; 19267760; 30212099; 6488539; 13107676; 13173213; 30277633; 13500894; 30539777; 13500895; 30670851; 4522464; 17957345; 18022882; 30932995; 4653539; 17957348; 18022885; 31195138; 8061414; 14352871; 31260674; 8126952; 19530217; 31588353; 16450026; 31719429; 131563; 5177836; 12583405; 14483950; 14549487; 31784965; 131563; 5177836; 12583408; 14483950; 14549487; 31850497; 13763057; 31916037; 5243378; 14025203; 15991284; 16843253; 19726838; 32702465; 12976631; 32964611; 393720; 13500431; 17629200; 33030145; 14746105; 33095683; 393722; 13500431; 17629200|]
let gotos = Array.zeroCreate 508
for i = 0 to 507 do
        gotos.[i] <- Array.zeroCreate 303
cur <- 0
while cur < small_gotos.Length do
    let i = small_gotos.[cur] >>> 16
    let length = small_gotos.[cur] &&& 65535
    cur <- cur + 1
    for k = 0 to length-1 do
        let j = small_gotos.[cur + k] >>> 16
        let x = small_gotos.[cur + k] &&& 65535
        gotos.[i].[j] <- lists_gotos.[x]
    cur <- cur + length
let private lists_reduces = [|[|383,1|]; [|381,1|]; [|378,1|]; [|379,1|]; [|382,1|]; [|135,2|]; [|359,1|]; [|357,1|]; [|365,1|]; [|363,1|]; [|363,2|]; [|138,2|]; [|376,1|]; [|376,2|]; [|370,1|]; [|376,3|]; [|368,1|]; [|376,4|]; [|376,5|]; [|366,1|]; [|140,1|]; [|139,1|]; [|141,2|]; [|53,1|]; [|54,1|]; [|52,1|]; [|372,1|]; [|142,2|]; [|147,1|]; [|145,1|]; [|145,2|]; [|55,2|]; [|148,1|]; [|149,3|]; [|147,2|]; [|374,1|]; [|143,3|]; [|208,1|]; [|206,1|]; [|197,1|]; [|190,1|]; [|197,2|]; [|68,3|]; [|204,1|]; [|199,1|]; [|192,1|]; [|199,2|]; [|69,3|]; [|202,1|]; [|200,1|]; [|195,1|]; [|186,1|]; [|195,2|]; [|66,3|]; [|207,1|]; [|194,1|]; [|184,1|]; [|194,2|]; [|65,3|]; [|18,1|]; [|17,1|]; [|198,1|]; [|205,1|]; [|203,1|]; [|201,1|]; [|196,1|]; [|188,1|]; [|196,2|]; [|67,3|]; [|20,1|]; [|19,1|]; [|144,1|]; [|365,2|]; [|351,1|]; [|349,1|]; [|361,9|]; [|361,10|]; [|336,1|]; [|154,1|]; [|158,4|]; [|319,1|]; [|163,3|]; [|177,1|]; [|170,1|]; [|179,1|]; [|174,1|]; [|167,1|]; [|165,1|]; [|172,1|]; [|181,1|]; [|169,1|]; [|178,1|]; [|166,1|]; [|164,1|]; [|171,1|]; [|180,1|]; [|175,1|]; [|173,1|]; [|182,1|]; [|168,1|]; [|176,1|]; [|162,1|]; [|161,1|]; [|156,2|]; [|150,1|]; [|155,1|]; [|157,4|]; [|159,1|]; [|160,3|]; [|57,1|]; [|58,1|]; [|56,1|]; [|151,1|]; [|317,1|]; [|317,2|]; [|122,2|]; [|319,2|]; [|152,1|]; [|316,1|]; [|131,1|]; [|131,2|]; [|345,1|]; [|327,1|]; [|325,1|]; [|327,2|]; [|127,2|]; [|126,1|]; [|338,1|]; [|337,1|]; [|335,1|]; [|343,1|]; [|324,1|]; [|320,1|]; [|124,2|]; [|117,2|]; [|120,3|]; [|44,1|]; [|305,1|]; [|44,2|]; [|115,2|]; [|307,1|]; [|315,1|]; [|293,1|]; [|293,2|]; [|114,2|]; [|34,3|]; [|11,1|]; [|295,1|]; [|11,2|]; [|112,2|]; [|297,1|]; [|303,1|]; [|111,2|]; [|33,1|]; [|13,2|]; [|3,1|]; [|2,1|]; [|1,2|]; [|0,2|]; [|4,1|]; [|148,1; 12,1|]; [|299,1|]; [|113,2|]; [|37,1|]; [|36,4|]; [|301,1|]; [|12,2|]; [|39,1|]; [|38,1|]; [|32,3|]; [|35,1|]; [|315,2|]; [|313,1|]; [|119,1|]; [|46,2|]; [|15,1|]; [|14,1|]; [|6,2|]; [|5,2|]; [|16,1|]; [|292,2|]; [|290,1|]; [|292,3|]; [|288,1|]; [|292,4|]; [|110,2|]; [|279,1|]; [|287,1|]; [|281,1|]; [|281,2|]; [|108,2|]; [|8,1|]; [|274,3|]; [|102,1|]; [|273,4|]; [|272,4|]; [|268,1|]; [|270,1|]; [|174,1; 105,1|]; [|167,1; 104,1|]; [|26,2|]; [|165,1; 101,1|]; [|166,1; 103,1|]; [|164,1; 100,1|]; [|27,3|]; [|7,3|]; [|287,2|]; [|29,1|]; [|109,3|]; [|28,3|]; [|107,2|]; [|277,1|]; [|106,3|]; [|285,1|]; [|279,2|]; [|275,1|]; [|280,1|]; [|283,1|]; [|10,1|]; [|9,1|]; [|31,1|]; [|30,1|]; [|99,1|]; [|263,1|]; [|99,2|]; [|261,1|]; [|99,3|]; [|257,1|]; [|99,4|]; [|260,1|]; [|227,2|]; [|259,2|]; [|225,1|]; [|96,4|]; [|230,1|]; [|234,6|]; [|228,1|]; [|234,7|]; [|88,4|]; [|90,1|]; [|89,1|]; [|232,1|]; [|97,2|]; [|265,1|]; [|267,1|]; [|237,1|]; [|237,2|]; [|25,1|]; [|249,1|]; [|25,2|]; [|247,1|]; [|25,3|]; [|243,1|]; [|25,4|]; [|246,1|]; [|245,2|]; [|93,4|]; [|94,2|]; [|251,1|]; [|91,2|]; [|148,1; 24,1|]; [|239,1|]; [|24,2|]; [|92,2|]; [|241,1|]; [|267,2|]; [|235,2|]; [|236,1|]; [|148,1; 98,1|]; [|253,1|]; [|98,2|]; [|95,2|]; [|255,1|]; [|148,1; 45,1|]; [|309,1|]; [|116,2|]; [|41,1|]; [|40,4|]; [|311,1|]; [|45,2|]; [|43,1|]; [|42,1|]; [|118,3|]; [|121,1|]; [|324,2|]; [|48,1|]; [|47,1|]; [|49,1|]; [|49,2|]; [|322,1|]; [|123,3|]; [|125,1|]; [|50,3|]; [|222,1|]; [|23,1|]; [|220,1|]; [|23,2|]; [|82,2|]; [|224,3|]; [|218,1|]; [|224,4|]; [|224,5|]; [|216,1|]; [|81,2|]; [|85,1|]; [|84,1|]; [|83,2|]; [|343,2|]; [|334,4|]; [|330,1|]; [|334,5|]; [|128,2|]; [|87,1|]; [|86,1|]; [|129,1|]; [|332,4|]; [|130,1|]; [|328,1|]; [|328,2|]; [|181,1; 57,1|]; [|182,1; 58,1|]; [|168,1; 56,1|]; [|51,3|]; [|333,2|]; [|213,3|]; [|75,1|]; [|76,1|]; [|215,3|]; [|79,1|]; [|80,1|]; [|209,1|]; [|72,1|]; [|211,5|]; [|71,3|]; [|22,1|]; [|21,1|]; [|70,2|]; [|214,3|]; [|77,1|]; [|78,1|]; [|212,3|]; [|73,1|]; [|74,1|]; [|361,11|]; [|361,12|]; [|361,13|]; [|339,1|]; [|341,1|]; [|347,1|]; [|132,2|]; [|354,1|]; [|183,3|]; [|62,1|]; [|60,1|]; [|61,1|]; [|59,1|]; [|353,2|]; [|64,1|]; [|63,1|]; [|133,2|]; [|355,1|]; [|362,1|]; [|134,2|]; [|136,1|]; [|137,1|]; [|380,4|]; [|377,1|]|]
let private small_reduces =
        [|65537; 13238272; 196609; 13238273; 262145; 13238274; 327681; 13238275; 393217; 13238276; 655362; 13500421; 17629189; 720898; 13500422; 17629190; 917508; 13762567; 14680071; 17563655; 17694727; 1048579; 13762568; 14680072; 17563656; 1114115; 13762569; 14680073; 17563657; 1179651; 13762570; 14680074; 17563658; 1310724; 12910603; 13762571; 14680075; 17563659; 1376260; 12910604; 13762572; 14680076; 17563660; 1441796; 12910605; 13762573; 14680077; 17563661; 1507335; 12910606; 13762574; 14680078; 15859726; 15925262; 16187406; 17563662; 1572868; 12910607; 13762575; 14680079; 17563663; 1638405; 12910608; 13762576; 14680080; 16187408; 17563664; 1703940; 12910609; 13762577; 14680081; 17563665; 1769476; 12910610; 13762578; 14680082; 17563666; 1835012; 12910611; 13762579; 14680083; 17563667; 1900549; 12910612; 13762580; 14680084; 16187412; 17563668; 1966085; 12910613; 13762581; 14680085; 16187413; 17563669; 2097159; 12910614; 13762582; 14680086; 15859734; 15925270; 16187414; 17563670; 2162695; 12910615; 13762583; 14680087; 15859735; 15925271; 16187415; 17563671; 2228231; 12910616; 13762584; 14680088; 15859736; 15925272; 16187416; 17563672; 2293767; 12910617; 13762585; 14680089; 15859737; 15925273; 16187417; 17563673; 2359304; 12910618; 13762586; 14680090; 15859738; 15925274; 16187418; 17563674; 18284570; 2555919; 13893659; 13959195; 14090267; 14221339; 14614555; 14942235; 15335451; 15400987; 15663131; 15728667; 16252955; 16908315; 16973851; 17235995; 17367067; 2621494; 12910620; 12976156; 13107228; 13238300; 13369372; 13500444; 13697052; 13762588; 14286876; 14352412; 14417948; 14483484; 14549020; 14745628; 14876700; 15007772; 15073308; 15138844; 15204380; 15532060; 15794204; 16580636; 16777244; 17104924; 17170460; 17301532; 17498140; 17563676; 17629212; 17694748; 17760284; 18087964; 18153500; 18219036; 18284572; 18350108; 18415644; 18481180; 18546716; 18612252; 18677788; 18743324; 18808860; 18874396; 18939932; 19005468; 19071004; 19136540; 19202076; 19267612; 19464220; 19529756; 19595292; 19726364; 2687030; 12910621; 12976157; 13107229; 13238301; 13369373; 13500445; 13697053; 13762589; 14286877; 14352413; 14417949; 14483485; 14549021; 14745629; 14876701; 15007773; 15073309; 15138845; 15204381; 15532061; 15794205; 16580637; 16777245; 17104925; 17170461; 17301533; 17498141; 17563677; 17629213; 17694749; 17760285; 18087965; 18153501; 18219037; 18284573; 18350109; 18415645; 18481181; 18546717; 18612253; 18677789; 18743325; 18808861; 18874397; 18939933; 19005469; 19071005; 19136541; 19202077; 19267613; 19464221; 19529757; 19595293; 19726365; 2752566; 12910622; 12976158; 13107230; 13238302; 13369374; 13500446; 13697054; 13762590; 14286878; 14352414; 14417950; 14483486; 14549022; 14745630; 14876702; 15007774; 15073310; 15138846; 15204382; 15532062; 15794206; 16580638; 16777246; 17104926; 17170462; 17301534; 17498142; 17563678; 17629214; 17694750; 17760286; 18087966; 18153502; 18219038; 18284574; 18350110; 18415646; 18481182; 18546718; 18612254; 18677790; 18743326; 18808862; 18874398; 18939934; 19005470; 19071006; 19136542; 19202078; 19267614; 19464222; 19529758; 19595294; 19726366; 2883638; 12910623; 12976159; 13107231; 13238303; 13369375; 13500447; 13697055; 13762591; 14286879; 14352415; 14417951; 14483487; 14549023; 14745631; 14876703; 15007775; 15073311; 15138847; 15204383; 15532063; 15794207; 16580639; 16777247; 17104927; 17170463; 17301535; 17498143; 17563679; 17629215; 17694751; 17760287; 18087967; 18153503; 18219039; 18284575; 18350111; 18415647; 18481183; 18546719; 18612255; 18677791; 18743327; 18808863; 18874399; 18939935; 19005471; 19071007; 19136543; 19202079; 19267615; 19464223; 19529759; 19595295; 19726367; 2949176; 12910624; 12976160; 13107232; 13238304; 13369376; 13500448; 13697056; 13762592; 14286880; 14352416; 14417952; 14483488; 14549024; 14680096; 14745632; 14876704; 15007776; 15073312; 15138848; 15204384; 15532064; 15794208; 16580640; 16777248; 17104928; 17170464; 17301536; 17498144; 17563680; 17629216; 17694752; 17760288; 18087968; 18153504; 18219040; 18284576; 18350112; 18415648; 18481184; 18546720; 18612256; 18677792; 18743328; 18808864; 18874400; 18939936; 19005472; 19071008; 19136544; 19202080; 19267616; 19398688; 19464224; 19529760; 19595296; 19726368; 3145784; 12910625; 12976161; 13107233; 13238305; 13369377; 13500449; 13697057; 13762593; 14286881; 14352417; 14417953; 14483489; 14549025; 14680097; 14745633; 14876705; 15007777; 15073313; 15138849; 15204385; 15532065; 15794209; 16580641; 16777249; 17104929; 17170465; 17301537; 17498145; 17563681; 17629217; 17694753; 17760289; 18087969; 18153505; 18219041; 18284577; 18350113; 18415649; 18481185; 18546721; 18612257; 18677793; 18743329; 18808865; 18874401; 18939937; 19005473; 19071009; 19136545; 19202081; 19267617; 19398689; 19464225; 19529761; 19595297; 19726369; 3211318; 12910626; 12976162; 13107234; 13238306; 13369378; 13500450; 13697058; 13762594; 14286882; 14352418; 14417954; 14483490; 14549026; 14745634; 14876706; 15007778; 15073314; 15138850; 15204386; 15532066; 15794210; 16580642; 16777250; 17104930; 17170466; 17301538; 17498146; 17563682; 17629218; 17694754; 17760290; 18087970; 18153506; 18219042; 18284578; 18350114; 18415650; 18481186; 18546722; 18612258; 18677794; 18743330; 18808866; 18874402; 18939938; 19005474; 19071010; 19136546; 19202082; 19267618; 19464226; 19529762; 19595298; 19726370; 3276815; 13893667; 13959203; 14090275; 14221347; 14614563; 14942243; 15335459; 15400995; 15663139; 15728675; 16252963; 16908323; 16973859; 17236003; 17367075; 3407881; 12910628; 13762596; 14680100; 15859748; 15925284; 16187428; 17432612; 17563684; 18284580; 3473437; 12910629; 12976165; 13238309; 13369381; 13500453; 13762597; 14286885; 14352421; 14483493; 14549029; 14680101; 14876709; 15859749; 15925285; 16187429; 16580645; 16777253; 17432613; 17563685; 17629221; 17694757; 17760293; 18284581; 18546725; 19136549; 19202085; 19529765; 19595301; 19726373; 3538973; 12910630; 12976166; 13238310; 13369382; 13500454; 13762598; 14286886; 14352422; 14483494; 14549030; 14680102; 14876710; 15859750; 15925286; 16187430; 16580646; 16777254; 17432614; 17563686; 17629222; 17694758; 17760294; 18284582; 18546726; 19136550; 19202086; 19529766; 19595302; 19726374; 3604509; 12910631; 12976167; 13238311; 13369383; 13500455; 13762599; 14286887; 14352423; 14483495; 14549031; 14680103; 14876711; 15859751; 15925287; 16187431; 16580647; 16777255; 17432615; 17563687; 17629223; 17694759; 17760295; 18284583; 18546727; 19136551; 19202087; 19529767; 19595303; 19726375; 3670045; 12910632; 12976168; 13238312; 13369384; 13500456; 13762600; 14286888; 14352424; 14483496; 14549032; 14680104; 14876712; 15859752; 15925288; 16187432; 16580648; 16777256; 17432616; 17563688; 17629224; 17694760; 17760296; 18284584; 18546728; 19136552; 19202088; 19529768; 19595304; 19726376; 3735581; 12910633; 12976169; 13238313; 13369385; 13500457; 13762601; 14286889; 14352425; 14483497; 14549033; 14680105; 14876713; 15859753; 15925289; 16187433; 16580649; 16777257; 17432617; 17563689; 17629225; 17694761; 17760297; 18284585; 18546729; 19136553; 19202089; 19529769; 19595305; 19726377; 3932189; 12910634; 12976170; 13238314; 13369386; 13500458; 13762602; 14286890; 14352426; 14483498; 14549034; 14680106; 14876714; 15859754; 15925290; 16187434; 16580650; 16777258; 17432618; 17563690; 17629226; 17694762; 17760298; 18284586; 18546730; 19136554; 19202090; 19529770; 19595306; 19726378; 3997725; 12910635; 12976171; 13238315; 13369387; 13500459; 13762603; 14286891; 14352427; 14483499; 14549035; 14680107; 14876715; 15859755; 15925291; 16187435; 16580651; 16777259; 17432619; 17563691; 17629227; 17694763; 17760299; 18284587; 18546731; 19136555; 19202091; 19529771; 19595307; 19726379; 4063261; 12910636; 12976172; 13238316; 13369388; 13500460; 13762604; 14286892; 14352428; 14483500; 14549036; 14680108; 14876716; 15859756; 15925292; 16187436; 16580652; 16777260; 17432620; 17563692; 17629228; 17694764; 17760300; 18284588; 18546732; 19136556; 19202092; 19529772; 19595308; 19726380; 4128797; 12910637; 12976173; 13238317; 13369389; 13500461; 13762605; 14286893; 14352429; 14483501; 14549037; 14680109; 14876717; 15859757; 15925293; 16187437; 16580653; 16777261; 17432621; 17563693; 17629229; 17694765; 17760301; 18284589; 18546733; 19136557; 19202093; 19529773; 19595309; 19726381; 4194333; 12910638; 12976174; 13238318; 13369390; 13500462; 13762606; 14286894; 14352430; 14483502; 14549038; 14680110; 14876718; 15859758; 15925294; 16187438; 16580654; 16777262; 17432622; 17563694; 17629230; 17694766; 17760302; 18284590; 18546734; 19136558; 19202094; 19529774; 19595310; 19726382; 4390941; 12910639; 12976175; 13238319; 13369391; 13500463; 13762607; 14286895; 14352431; 14483503; 14549039; 14680111; 14876719; 15859759; 15925295; 16187439; 16580655; 16777263; 17432623; 17563695; 17629231; 17694767; 17760303; 18284591; 18546735; 19136559; 19202095; 19529775; 19595311; 19726383; 4456477; 12910640; 12976176; 13238320; 13369392; 13500464; 13762608; 14286896; 14352432; 14483504; 14549040; 14680112; 14876720; 15859760; 15925296; 16187440; 16580656; 16777264; 17432624; 17563696; 17629232; 17694768; 17760304; 18284592; 18546736; 19136560; 19202096; 19529776; 19595312; 19726384; 4522013; 12910641; 12976177; 13238321; 13369393; 13500465; 13762609; 14286897; 14352433; 14483505; 14549041; 14680113; 14876721; 15859761; 15925297; 16187441; 16580657; 16777265; 17432625; 17563697; 17629233; 17694769; 17760305; 18284593; 18546737; 19136561; 19202097; 19529777; 19595313; 19726385; 4587549; 12910642; 12976178; 13238322; 13369394; 13500466; 13762610; 14286898; 14352434; 14483506; 14549042; 14680114; 14876722; 15859762; 15925298; 16187442; 16580658; 16777266; 17432626; 17563698; 17629234; 17694770; 17760306; 18284594; 18546738; 19136562; 19202098; 19529778; 19595314; 19726386; 4653085; 12910643; 12976179; 13238323; 13369395; 13500467; 13762611; 14286899; 14352435; 14483507; 14549043; 14680115; 14876723; 15859763; 15925299; 16187443; 16580659; 16777267; 17432627; 17563699; 17629235; 17694771; 17760307; 18284595; 18546739; 19136563; 19202099; 19529779; 19595315; 19726387; 4718621; 12910644; 12976180; 13238324; 13369396; 13500468; 13762612; 14286900; 14352436; 14483508; 14549044; 14680116; 14876724; 15859764; 15925300; 16187444; 16580660; 16777268; 17432628; 17563700; 17629236; 17694772; 17760308; 18284596; 18546740; 19136564; 19202100; 19529780; 19595316; 19726388; 4915229; 12910645; 12976181; 13238325; 13369397; 13500469; 13762613; 14286901; 14352437
                                        ; 14483509; 14549045; 14680117; 14876725; 15859765; 15925301; 16187445; 16580661; 16777269; 17432629; 17563701; 17629237; 17694773; 17760309; 18284597; 18546741; 19136565; 19202101; 19529781; 19595317; 19726389; 4980765; 12910646; 12976182; 13238326; 13369398; 13500470; 13762614; 14286902; 14352438; 14483510; 14549046; 14680118; 14876726; 15859766; 15925302; 16187446; 16580662; 16777270; 17432630; 17563702; 17629238; 17694774; 17760310; 18284598; 18546742; 19136566; 19202102; 19529782; 19595318; 19726390; 5046301; 12910647; 12976183; 13238327; 13369399; 13500471; 13762615; 14286903; 14352439; 14483511; 14549047; 14680119; 14876727; 15859767; 15925303; 16187447; 16580663; 16777271; 17432631; 17563703; 17629239; 17694775; 17760311; 18284599; 18546743; 19136567; 19202103; 19529783; 19595319; 19726391; 5111837; 12910648; 12976184; 13238328; 13369400; 13500472; 13762616; 14286904; 14352440; 14483512; 14549048; 14680120; 14876728; 15859768; 15925304; 16187448; 16580664; 16777272; 17432632; 17563704; 17629240; 17694776; 17760312; 18284600; 18546744; 19136568; 19202104; 19529784; 19595320; 19726392; 5177373; 12910649; 12976185; 13238329; 13369401; 13500473; 13762617; 14286905; 14352441; 14483513; 14549049; 14680121; 14876729; 15859769; 15925305; 16187449; 16580665; 16777273; 17432633; 17563705; 17629241; 17694777; 17760313; 18284601; 18546745; 19136569; 19202105; 19529785; 19595321; 19726393; 5373981; 12910650; 12976186; 13238330; 13369402; 13500474; 13762618; 14286906; 14352442; 14483514; 14549050; 14680122; 14876730; 15859770; 15925306; 16187450; 16580666; 16777274; 17432634; 17563706; 17629242; 17694778; 17760314; 18284602; 18546746; 19136570; 19202106; 19529786; 19595322; 19726394; 5439489; 19464251; 5505025; 19464252; 5570589; 12910653; 12976189; 13238333; 13369405; 13500477; 13762621; 14286909; 14352445; 14483517; 14549053; 14680125; 14876733; 15859773; 15925309; 16187453; 16580669; 16777277; 17432637; 17563709; 17629245; 17694781; 17760317; 18284605; 18546749; 19136573; 19202109; 19529789; 19595325; 19726397; 5636125; 12910654; 12976190; 13238334; 13369406; 13500478; 13762622; 14286910; 14352446; 14483518; 14549054; 14680126; 14876734; 15859774; 15925310; 16187454; 16580670; 16777278; 17432638; 17563710; 17629246; 17694782; 17760318; 18284606; 18546750; 19136574; 19202110; 19529790; 19595326; 19726398; 5701661; 12910655; 12976191; 13238335; 13369407; 13500479; 13762623; 14286911; 14352447; 14483519; 14549055; 14680127; 14876735; 15859775; 15925311; 16187455; 16580671; 16777279; 17432639; 17563711; 17629247; 17694783; 17760319; 18284607; 18546751; 19136575; 19202111; 19529791; 19595327; 19726399; 5767197; 12910656; 12976192; 13238336; 13369408; 13500480; 13762624; 14286912; 14352448; 14483520; 14549056; 14680128; 14876736; 15859776; 15925312; 16187456; 16580672; 16777280; 17432640; 17563712; 17629248; 17694784; 17760320; 18284608; 18546752; 19136576; 19202112; 19529792; 19595328; 19726400; 5832733; 12910657; 12976193; 13238337; 13369409; 13500481; 13762625; 14286913; 14352449; 14483521; 14549057; 14680129; 14876737; 15859777; 15925313; 16187457; 16580673; 16777281; 17432641; 17563713; 17629249; 17694785; 17760321; 18284609; 18546753; 19136577; 19202113; 19529793; 19595329; 19726401; 5898269; 12910658; 12976194; 13238338; 13369410; 13500482; 13762626; 14286914; 14352450; 14483522; 14549058; 14680130; 14876738; 15859778; 15925314; 16187458; 16580674; 16777282; 17432642; 17563714; 17629250; 17694786; 17760322; 18284610; 18546754; 19136578; 19202114; 19529794; 19595330; 19726402; 5963805; 12910659; 12976195; 13238339; 13369411; 13500483; 13762627; 14286915; 14352451; 14483523; 14549059; 14680131; 14876739; 15859779; 15925315; 16187459; 16580675; 16777283; 17432643; 17563715; 17629251; 17694787; 17760323; 18284611; 18546755; 19136579; 19202115; 19529795; 19595331; 19726403; 6160413; 12910660; 12976196; 13238340; 13369412; 13500484; 13762628; 14286916; 14352452; 14483524; 14549060; 14680132; 14876740; 15859780; 15925316; 16187460; 16580676; 16777284; 17432644; 17563716; 17629252; 17694788; 17760324; 18284612; 18546756; 19136580; 19202116; 19529796; 19595332; 19726404; 6225921; 19464261; 6291457; 19464262; 6357046; 12910663; 12976199; 13107271; 13238343; 13369415; 13500487; 13697095; 13762631; 14286919; 14352455; 14417991; 14483527; 14549063; 14745671; 14876743; 15007815; 15073351; 15138887; 15204423; 15532103; 15794247; 16580679; 16777287; 17104967; 17170503; 17301575; 17498183; 17563719; 17629255; 17694791; 17760327; 18088007; 18153543; 18219079; 18284615; 18350151; 18415687; 18481223; 18546759; 18612295; 18677831; 18743367; 18808903; 18874439; 18939975; 19005511; 19071047; 19136583; 19202119; 19267655; 19464263; 19529799; 19595335; 19726407; 6422531; 13762632; 14680136; 17563720; 6553602; 13762633; 14680137; 6684673; 13762634; 6815745; 13238347; 6881281; 13238348; 6946836; 12976205; 13238349; 13369421; 13500493; 14286925; 14352461; 14483533; 14549069; 14876749; 16580685; 16777293; 17629261; 17694797; 17760333; 18546765; 19136589; 19202125; 19529805; 19595341; 19726413; 7012403; 12910670; 12976206; 13238350; 13369422; 13500494; 13697102; 13762638; 14286926; 14352462; 14417998; 14483534; 14549070; 14745678; 14876750; 15007822; 15073358; 15138894; 15204430; 15532110; 15794254; 16580686; 16777294; 17170510; 17301582; 17498190; 17629262; 17694798; 17760334; 18088014; 18153550; 18219086; 18284622; 18350158; 18415694; 18481230; 18546766; 18612302; 18677838; 18743374; 18808910; 18874446; 18939982; 19005518; 19071054; 19136590; 19202126; 19267662; 19464270; 19529806; 19595342; 19726414; 7209011; 12910671; 12976207; 13238351; 13369423; 13500495; 13697103; 13762639; 14286927; 14352463; 14417999; 14483535; 14549071; 14745679; 14876751; 15007823; 15073359; 15138895; 15204431; 15532111; 15794255; 16580687; 16777295; 17170511; 17301583; 17498191; 17629263; 17694799; 17760335; 18088015; 18153551; 18219087; 18284623; 18350159; 18415695; 18481231; 18546767; 18612303; 18677839; 18743375; 18808911; 18874447; 18939983; 19005519; 19071055; 19136591; 19202127; 19267663; 19464271; 19529807; 19595343; 19726415; 7274497; 19464272; 7405619; 12910673; 12976209; 13238353; 13369425; 13500497; 13697105; 13762641; 14286929; 14352465; 14418001; 14483537; 14549073; 14745681; 14876753; 15007825; 15073361; 15138897; 15204433; 15532113; 15794257; 16580689; 16777297; 17170513; 17301585; 17498193; 17629265; 17694801; 17760337; 18088017; 18153553; 18219089; 18284625; 18350161; 18415697; 18481233; 18546769; 18612305; 18677841; 18743377; 18808913; 18874449; 18939985; 19005521; 19071057; 19136593; 19202129; 19267665; 19464273; 19529809; 19595345; 19726417; 7471115; 12976210; 13369426; 13500498; 16777298; 17629266; 17694802; 17760338; 18546770; 19136594; 19202130; 19726418; 7536651; 12976211; 13369427; 13500499; 16777299; 17629267; 17694803; 17760339; 18546771; 19136595; 19202131; 19726419; 7602187; 12976212; 13369428; 13500500; 16777300; 17629268; 17694804; 17760340; 18546772; 19136596; 19202132; 19726420; 7667723; 12976213; 13369429; 13500501; 16777301; 17629269; 17694805; 17760341; 18546773; 19136597; 19202133; 19726421; 7733259; 12976214; 13369430; 13500502; 16777302; 17629270; 17694806; 17760342; 18546774; 19136598; 19202134; 19726422; 7798795; 12976215; 13369431; 13500503; 16777303; 17629271; 17694807; 17760343; 18546775; 19136599; 19202135; 19726423; 7864331; 12976216; 13369432; 13500504; 16777304; 17629272; 17694808; 17760344; 18546776; 19136600; 19202136; 19726424; 7929867; 12976217; 13369433; 13500505; 16777305; 17629273; 17694809; 17760345; 18546777; 19136601; 19202137; 19726425; 7995403; 12976218; 13369434; 13500506; 16777306; 17629274; 17694810; 17760346; 18546778; 19136602; 19202138; 19726426; 8060939; 12976219; 13369435; 13500507; 16777307; 17629275; 17694811; 17760347; 18546779; 19136603; 19202139; 19726427; 8126475; 12976220; 13369436; 13500508; 16777308; 17629276; 17694812; 17760348; 18546780; 19136604; 19202140; 19726428; 8192011; 12976221; 13369437; 13500509; 16777309; 17629277; 17694813; 17760349; 18546781; 19136605; 19202141; 19726429; 8257547; 12976222; 13369438; 13500510; 16777310; 17629278; 17694814; 17760350; 18546782; 19136606; 19202142; 19726430; 8323083; 12976223; 13369439; 13500511; 16777311; 17629279; 17694815; 17760351; 18546783; 19136607; 19202143; 19726431; 8388619; 12976224; 13369440; 13500512; 16777312; 17629280; 17694816; 17760352; 18546784; 19136608; 19202144; 19726432; 8454155; 12976225; 13369441; 13500513; 16777313; 17629281; 17694817; 17760353; 18546785; 19136609; 19202145; 19726433; 8519691; 12976226; 13369442; 13500514; 16777314; 17629282; 17694818; 17760354; 18546786; 19136610; 19202146; 19726434; 8585227; 12976227; 13369443; 13500515; 16777315; 17629283; 17694819; 17760355; 18546787; 19136611; 19202147; 19726435; 8650763; 12976228; 13369444; 13500516; 16777316; 17629284; 17694820; 17760356; 18546788; 19136612; 19202148; 19726436; 8716339; 12910693; 12976229; 13238373; 13369445; 13500517; 13697125; 13762661; 14286949; 14352485; 14418021; 14483557; 14549093; 14745701; 14876773; 15007845; 15073381; 15138917; 15204453; 15532133; 15794277; 16580709; 16777317; 17170533; 17301605; 17498213; 17629285; 17694821; 17760357; 18088037; 18153573; 18219109; 18284645; 18350181; 18415717; 18481253; 18546789; 18612325; 18677861; 18743397; 18808933; 18874469; 18940005; 19005541; 19071077; 19136613; 19202149; 19267685; 19464293; 19529829; 19595365; 19726437; 8781875; 12910694; 12976230; 13238374; 13369446; 13500518; 13697126; 13762662; 14286950; 14352486; 14418022; 14483558; 14549094; 14745702; 14876774; 15007846; 15073382; 15138918; 15204454; 15532134; 15794278; 16580710; 16777318; 17170534; 17301606; 17498214; 17629286; 17694822; 17760358; 18088038; 18153574; 18219110; 18284646; 18350182; 18415718; 18481254; 18546790; 18612326; 18677862; 18743398; 18808934; 18874470; 18940006; 19005542; 19071078; 19136614; 19202150; 19267686; 19464294; 19529830; 19595366; 19726438; 8912947; 12910695; 12976231; 13238375; 13369447; 13500519; 13697127; 13762663; 14286951; 14352487; 14418023; 14483559; 14549095; 14745703; 14876775; 15007847; 15073383; 15138919; 15204455; 15532135; 15794279; 16580711; 16777319; 17170535; 17301607; 17498215; 17629287; 17694823; 17760359; 18088039; 18153575; 18219111; 18284647; 18350183; 18415719; 18481255; 18546791; 18612327; 18677863; 18743399; 18808935; 18874471; 18940007; 19005543; 19071079; 19136615; 19202151; 19267687; 19464295; 19529831; 19595367; 19726439
                                        ; 8978483; 12910696; 12976232; 13238376; 13369448; 13500520; 13697128; 13762664; 14286952; 14352488; 14418024; 14483560; 14549096; 14745704; 14876776; 15007848; 15073384; 15138920; 15204456; 15532136; 15794280; 16580712; 16777320; 17170536; 17301608; 17498216; 17629288; 17694824; 17760360; 18088040; 18153576; 18219112; 18284648; 18350184; 18415720; 18481256; 18546792; 18612328; 18677864; 18743400; 18808936; 18874472; 18940008; 19005544; 19071080; 19136616; 19202152; 19267688; 19464296; 19529832; 19595368; 19726440; 9044019; 12910697; 12976233; 13238377; 13369449; 13500521; 13697129; 13762665; 14286953; 14352489; 14418025; 14483561; 14549097; 14745705; 14876777; 15007849; 15073385; 15138921; 15204457; 15532137; 15794281; 16580713; 16777321; 17170537; 17301609; 17498217; 17629289; 17694825; 17760361; 18088041; 18153577; 18219113; 18284649; 18350185; 18415721; 18481257; 18546793; 18612329; 18677865; 18743401; 18808937; 18874473; 18940009; 19005545; 19071081; 19136617; 19202153; 19267689; 19464297; 19529833; 19595369; 19726441; 9306163; 12910698; 12976234; 13238378; 13369450; 13500522; 13697130; 13762666; 14286954; 14352490; 14418026; 14483562; 14549098; 14745706; 14876778; 15007850; 15073386; 15138922; 15204458; 15532138; 15794282; 16580714; 16777322; 17170538; 17301610; 17498218; 17629290; 17694826; 17760362; 18088042; 18153578; 18219114; 18284650; 18350186; 18415722; 18481258; 18546794; 18612330; 18677866; 18743402; 18808938; 18874474; 18940010; 19005546; 19071082; 19136618; 19202154; 19267690; 19464298; 19529834; 19595370; 19726442; 9371699; 12910699; 12976235; 13238379; 13369451; 13500523; 13697131; 13762667; 14286955; 14352491; 14418027; 14483563; 14549099; 14745707; 14876779; 15007851; 15073387; 15138923; 15204459; 15532139; 15794283; 16580715; 16777323; 17170539; 17301611; 17498219; 17629291; 17694827; 17760363; 18088043; 18153579; 18219115; 18284651; 18350187; 18415723; 18481259; 18546795; 18612331; 18677867; 18743403; 18808939; 18874475; 18940011; 19005547; 19071083; 19136619; 19202155; 19267691; 19464299; 19529835; 19595371; 19726443; 9568307; 12910700; 12976236; 13238380; 13369452; 13500524; 13697132; 13762668; 14286956; 14352492; 14418028; 14483564; 14549100; 14745708; 14876780; 15007852; 15073388; 15138924; 15204460; 15532140; 15794284; 16580716; 16777324; 17170540; 17301612; 17498220; 17629292; 17694828; 17760364; 18088044; 18153580; 18219116; 18284652; 18350188; 18415724; 18481260; 18546796; 18612332; 18677868; 18743404; 18808940; 18874476; 18940012; 19005548; 19071084; 19136620; 19202156; 19267692; 19464300; 19529836; 19595372; 19726444; 9633803; 12976237; 13369453; 13500525; 16777325; 17629293; 17694829; 17760365; 18546797; 19136621; 19202157; 19726445; 9699339; 12976238; 13369454; 13500526; 16777326; 17629294; 17694830; 17760366; 18546798; 19136622; 19202158; 19726446; 9764875; 12976239; 13369455; 13500527; 16777327; 17629295; 17694831; 17760367; 18546799; 19136623; 19202159; 19726447; 9830451; 12910704; 12976240; 13238384; 13369456; 13500528; 13697136; 13762672; 14286960; 14352496; 14418032; 14483568; 14549104; 14745712; 14876784; 15007856; 15073392; 15138928; 15204464; 15532144; 15794288; 16580720; 16777328; 17170544; 17301616; 17498224; 17629296; 17694832; 17760368; 18088048; 18153584; 18219120; 18284656; 18350192; 18415728; 18481264; 18546800; 18612336; 18677872; 18743408; 18808944; 18874480; 18940016; 19005552; 19071088; 19136624; 19202160; 19267696; 19464304; 19529840; 19595376; 19726448; 9895937; 19464305; 9961473; 19464306; 10092546; 12910707; 19464307; 10158081; 19464308; 10223617; 19464309; 10289153; 19464310; 10354708; 12976247; 13238391; 13369463; 13500535; 14286967; 14352503; 14483575; 14549111; 14876791; 16580727; 16777335; 17629303; 17694839; 17760375; 18546807; 19136631; 19202167; 19529847; 19595383; 19726455; 10420244; 12976248; 13238392; 13369464; 13500536; 14286968; 14352504; 14483576; 14549112; 14876792; 16580728; 16777336; 17629304; 17694840; 17760376; 18546808; 19136632; 19202168; 19529848; 19595384; 19726456; 10485780; 12976249; 13238393; 13369465; 13500537; 14286969; 14352505; 14483577; 14549113; 14876793; 16580729; 16777337; 17629305; 17694841; 17760377; 18546809; 19136633; 19202169; 19529849; 19595385; 19726457; 10551316; 12976250; 13238394; 13369466; 13500538; 14286970; 14352506; 14483578; 14549114; 14876794; 16580730; 16777338; 17629306; 17694842; 17760378; 18546810; 19136634; 19202170; 19529850; 19595386; 19726458; 10616852; 12976251; 13238395; 13369467; 13500539; 14286971; 14352507; 14483579; 14549115; 14876795; 16580731; 16777339; 17629307; 17694843; 17760379; 18546811; 19136635; 19202171; 19529851; 19595387; 19726459; 10682388; 12976252; 13238396; 13369468; 13500540; 14286972; 14352508; 14483580; 14549116; 14876796; 16580732; 16777340; 17629308; 17694844; 17760380; 18546812; 19136636; 19202172; 19529852; 19595388; 19726460; 10813460; 12976253; 13238397; 13369469; 13500541; 14286973; 14352509; 14483581; 14549117; 14876797; 16580733; 16777341; 17629309; 17694845; 17760381; 18546813; 19136637; 19202173; 19529853; 19595389; 19726461; 10879001; 12976254; 13238398; 13369470; 13500542; 14286974; 14352510; 14418046; 14483582; 14549118; 14876798; 15007870; 15073406; 16580734; 16777342; 17301630; 17629310; 17694846; 17760382; 18546814; 19136638; 19202174; 19464318; 19529854; 19595390; 19726462; 10944532; 12976255; 13238399; 13369471; 13500543; 14286975; 14352511; 14483583; 14549119; 14876799; 16580735; 16777343; 17629311; 17694847; 17760383; 18546815; 19136639; 19202175; 19529855; 19595391; 19726463; 11010068; 12976256; 13238400; 13369472; 13500544; 14286976; 14352512; 14483584; 14549120; 14876800; 16580736; 16777344; 17629312; 17694848; 17760384; 18546816; 19136640; 19202176; 19529856; 19595392; 19726464; 11075604; 12976257; 13238401; 13369473; 13500545; 14286977; 14352513; 14483585; 14549121; 14876801; 16580737; 16777345; 17629313; 17694849; 17760385; 18546817; 19136641; 19202177; 19529857; 19595393; 19726465; 11141123; 13238402; 14352514; 19529858; 11206678; 12976259; 13238403; 13369475; 13500547; 14286979; 14352515; 14483587; 14549123; 14876803; 15073411; 16580739; 16777347; 17629315; 17694851; 17760387; 18546819; 19136643; 19202179; 19464323; 19529859; 19595395; 19726467; 11272214; 12976260; 13238404; 13369476; 13500548; 14286980; 14352516; 14483588; 14549124; 14876804; 15073412; 16580740; 16777348; 17629316; 17694852; 17760388; 18546820; 19136644; 19202180; 19464324; 19529860; 19595396; 19726468; 11403286; 12976261; 13238405; 13369477; 13500549; 14286981; 14352517; 14483589; 14549125; 14876805; 15073413; 16580741; 16777349; 17629317; 17694853; 17760389; 18546821; 19136645; 19202181; 19464325; 19529861; 19595397; 19726469; 11534381; 12910670; 12976206; 13238350; 13369422; 13500494; 13762638; 14286926; 14352462; 14417998; 14483534; 14549070; 14745678; 14876750; 15007822; 15073358; 16580686; 16777294; 17301582; 17498190; 17629262; 17694798; 17760334; 18088014; 18153550; 18219086; 18284622; 18350158; 18415694; 18481230; 18546766; 18612302; 18677838; 18743374; 18808910; 18874446; 18939982; 19005518; 19071054; 19136590; 19202126; 19267662; 19464270; 19529806; 19595342; 19726414; 11599874; 13041798; 13500550; 11665436; 12910727; 12976263; 13238407; 13369479; 13500551; 14286983; 14352519; 14418055; 14483591; 14549127; 14745735; 14876807; 15007879; 15073415; 16580743; 16777351; 17301639; 17498247; 17629319; 17694855; 17760391; 18546823; 19136647; 19202183; 19464327; 19529863; 19595399; 19726471; 11730972; 12910728; 12976264; 13238408; 13369480; 13500552; 14286984; 14352520; 14418056; 14483592; 14549128; 14745736; 14876808; 15007880; 15073416; 16580744; 16777352; 17301640; 17498248; 17629320; 17694856; 17760392; 18546824; 19136648; 19202184; 19464328; 19529864; 19595400; 19726472; 11796508; 12910729; 12976265; 13238409; 13369481; 13500553; 14286985; 14352521; 14418057; 14483593; 14549129; 14745737; 14876809; 15007881; 15073417; 16580745; 16777353; 17301641; 17498249; 17629321; 17694857; 17760393; 18546825; 19136649; 19202185; 19464329; 19529865; 19595401; 19726473; 11862044; 12910730; 12976266; 13238410; 13369482; 13500554; 14286986; 14352522; 14418058; 14483594; 14549130; 14745738; 14876810; 15007882; 15073418; 16580746; 16777354; 17301642; 17498250; 17629322; 17694858; 17760394; 18546826; 19136650; 19202186; 19464330; 19529866; 19595402; 19726474; 11993116; 12910731; 12976267; 13238411; 13369483; 13500555; 14286987; 14352523; 14418059; 14483595; 14549131; 14745739; 14876811; 15007883; 15073419; 16580747; 16777355; 17301643; 17498251; 17629323; 17694859; 17760395; 18546827; 19136651; 19202187; 19464331; 19529867; 19595403; 19726475; 12058625; 13500556; 12124187; 12976269; 13238413; 13369485; 13500557; 14286989; 14352525; 14418061; 14483597; 14549133; 14745741; 14876813; 15007885; 15073421; 16580749; 16777357; 17301645; 17498253; 17629325; 17694861; 17760397; 18546829; 19136653; 19202189; 19464333; 19529869; 19595405; 19726477; 12189723; 12976270; 13238414; 13369486; 13500558; 14286990; 14352526; 14418062; 14483598; 14549134; 14745742; 14876814; 15007886; 15073422; 16580750; 16777358; 17301646; 17498254; 17629326; 17694862; 17760398; 18546830; 19136654; 19202190; 19464334; 19529870; 19595406; 19726478; 12255259; 12976271; 13238415; 13369487; 13500559; 14286991; 14352527; 14418063; 14483599; 14549135; 14745743; 14876815; 15007887; 15073423; 16580751; 16777359; 17301647; 17498255; 17629327; 17694863; 17760399; 18546831; 19136655; 19202191; 19464335; 19529871; 19595407; 19726479; 12386349; 12910670; 12976206; 13238350; 13369422; 13500494; 13762638; 14286926; 14352462; 14417998; 14483534; 14549070; 14745678; 14876750; 15007822; 15073358; 16580686; 16777294; 17301582; 17498190; 17629262; 17694798; 17760334; 18088014; 18153550; 18219086; 18284622; 18350158; 18415694; 18481230; 18546766; 18612302; 18677838; 18743374; 18808910; 18874446; 18939982; 19005518; 19071054; 19136590; 19202126; 19267662; 19464270; 19529806; 19595342; 19726414; 12451842; 13041808; 13500560; 12517404; 12910737; 12976273; 13238417; 13369489; 13500561; 14286993; 14352529; 14418065; 14483601; 14549137; 14745745; 14876817; 15007889; 15073425; 16580753; 16777361; 17301649; 17498257; 17629329; 17694865; 17760401; 18546833; 19136657; 19202193; 19464337; 19529873; 19595409; 19726481; 12582940; 12910738; 12976274; 13238418; 13369490; 13500562; 14286994; 14352530; 14418066; 14483602; 14549138; 14745746; 14876818; 15007890; 15073426; 16580754; 16777362
                                        ; 17301650; 17498258; 17629330; 17694866; 17760402; 18546834; 19136658; 19202194; 19464338; 19529874; 19595410; 19726482; 12648476; 12910739; 12976275; 13238419; 13369491; 13500563; 14286995; 14352531; 14418067; 14483603; 14549139; 14745747; 14876819; 15007891; 15073427; 16580755; 16777363; 17301651; 17498259; 17629331; 17694867; 17760403; 18546835; 19136659; 19202195; 19464339; 19529875; 19595411; 19726483; 12714012; 12910740; 12976276; 13238420; 13369492; 13500564; 14286996; 14352532; 14418068; 14483604; 14549140; 14745748; 14876820; 15007892; 15073428; 16580756; 16777364; 17301652; 17498260; 17629332; 17694868; 17760404; 18546836; 19136660; 19202196; 19464340; 19529876; 19595412; 19726484; 12845084; 12910741; 12976277; 13238421; 13369493; 13500565; 14286997; 14352533; 14418069; 14483605; 14549141; 14745749; 14876821; 15007893; 15073429; 16580757; 16777365; 17301653; 17498261; 17629333; 17694869; 17760405; 18546837; 19136661; 19202197; 19464341; 19529877; 19595413; 19726485; 12910593; 13500566; 12976130; 13041815; 13500567; 13041692; 12910744; 12976280; 13238424; 13369496; 13500568; 14287000; 14352536; 14418072; 14483608; 14549144; 14745752; 14876824; 15007896; 15073432; 16580760; 16777368; 17301656; 17498264; 17629336; 17694872; 17760408; 18546840; 19136664; 19202200; 19464344; 19529880; 19595416; 19726488; 13107228; 12910745; 12976281; 13238425; 13369497; 13500569; 14287001; 14352537; 14418073; 14483609; 14549145; 14745753; 14876825; 15007897; 15073433; 16580761; 16777369; 17301657; 17498265; 17629337; 17694873; 17760409; 18546841; 19136665; 19202201; 19464345; 19529881; 19595417; 19726489; 13238300; 12910746; 12976282; 13238426; 13369498; 13500570; 14287002; 14352538; 14418074; 14483610; 14549146; 14745754; 14876826; 15007898; 15073434; 16580762; 16777370; 17301658; 17498266; 17629338; 17694874; 17760410; 18546842; 19136666; 19202202; 19464346; 19529882; 19595418; 19726490; 13303836; 12910747; 12976283; 13238427; 13369499; 13500571; 14287003; 14352539; 14418075; 14483611; 14549147; 14745755; 14876827; 15007899; 15073435; 16580763; 16777371; 17301659; 17498267; 17629339; 17694875; 17760411; 18546843; 19136667; 19202203; 19464347; 19529883; 19595419; 19726491; 13369372; 12910748; 12976284; 13238428; 13369500; 13500572; 14287004; 14352540; 14418076; 14483612; 14549148; 14745756; 14876828; 15007900; 15073436; 16580764; 16777372; 17301660; 17498268; 17629340; 17694876; 17760412; 18546844; 19136668; 19202204; 19464348; 19529884; 19595420; 19726492; 13500444; 12910749; 12976285; 13238429; 13369501; 13500573; 14287005; 14352541; 14418077; 14483613; 14549149; 14745757; 14876829; 15007901; 15073437; 16580765; 16777373; 17301661; 17498269; 17629341; 17694877; 17760413; 18546845; 19136669; 19202205; 19464349; 19529885; 19595421; 19726493; 13565980; 12910750; 12976286; 13238430; 13369502; 13500574; 14287006; 14352542; 14418078; 14483614; 14549150; 14745758; 14876830; 15007902; 15073438; 16580766; 16777374; 17301662; 17498270; 17629342; 17694878; 17760414; 18546846; 19136670; 19202206; 19464350; 19529886; 19595422; 19726494; 13631516; 12910751; 12976287; 13238431; 13369503; 13500575; 14287007; 14352543; 14418079; 14483615; 14549151; 14745759; 14876831; 15007903; 15073439; 16580767; 16777375; 17301663; 17498271; 17629343; 17694879; 17760415; 18546847; 19136671; 19202207; 19464351; 19529887; 19595423; 19726495; 13697070; 12910752; 12976288; 13107232; 13238432; 13369504; 13500576; 13762592; 14287008; 14352544; 14418080; 14483616; 14549152; 14745760; 14876832; 15007904; 15073440; 16580768; 16777376; 17301664; 17498272; 17629344; 17694880; 17760416; 18087968; 18153504; 18219040; 18284576; 18350112; 18415648; 18481184; 18546848; 18612256; 18677792; 18743328; 18808864; 18874400; 18939936; 19005472; 19071008; 19136672; 19202208; 19267616; 19464352; 19529888; 19595424; 19726496; 13762588; 12910753; 12976289; 13238433; 13369505; 13500577; 14287009; 14352545; 14418081; 14483617; 14549153; 14745761; 14876833; 15007905; 15073441; 16580769; 16777377; 17301665; 17498273; 17629345; 17694881; 17760417; 18546849; 19136673; 19202209; 19464353; 19529889; 19595425; 19726497; 13893660; 12910754; 12976290; 13238434; 13369506; 13500578; 14287010; 14352546; 14418082; 14483618; 14549154; 14745762; 14876834; 15007906; 15073442; 16580770; 16777378; 17301666; 17498274; 17629346; 17694882; 17760418; 18546850; 19136674; 19202210; 19464354; 19529890; 19595426; 19726498; 13959196; 12910755; 12976291; 13238435; 13369507; 13500579; 14287011; 14352547; 14418083; 14483619; 14549155; 14745763; 14876835; 15007907; 15073443; 16580771; 16777379; 17301667; 17498275; 17629347; 17694883; 17760419; 18546851; 19136675; 19202211; 19464355; 19529891; 19595427; 19726499; 14155804; 12910756; 12976292; 13238436; 13369508; 13500580; 14287012; 14352548; 14418084; 14483620; 14549156; 14745764; 14876836; 15007908; 15073444; 16580772; 16777380; 17301668; 17498276; 17629348; 17694884; 17760420; 18546852; 19136676; 19202212; 19464356; 19529892; 19595428; 19726500; 14221313; 19464357; 14286876; 12910758; 12976294; 13238438; 13369510; 13500582; 14287014; 14352550; 14418086; 14483622; 14549158; 14745766; 14876838; 15007910; 15073446; 16580774; 16777382; 17301670; 17498278; 17629350; 17694886; 17760422; 18546854; 19136678; 19202214; 19464358; 19529894; 19595430; 19726502; 14352385; 13500583; 14417921; 13500584; 14549020; 12910761; 12976297; 13238441; 13369513; 13500585; 14287017; 14352553; 14418089; 14483625; 14549161; 14745769; 14876841; 15007913; 15073449; 16580777; 16777385; 17301673; 17498281; 17629353; 17694889; 17760425; 18546857; 19136681; 19202217; 19464361; 19529897; 19595433; 19726505; 14614556; 12910762; 12976298; 13238442; 13369514; 13500586; 14287018; 14352554; 14418090; 14483626; 14549162; 14745770; 14876842; 15007914; 15073450; 16580778; 16777386; 17301674; 17498282; 17629354; 17694890; 17760426; 18546858; 19136682; 19202218; 19464362; 19529898; 19595434; 19726506; 14680091; 12976299; 13238443; 13369515; 13500587; 14287019; 14352555; 14418091; 14483627; 14549163; 14745771; 14876843; 15007915; 15073451; 16580779; 16777387; 17301675; 17498283; 17629355; 17694891; 17760427; 18546859; 19136683; 19202219; 19464363; 19529899; 19595435; 19726507; 14745602; 13041836; 13500588; 14811164; 12910765; 12976301; 13238445; 13369517; 13500589; 14287021; 14352557; 14418093; 14483629; 14549165; 14745773; 14876845; 15007917; 15073453; 16580781; 16777389; 17301677; 17498285; 17629357; 17694893; 17760429; 18546861; 19136685; 19202221; 19464365; 19529901; 19595437; 19726509; 14942236; 12910766; 12976302; 13238446; 13369518; 13500590; 14287022; 14352558; 14418094; 14483630; 14549166; 14745774; 14876846; 15007918; 15073454; 16580782; 16777390; 17301678; 17498286; 17629358; 17694894; 17760430; 18546862; 19136686; 19202222; 19464366; 19529902; 19595438; 19726510; 15007772; 12910767; 12976303; 13238447; 13369519; 13500591; 14287023; 14352559; 14418095; 14483631; 14549167; 14745775; 14876847; 15007919; 15073455; 16580783; 16777391; 17301679; 17498287; 17629359; 17694895; 17760431; 18546863; 19136687; 19202223; 19464367; 19529903; 19595439; 19726511; 15073308; 12910768; 12976304; 13238448; 13369520; 13500592; 14287024; 14352560; 14418096; 14483632; 14549168; 14745776; 14876848; 15007920; 15073456; 16580784; 16777392; 17301680; 17498288; 17629360; 17694896; 17760432; 18546864; 19136688; 19202224; 19464368; 19529904; 19595440; 19726512; 15204380; 12910769; 12976305; 13238449; 13369521; 13500593; 14287025; 14352561; 14418097; 14483633; 14549169; 14745777; 14876849; 15007921; 15073457; 16580785; 16777393; 17301681; 17498289; 17629361; 17694897; 17760433; 18546865; 19136689; 19202225; 19464369; 19529905; 19595441; 19726513; 15269916; 12910770; 12976306; 13238450; 13369522; 13500594; 14287026; 14352562; 14418098; 14483634; 14549170; 14745778; 14876850; 15007922; 15073458; 16580786; 16777394; 17301682; 17498290; 17629362; 17694898; 17760434; 18546866; 19136690; 19202226; 19464370; 19529906; 19595442; 19726514; 15335452; 12910771; 12976307; 13238451; 13369523; 13500595; 14287027; 14352563; 14418099; 14483635; 14549171; 14745779; 14876851; 15007923; 15073459; 16580787; 16777395; 17301683; 17498291; 17629363; 17694899; 17760435; 18546867; 19136691; 19202227; 19464371; 19529907; 19595443; 19726515; 15400985; 12976308; 13238452; 13369524; 13500596; 14287028; 14352564; 14418100; 14483636; 14549172; 14876852; 15007924; 15073460; 16580788; 16777396; 17301684; 17629364; 17694900; 17760436; 18546868; 19136692; 19202228; 19464372; 19529908; 19595444; 19726516; 15466522; 12976309; 13238453; 13369525; 13500597; 14287029; 14352565; 14418101; 14483637; 14549173; 14876853; 15007925; 15073461; 16580789; 16777397; 17301685; 17498293; 17629365; 17694901; 17760437; 18546869; 19136693; 19202229; 19464373; 19529909; 19595445; 19726517; 15532057; 12976310; 13238454; 13369526; 13500598; 14287030; 14352566; 14418102; 14483638; 14549174; 14876854; 15007926; 15073462; 16580790; 16777398; 17301686; 17629366; 17694902; 17760438; 18546870; 19136694; 19202230; 19464374; 19529910; 19595446; 19726518; 15597593; 12976311; 13238455; 13369527; 13500599; 14287031; 14352567; 14418103; 14483639; 14549175; 14876855; 15007927; 15073463; 16580791; 16777399; 17301687; 17629367; 17694903; 17760439; 18546871; 19136695; 19202231; 19464375; 19529911; 19595447; 19726519; 15663129; 12976312; 13238456; 13369528; 13500600; 14287032; 14352568; 14418104; 14483640; 14549176; 14876856; 15007928; 15073464; 16580792; 16777400; 17301688; 17629368; 17694904; 17760440; 18546872; 19136696; 19202232; 19464376; 19529912; 19595448; 19726520; 15794201; 12976313; 13238457; 13369529; 13500601; 14287033; 14352569; 14418105; 14483641; 14549177; 14876857; 15007929; 15073465; 16580793; 16777401; 17301689; 17629369; 17694905; 17760441; 18546873; 19136697; 19202233; 19464377; 19529913; 19595449; 19726521; 15859737; 12976314; 13238458; 13369530; 13500602; 14287034; 14352570; 14418106; 14483642; 14549178; 14876858; 15007930; 15073466; 16580794; 16777402; 17301690; 17629370; 17694906; 17760442; 18546874; 19136698; 19202234; 19464378; 19529914; 19595450; 19726522; 15925273; 12976315; 13238459; 13369531; 13500603; 14287035; 14352571; 14418107; 14483643; 14549179; 14876859; 15007931; 15073467; 16580795; 16777403; 17301691; 17629371; 17694907; 17760443; 18546875; 19136699; 19202235; 19464379; 19529915; 19595451; 19726523; 15990809; 12976316; 13238460; 13369532; 13500604; 14287036; 14352572
                                        ; 14418108; 14483644; 14549180; 14876860; 15007932; 15073468; 16580796; 16777404; 17301692; 17629372; 17694908; 17760444; 18546876; 19136700; 19202236; 19464380; 19529916; 19595452; 19726524; 16056345; 12976317; 13238461; 13369533; 13500605; 14287037; 14352573; 14418109; 14483645; 14549181; 14876861; 15007933; 15073469; 16580797; 16777405; 17301693; 17629373; 17694909; 17760445; 18546877; 19136701; 19202237; 19464381; 19529917; 19595453; 19726525; 16187418; 12910782; 12976318; 13238462; 13369534; 13500606; 14287038; 14352574; 14418110; 14483646; 14549182; 14876862; 15007934; 15073470; 16580798; 16777406; 17301694; 17629374; 17694910; 17760446; 18546878; 19136702; 19202238; 19464382; 19529918; 19595454; 19726526; 16384026; 12910783; 12976319; 13238463; 13369535; 13500607; 14287039; 14352575; 14418111; 14483647; 14549183; 14876863; 15007935; 15073471; 16580799; 16777407; 17301695; 17629375; 17694911; 17760447; 18546879; 19136703; 19202239; 19464383; 19529919; 19595455; 19726527; 16580636; 12910784; 12976320; 13238464; 13369536; 13500608; 13697216; 14287040; 14352576; 14418112; 14483648; 14549184; 14876864; 15007936; 15073472; 15794368; 16580800; 16777408; 17301696; 17629376; 17694912; 17760448; 18546880; 19136704; 19202240; 19464384; 19529920; 19595456; 19726528; 16646155; 12976321; 13369537; 13500609; 16777409; 17629377; 17694913; 17760449; 18546881; 19136705; 19202241; 19726529; 16842780; 12910786; 12976322; 13238466; 13369538; 13500610; 13697218; 14287042; 14352578; 14418114; 14483650; 14549186; 14876866; 15007938; 15073474; 15794370; 16580802; 16777410; 17301698; 17629378; 17694914; 17760450; 18546882; 19136706; 19202242; 19464386; 19529922; 19595458; 19726530; 17039388; 12910787; 12976323; 13238467; 13369539; 13500611; 13697219; 14287043; 14352579; 14418115; 14483651; 14549187; 14876867; 15007939; 15073475; 15794371; 16580803; 16777411; 17301699; 17629379; 17694915; 17760451; 18546883; 19136707; 19202243; 19464387; 19529923; 19595459; 19726531; 17104897; 15597764; 17170433; 15204549; 17235979; 12976326; 13369542; 13500614; 16777414; 17629382; 17694918; 17760454; 18546886; 19136710; 19202246; 19726534; 17301515; 12976327; 13369543; 13500615; 16777415; 17629383; 17694919; 17760455; 18546887; 19136711; 19202247; 19726535; 17367051; 12976328; 13369544; 13500616; 16777416; 17629384; 17694920; 17760456; 18546888; 19136712; 19202248; 19726536; 17432587; 12976329; 13369545; 13500617; 16777417; 17629385; 17694921; 17760457; 18546889; 19136713; 19202249; 19726537; 17498123; 12976330; 13369546; 13500618; 16777418; 17629386; 17694922; 17760458; 18546890; 19136714; 19202250; 19726538; 17563659; 12976331; 13369547; 13500619; 16777419; 17629387; 17694923; 17760459; 18546891; 19136715; 19202251; 19726539; 17629210; 12910796; 12976332; 13238476; 13369548; 13500620; 14287052; 14352588; 14418124; 14483660; 14549196; 14876876; 15007948; 15073484; 16580812; 16777420; 17301708; 17629388; 17694924; 17760460; 18546892; 19136716; 19202252; 19464396; 19529932; 19595468; 19726540; 17825818; 12910797; 12976333; 13238477; 13369549; 13500621; 14287053; 14352589; 14418125; 14483661; 14549197; 14876877; 15007949; 15073485; 16580813; 16777421; 17301709; 17629389; 17694925; 17760461; 18546893; 19136717; 19202253; 19464397; 19529933; 19595469; 19726541; 17891353; 12976334; 13238478; 13369550; 13500622; 14287054; 14352590; 14418126; 14483662; 14549198; 14876878; 15007950; 15073486; 16580814; 16777422; 17301710; 17629390; 17694926; 17760462; 18546894; 19136718; 19202254; 19464398; 19529934; 19595470; 19726542; 18087962; 12910799; 12976335; 13238479; 13369551; 13500623; 14287055; 14352591; 14418127; 14483663; 14549199; 14876879; 15007951; 15073487; 16580815; 16777423; 17301711; 17629391; 17694927; 17760463; 18546895; 19136719; 19202255; 19464399; 19529935; 19595471; 19726543; 18153498; 12910800; 12976336; 13238480; 13369552; 13500624; 14287056; 14352592; 14418128; 14483664; 14549200; 14876880; 15007952; 15073488; 16580816; 16777424; 17301712; 17629392; 17694928; 17760464; 18546896; 19136720; 19202256; 19464400; 19529936; 19595472; 19726544; 18350106; 12910801; 12976337; 13238481; 13369553; 13500625; 14287057; 14352593; 14418129; 14483665; 14549201; 14876881; 15007953; 15073489; 16580817; 16777425; 17301713; 17629393; 17694929; 17760465; 18546897; 19136721; 19202257; 19464401; 19529937; 19595473; 19726545; 18481179; 12976338; 13238482; 13369554; 13500626; 13697234; 14287058; 14352594; 14418130; 14483666; 14549202; 14876882; 15007954; 15073490; 15794386; 16580818; 16777426; 17301714; 17629394; 17694930; 17760466; 18546898; 19136722; 19202258; 19464402; 19529938; 19595474; 19726546; 18546699; 12976339; 13369555; 13500627; 16777427; 17629395; 17694931; 17760467; 18546899; 19136723; 19202259; 19726547; 18743323; 12976340; 13238484; 13369556; 13500628; 13697236; 14287060; 14352596; 14418132; 14483668; 14549204; 14876884; 15007956; 15073492; 15794388; 16580820; 16777428; 17301716; 17629396; 17694932; 17760468; 18546900; 19136724; 19202260; 19464404; 19529940; 19595476; 19726548; 18808843; 12976341; 13369557; 13500629; 16777429; 17629397; 17694933; 17760469; 18546901; 19136725; 19202261; 19726549; 18874393; 12976342; 13238486; 13369558; 13500630; 14287062; 14352598; 14418134; 14483670; 14549206; 14876886; 15007958; 15073494; 16580822; 16777430; 17301718; 17629398; 17694934; 17760470; 18546902; 19136726; 19202262; 19464406; 19529942; 19595478; 19726550; 18939929; 12976343; 13238487; 13369559; 13500631; 14287063; 14352599; 14418135; 14483671; 14549207; 14876887; 15007959; 15073495; 16580823; 16777431; 17301719; 17629399; 17694935; 17760471; 18546903; 19136727; 19202263; 19464407; 19529943; 19595479; 19726551; 19005465; 12976344; 13238488; 13369560; 13500632; 14287064; 14352600; 14418136; 14483672; 14549208; 14876888; 15007960; 15073496; 16580824; 16777432; 17301720; 17629400; 17694936; 17760472; 18546904; 19136728; 19202264; 19464408; 19529944; 19595480; 19726552; 19070987; 12976345; 13369561; 13500633; 16777433; 17629401; 17694937; 17760473; 18546905; 19136729; 19202265; 19726553; 19136524; 12976346; 13369562; 13500634; 15532250; 16777434; 17629402; 17694938; 17760474; 18546906; 19136730; 19202266; 19726554; 19202060; 12976347; 13369563; 13500635; 15532251; 16777435; 17629403; 17694939; 17760475; 18546907; 19136731; 19202267; 19726555; 19267596; 12976348; 13369564; 13500636; 15532252; 16777436; 17629404; 17694940; 17760476; 18546908; 19136732; 19202268; 19726556; 19333132; 12976349; 13369565; 13500637; 15532253; 16777437; 17629405; 17694941; 17760477; 18546909; 19136733; 19202269; 19726557; 19529755; 12910814; 12976350; 13238494; 13369566; 13500638; 14287070; 14352606; 14418142; 14483678; 14549214; 14876894; 15007966; 15073502; 16580830; 16777438; 17301726; 17498334; 17629406; 17694942; 17760478; 18546910; 19136734; 19202270; 19464414; 19529950; 19595486; 19726558; 19595293; 12910815; 12976351; 13238495; 13369567; 13500639; 14287071; 14352607; 14418143; 14483679; 14549215; 14876895; 15007967; 15073503; 16580831; 16777439; 17105119; 17301727; 17498335; 17563871; 17629407; 17694943; 17760479; 18546911; 19136735; 19202271; 19464415; 19529951; 19595487; 19726559; 19660827; 12910816; 12976352; 13238496; 13369568; 13500640; 14287072; 14352608; 14418144; 14483680; 14549216; 14876896; 15007968; 15073504; 16580832; 16777440; 17301728; 17498336; 17629408; 17694944; 17760480; 18546912; 19136736; 19202272; 19464416; 19529952; 19595488; 19726560; 19726364; 12910817; 12976353; 13238497; 13369569; 13500641; 14287073; 14352609; 14418145; 14483681; 14549217; 14876897; 15007969; 15073505; 16580833; 16777441; 17301729; 17498337; 17563873; 17629409; 17694945; 17760481; 18546913; 19136737; 19202273; 19464417; 19529953; 19595489; 19726561; 19791899; 12910818; 12976354; 13238498; 13369570; 13500642; 14287074; 14352610; 14418146; 14483682; 14549218; 14876898; 15007970; 15073506; 16580834; 16777442; 17301730; 17498338; 17629410; 17694946; 17760482; 18546914; 19136738; 19202274; 19464418; 19529954; 19595490; 19726562; 19857435; 12910819; 12976355; 13238499; 13369571; 13500643; 14287075; 14352611; 14418147; 14483683; 14549219; 14876899; 15007971; 15073507; 16580835; 16777443; 17301731; 17498339; 17629411; 17694947; 17760483; 18546915; 19136739; 19202275; 19464419; 19529955; 19595491; 19726563; 19922971; 12910820; 12976356; 13238500; 13369572; 13500644; 14287076; 14352612; 14418148; 14483684; 14549220; 14876900; 15007972; 15073508; 16580836; 16777444; 17301732; 17498340; 17629412; 17694948; 17760484; 18546916; 19136740; 19202276; 19464420; 19529956; 19595492; 19726564; 20119553; 19464421; 20250627; 15466726; 17891558; 19464422; 20316161; 19464423; 20381697; 17891560; 20512795; 12910825; 12976361; 13238505; 13369577; 13500649; 14287081; 14352617; 14418153; 14483689; 14549225; 14876905; 15007977; 15073513; 16580841; 16777449; 17301737; 17498345; 17629417; 17694953; 17760489; 18546921; 19136745; 19202281; 19464425; 19529961; 19595497; 19726569; 20840449; 19464426; 20971548; 12910827; 12976363; 13238507; 13369579; 13500651; 14287083; 14352619; 14418155; 14483691; 14549227; 14876907; 15007979; 15073515; 16580843; 16777451; 17301739; 17498347; 17563883; 17629419; 17694955; 17760491; 18546923; 19136747; 19202283; 19464427; 19529963; 19595499; 19726571; 21037084; 12910828; 12976364; 13238508; 13369580; 13500652; 14287084; 14352620; 14418156; 14483692; 14549228; 14876908; 15007980; 15073516; 16580844; 16777452; 17301740; 17498348; 17563884; 17629420; 17694956; 17760492; 18546924; 19136748; 19202284; 19464428; 19529964; 19595500; 19726572; 21102620; 12910829; 12976365; 13238509; 13369581; 13500653; 14287085; 14352621; 14418157; 14483693; 14549229; 14876909; 15007981; 15073517; 16580845; 16777453; 17301741; 17498349; 17563885; 17629421; 17694957; 17760493; 18546925; 19136749; 19202285; 19464429; 19529965; 19595501; 19726573; 21364764; 12910830; 12976366; 13238510; 13369582; 13500654; 14287086; 14352622; 14418158; 14483694; 14549230; 14876910; 15007982; 15073518; 16580846; 16777454; 17301742; 17498350; 17563886; 17629422; 17694958; 17760494; 18546926; 19136750; 19202286; 19464430; 19529966; 19595502; 19726574; 21430273; 19464431; 21495809; 19464432; 21561345; 17760497; 21692445; 12910834; 12976370; 13238514; 13369586; 13500658; 14287090; 14352626; 14418162; 14483698; 14549234; 14876914; 15007986; 15073522; 16580850; 16777458; 17105138; 17301746; 17498354; 17563890; 17629426; 17694962; 17760498; 18546930; 19136754; 19202290; 19464434; 19529970; 19595506; 19726578; 21757953; 13500659; 21823514; 12976372; 13238516; 13369588; 13500660; 14287092
                                        ; 14352628; 14418164; 14483700; 14549236; 14876916; 15007988; 15073524; 16580852; 16777460; 17301748; 17498356; 17629428; 17694964; 17760500; 18546932; 19136756; 19202292; 19464436; 19529972; 19595508; 19726580; 21889050; 12976373; 13238517; 13369589; 13500661; 14287093; 14352629; 14418165; 14483701; 14549237; 14876917; 15007989; 15073525; 16580853; 16777461; 17301749; 17498357; 17629429; 17694965; 17760501; 18546933; 19136757; 19202293; 19464437; 19529973; 19595509; 19726581; 21954586; 12976374; 13238518; 13369590; 13500662; 14287094; 14352630; 14418166; 14483702; 14549238; 14876918; 15007990; 15073526; 16580854; 16777462; 17301750; 17498358; 17629430; 17694966; 17760502; 18546934; 19136758; 19202294; 19464438; 19529974; 19595510; 19726582; 22085659; 12910839; 12976375; 13238519; 13369591; 13500663; 14287095; 14352631; 14418167; 14483703; 14549239; 14876919; 15007991; 15073527; 16580855; 16777463; 17301751; 17498359; 17629431; 17694967; 17760503; 18546935; 19136759; 19202295; 19464439; 19529975; 19595511; 19726583; 22151197; 12910840; 12976376; 13238520; 13369592; 13500664; 14287096; 14352632; 14418168; 14483704; 14549240; 14876920; 15007992; 15073528; 16580856; 16777464; 17105144; 17301752; 17498360; 17563896; 17629432; 17694968; 17760504; 18546936; 19136760; 19202296; 19464440; 19529976; 19595512; 19726584; 22216731; 12910841; 12976377; 13238521; 13369593; 13500665; 14287097; 14352633; 14418169; 14483705; 14549241; 14876921; 15007993; 15073529; 16580857; 16777465; 17301753; 17498361; 17629433; 17694969; 17760505; 18546937; 19136761; 19202297; 19464441; 19529977; 19595513; 19726585; 22282268; 12910842; 12976378; 13238522; 13369594; 13500666; 14287098; 14352634; 14418170; 14483706; 14549242; 14876922; 15007994; 15073530; 16580858; 16777466; 17301754; 17498362; 17563898; 17629434; 17694970; 17760506; 18546938; 19136762; 19202298; 19464442; 19529978; 19595514; 19726586; 22347803; 12910843; 12976379; 13238523; 13369595; 13500667; 14287099; 14352635; 14418171; 14483707; 14549243; 14876923; 15007995; 15073531; 16580859; 16777467; 17301755; 17498363; 17629435; 17694971; 17760507; 18546939; 19136763; 19202299; 19464443; 19529979; 19595515; 19726587; 22413339; 12910844; 12976380; 13238524; 13369596; 13500668; 14287100; 14352636; 14418172; 14483708; 14549244; 14876924; 15007996; 15073532; 16580860; 16777468; 17301756; 17498364; 17629436; 17694972; 17760508; 18546940; 19136764; 19202300; 19464444; 19529980; 19595516; 19726588; 22478875; 12910845; 12976381; 13238525; 13369597; 13500669; 14287101; 14352637; 14418173; 14483709; 14549245; 14876925; 15007997; 15073533; 16580861; 16777469; 17301757; 17498365; 17629437; 17694973; 17760509; 18546941; 19136765; 19202301; 19464445; 19529981; 19595517; 19726589; 22675457; 19464446; 22740993; 19464447; 22872091; 12910848; 12976384; 13238528; 13369600; 13500672; 14287104; 14352640; 14418176; 14483712; 14549248; 14876928; 15008000; 15073536; 16580864; 16777472; 17301760; 17498368; 17629440; 17694976; 17760512; 18546944; 19136768; 19202304; 19464448; 19529984; 19595520; 19726592; 23003165; 12910849; 12976385; 13238529; 13369601; 13500673; 14287105; 14352641; 14418177; 14483713; 14549249; 14876929; 15008001; 15073537; 16580865; 16777473; 17105153; 17301761; 17498369; 17563905; 17629441; 17694977; 17760513; 18546945; 19136769; 19202305; 19464449; 19529985; 19595521; 19726593; 23068673; 13500674; 23134235; 12910851; 12976387; 13238531; 13369603; 13500675; 14287107; 14352643; 14418179; 14483715; 14549251; 14876931; 15008003; 15073539; 16580867; 16777475; 17301763; 17498371; 17629443; 17694979; 17760515; 18546947; 19136771; 19202307; 19464451; 19529987; 19595523; 19726595; 23199775; 12910852; 12976388; 13107232; 13238532; 13369604; 13500676; 13762592; 14287108; 14352644; 14418180; 14483716; 14549252; 14876932; 15008004; 15073540; 16580868; 16777476; 17104928; 17301764; 17498372; 17563680; 17629444; 17694980; 17760516; 18546948; 19136772; 19202308; 19464452; 19529988; 19595524; 19726596; 23265307; 12910853; 12976389; 13238533; 13369605; 13500677; 14287109; 14352645; 14418181; 14483717; 14549253; 14876933; 15008005; 15073541; 16580869; 16777477; 17301765; 17498373; 17629445; 17694981; 17760517; 18546949; 19136773; 19202309; 19464453; 19529989; 19595525; 19726597; 23330843; 12910854; 12976390; 13238534; 13369606; 13500678; 14287110; 14352646; 14418182; 14483718; 14549254; 14876934; 15008006; 15073542; 16580870; 16777478; 17301766; 17498374; 17629446; 17694982; 17760518; 18546950; 19136774; 19202310; 19464454; 19529990; 19595526; 19726598; 23461915; 12910855; 12976391; 13238535; 13369607; 13500679; 14287111; 14352647; 14418183; 14483719; 14549255; 14876935; 15008007; 15073543; 16580871; 16777479; 17301767; 17498375; 17629447; 17694983; 17760519; 18546951; 19136775; 19202311; 19464455; 19529991; 19595527; 19726599; 23527425; 13500680; 23592986; 12976393; 13238537; 13369609; 13500681; 14287113; 14352649; 14418185; 14483721; 14549257; 14876937; 15008009; 15073545; 16580873; 16777481; 17301769; 17498377; 17629449; 17694985; 17760521; 18546953; 19136777; 19202313; 19464457; 19529993; 19595529; 19726601; 23658522; 12976394; 13238538; 13369610; 13500682; 14287114; 14352650; 14418186; 14483722; 14549258; 14876938; 15008010; 15073546; 16580874; 16777482; 17301770; 17498378; 17629450; 17694986; 17760522; 18546954; 19136778; 19202314; 19464458; 19529994; 19595530; 19726602; 23724058; 12976395; 13238539; 13369611; 13500683; 14287115; 14352651; 14418187; 14483723; 14549259; 14876939; 15008011; 15073547; 16580875; 16777483; 17301771; 17498379; 17629451; 17694987; 17760523; 18546955; 19136779; 19202315; 19464459; 19529995; 19595531; 19726603; 23789599; 12910860; 12976396; 13107232; 13238540; 13369612; 13500684; 13762592; 14287116; 14352652; 14418188; 14483724; 14549260; 14876940; 15008012; 15073548; 16580876; 16777484; 17104928; 17301772; 17498380; 17563680; 17629452; 17694988; 17760524; 18546956; 19136780; 19202316; 19464460; 19529996; 19595532; 19726604; 23855131; 12910861; 12976397; 13238541; 13369613; 13500685; 14287117; 14352653; 14418189; 14483725; 14549261; 14876941; 15008013; 15073549; 16580877; 16777485; 17301773; 17498381; 17629453; 17694989; 17760525; 18546957; 19136781; 19202317; 19464461; 19529997; 19595533; 19726605; 23920667; 12910862; 12976398; 13238542; 13369614; 13500686; 14287118; 14352654; 14418190; 14483726; 14549262; 14876942; 15008014; 15073550; 16580878; 16777486; 17301774; 17498382; 17629454; 17694990; 17760526; 18546958; 19136782; 19202318; 19464462; 19529998; 19595534; 19726606; 24051739; 12910863; 12976399; 13238543; 13369615; 13500687; 14287119; 14352655; 14418191; 14483727; 14549263; 14876943; 15008015; 15073551; 16580879; 16777487; 17301775; 17498383; 17629455; 17694991; 17760527; 18546959; 19136783; 19202319; 19464463; 19529999; 19595535; 19726607; 24117249; 13500688; 24182830; 12910865; 12976401; 13107232; 13238545; 13369617; 13500689; 13762592; 14287121; 14352657; 14418193; 14483729; 14549265; 14745873; 14876945; 15008017; 15073553; 16580881; 16777489; 17301777; 17498385; 17629457; 17694993; 17760529; 18087968; 18153504; 18219040; 18284576; 18350112; 18415648; 18481184; 18546961; 18612256; 18677792; 18743328; 18808864; 18874400; 18939936; 19005472; 19071008; 19136785; 19202321; 19267616; 19464465; 19530001; 19595537; 19726609; 24248348; 12910866; 12976402; 13238546; 13369618; 13500690; 14287122; 14352658; 14418194; 14483730; 14549266; 14745874; 14876946; 15008018; 15073554; 16580882; 16777490; 17301778; 17498386; 17629458; 17694994; 17760530; 18546962; 19136786; 19202322; 19464466; 19530002; 19595538; 19726610; 24379420; 12910867; 12976403; 13238547; 13369619; 13500691; 14287123; 14352659; 14418195; 14483731; 14549267; 14745875; 14876947; 15008019; 15073555; 16580883; 16777491; 17301779; 17498387; 17629459; 17694995; 17760531; 18546963; 19136787; 19202323; 19464467; 19530003; 19595539; 19726611; 24444956; 12910868; 12976404; 13238548; 13369620; 13500692; 14287124; 14352660; 14418196; 14483732; 14549268; 14745876; 14876948; 15008020; 15073556; 16580884; 16777492; 17301780; 17498388; 17629460; 17694996; 17760532; 18546964; 19136788; 19202324; 19464468; 19530004; 19595540; 19726612; 24641564; 12910869; 12976405; 13238549; 13369621; 13500693; 14287125; 14352661; 14418197; 14483733; 14549269; 14745877; 14876949; 15008021; 15073557; 16580885; 16777493; 17301781; 17498389; 17629461; 17694997; 17760533; 18546965; 19136789; 19202325; 19464469; 19530005; 19595541; 19726613; 24707073; 19464470; 24772636; 12910871; 12976407; 13238551; 13369623; 13500695; 14287127; 14352663; 14418199; 14483735; 14549271; 14745879; 14876951; 15008023; 15073559; 16580887; 16777495; 17301783; 17498391; 17629463; 17694999; 17760535; 18546967; 19136791; 19202327; 19464471; 19530007; 19595543; 19726615; 24838145; 13500696; 24903681; 13500697; 25034780; 12910874; 12976410; 13238554; 13369626; 13500698; 14287130; 14352666; 14418202; 14483738; 14549274; 14745882; 14876954; 15008026; 15073562; 16580890; 16777498; 17301786; 17498394; 17629466; 17695002; 17760538; 18546970; 19136794; 19202330; 19464474; 19530010; 19595546; 19726618; 25100316; 12910875; 12976411; 13238555; 13369627; 13500699; 14287131; 14352667; 14418203; 14483739; 14549275; 14745883; 14876955; 15008027; 15073563; 16580891; 16777499; 17301787; 17498395; 17629467; 17695003; 17760539; 18546971; 19136795; 19202331; 19464475; 19530011; 19595547; 19726619; 25165846; 12976412; 13238556; 13369628; 13500700; 14287132; 14352668; 14483740; 14549276; 14876956; 15073564; 16580892; 16777500; 17629468; 17695004; 17760540; 18546972; 19136796; 19202332; 19464476; 19530012; 19595548; 19726620; 25231361; 16777501; 25296897; 16777502; 25362433; 16777503; 25427969; 16777504; 25493505; 16777505; 25690134; 12976418; 13238562; 13369634; 13500706; 14287138; 14352674; 14483746; 14549282; 14876962; 15073570; 16580898; 16777506; 17629474; 17695010; 17760546; 18546978; 19136802; 19202338; 19464482; 19530018; 19595554; 19726626; 25755673; 12976419; 13238563; 13369635; 13500707; 14287139; 14352675; 14418211; 14483747; 14549283; 14876963; 15008035; 15073571; 16580899; 16777507; 17301795; 17629475; 17695011; 17760547; 18546979; 19136803; 19202339; 19464483; 19530019; 19595555; 19726627; 25952281; 12976420; 13238564; 13369636; 13500708; 14287140; 14352676; 14418212; 14483748; 14549284; 14876964; 15008036; 15073572; 16580900; 16777508; 17301796; 17629476; 17695012; 17760548; 18546980; 19136804; 19202340; 19464484; 19530020; 19595556; 19726628; 26083331; 13500709
                                        ; 17629477; 17695013; 26214421; 12976422; 13238566; 13369638; 13500710; 14287142; 14352678; 14483750; 14549286; 14876966; 16580902; 16777510; 17563942; 17629478; 17695014; 17760550; 18546982; 19136806; 19202342; 19530022; 19595558; 19726630; 26279957; 12976423; 13238567; 13369639; 13500711; 14287143; 14352679; 14483751; 14549287; 14876967; 16580903; 16777511; 17563943; 17629479; 17695015; 17760551; 18546983; 19136807; 19202343; 19530023; 19595559; 19726631; 26345493; 12976424; 13238568; 13369640; 13500712; 14287144; 14352680; 14483752; 14549288; 14876968; 16580904; 16777512; 17563944; 17629480; 17695016; 17760552; 18546984; 19136808; 19202344; 19530024; 19595560; 19726632; 26476565; 12976425; 13238569; 13369641; 13500713; 14287145; 14352681; 14483753; 14549289; 14876969; 16580905; 16777513; 17563945; 17629481; 17695017; 17760553; 18546985; 19136809; 19202345; 19530025; 19595561; 19726633; 26542100; 12976426; 13238570; 13369642; 13500714; 14287146; 14352682; 14483754; 14549290; 14876970; 16580906; 16777514; 17629482; 17695018; 17760554; 18546986; 19136810; 19202346; 19530026; 19595562; 19726634; 26607636; 12976427; 13238571; 13369643; 13500715; 14287147; 14352683; 14483755; 14549291; 14876971; 16580907; 16777515; 17629483; 17695019; 17760555; 18546987; 19136811; 19202347; 19530027; 19595563; 19726635; 26673172; 12976428; 13238572; 13369644; 13500716; 14287148; 14352684; 14483756; 14549292; 14876972; 16580908; 16777516; 17629484; 17695020; 17760556; 18546988; 19136812; 19202348; 19530028; 19595564; 19726636; 26738708; 12976429; 13238573; 13369645; 13500717; 14287149; 14352685; 14483757; 14549293; 14876973; 16580909; 16777517; 17629485; 17695021; 17760557; 18546989; 19136813; 19202349; 19530029; 19595565; 19726637; 26804244; 12976430; 13238574; 13369646; 13500718; 14287150; 14352686; 14483758; 14549294; 14876974; 16580910; 16777518; 17629486; 17695022; 17760558; 18546990; 19136814; 19202350; 19530030; 19595566; 19726638; 26935316; 12976431; 13238575; 13369647; 13500719; 14287151; 14352687; 14483759; 14549295; 14876975; 16580911; 16777519; 17629487; 17695023; 17760559; 18546991; 19136815; 19202351; 19530031; 19595567; 19726639; 27000853; 12976432; 13238576; 13369648; 13500720; 14287152; 14352688; 14483760; 14549296; 14876976; 16580912; 16777520; 17563952; 17629488; 17695024; 17760560; 18546992; 19136816; 19202352; 19530032; 19595568; 19726640; 27066389; 12976433; 13238577; 13369649; 13500721; 14287153; 14352689; 14483761; 14549297; 14876977; 16580913; 16777521; 17563953; 17629489; 17695025; 17760561; 18546993; 19136817; 19202353; 19530033; 19595569; 19726641; 27197443; 13500722; 17629490; 17695026; 27262979; 13238579; 14352691; 19530035; 27525140; 12976436; 13238580; 13369652; 13500724; 14287156; 14352692; 14483764; 14549300; 14876980; 16580916; 16777524; 17629492; 17695028; 17760564; 18546996; 19136820; 19202356; 19530036; 19595572; 19726644; 27590676; 12976437; 13238581; 13369653; 13500725; 14287157; 14352693; 14483765; 14549301; 14876981; 16580917; 16777525; 17629493; 17695029; 17760565; 18546997; 19136821; 19202357; 19530037; 19595573; 19726645; 27656212; 12976438; 13238582; 13369654; 13500726; 14287158; 14352694; 14483766; 14549302; 14876982; 16580918; 16777526; 17629494; 17695030; 17760566; 18546998; 19136822; 19202358; 19530038; 19595574; 19726646; 27787284; 12976439; 13238583; 13369655; 13500727; 14287159; 14352695; 14483767; 14549303; 14876983; 16580919; 16777527; 17629495; 17695031; 17760567; 18546999; 19136823; 19202359; 19530039; 19595575; 19726647; 27852803; 13500728; 17629496; 17695032; 27918339; 13500729; 17629497; 17695033; 28180500; 12976442; 13238586; 13369658; 13500730; 14287162; 14352698; 14483770; 14549306; 14876986; 16580922; 16777530; 17629498; 17695034; 17760570; 18547002; 19136826; 19202362; 19530042; 19595578; 19726650; 28246036; 12976443; 13238587; 13369659; 13500731; 14287163; 14352699; 14483771; 14549307; 14876987; 16580923; 16777531; 17629499; 17695035; 17760571; 18547003; 19136827; 19202363; 19530043; 19595579; 19726651; 28311572; 12976444; 13238588; 13369660; 13500732; 14287164; 14352700; 14483772; 14549308; 14876988; 16580924; 16777532; 17629500; 17695036; 17760572; 18547004; 19136828; 19202364; 19530044; 19595580; 19726652; 28442625; 14352701; 28508161; 14352702; 28573707; 12976447; 13369663; 13500735; 16777535; 17629503; 17695039; 17760575; 18547007; 19136831; 19202367; 19726655; 28639243; 12976448; 13369664; 13500736; 16777536; 17629504; 17695040; 17760576; 18547008; 19136832; 19202368; 19726656; 28704779; 12976449; 13369665; 13500737; 16777537; 17629505; 17695041; 17760577; 18547009; 19136833; 19202369; 19726657; 28835860; 12976450; 13238594; 13369666; 13500738; 14287170; 14352706; 14483778; 14549314; 14876994; 16580930; 16777538; 17629506; 17695042; 17760578; 18547010; 19136834; 19202370; 19530050; 19595586; 19726658; 28966932; 12976451; 13238595; 13369667; 13500739; 14287171; 14352707; 14483779; 14549315; 14876995; 16580931; 16777539; 17629507; 17695043; 17760579; 18547011; 19136835; 19202371; 19530051; 19595587; 19726659; 29098012; 12910728; 12976264; 13238408; 13369480; 13500552; 14286984; 14352520; 14418056; 14483592; 14549128; 14745736; 14876808; 15007880; 15073416; 16580744; 16777352; 17301640; 17498248; 17629320; 17694856; 17760392; 18546824; 19136648; 19202184; 19464328; 19529864; 19595400; 19726472; 29360148; 12976452; 13238596; 13369668; 13500740; 14287172; 14352708; 14483780; 14549316; 14876996; 16580932; 16777540; 17629508; 17695044; 17760580; 18547012; 19136836; 19202372; 19530052; 19595588; 19726660; 29425684; 12976453; 13238597; 13369669; 13500741; 14287173; 14352709; 14483781; 14549317; 14876997; 16580933; 16777541; 17629509; 17695045; 17760581; 18547013; 19136837; 19202373; 19530053; 19595589; 19726661; 29491220; 12976454; 13238598; 13369670; 13500742; 14287174; 14352710; 14483782; 14549318; 14876998; 16580934; 16777542; 17629510; 17695046; 17760582; 18547014; 19136838; 19202374; 19530054; 19595590; 19726662; 29622292; 12976455; 13238599; 13369671; 13500743; 14287175; 14352711; 14483783; 14549319; 14876999; 16580935; 16777543; 17629511; 17695047; 17760583; 18547015; 19136839; 19202375; 19530055; 19595591; 19726663; 29687828; 12976456; 13238600; 13369672; 13500744; 14287176; 14352712; 14483784; 14549320; 14877000; 16580936; 16777544; 17629512; 17695048; 17760584; 18547016; 19136840; 19202376; 19530056; 19595592; 19726664; 29753364; 12976457; 13238601; 13369673; 13500745; 14287177; 14352713; 14483785; 14549321; 14877001; 16580937; 16777545; 17629513; 17695049; 17760585; 18547017; 19136841; 19202377; 19530057; 19595593; 19726665; 29884417; 18284874; 30081044; 12976459; 13238603; 13369675; 13500747; 14287179; 14352715; 14483787; 14549323; 14877003; 16580939; 16777547; 17629515; 17695051; 17760587; 18547019; 19136843; 19202379; 19530059; 19595595; 19726667; 30146580; 12976460; 13238604; 13369676; 13500748; 14287180; 14352716; 14483788; 14549324; 14877004; 16580940; 16777548; 17629516; 17695052; 17760588; 18547020; 19136844; 19202380; 19530060; 19595596; 19726668; 30212133; 12976160; 13107232; 13238304; 13369376; 13500448; 14286880; 14352416; 14483488; 14549024; 14876704; 16580640; 16777248; 17629216; 17694752; 17760288; 18087968; 18153504; 18219040; 18284576; 18350112; 18415648; 18481184; 18546720; 18612256; 18677792; 18743328; 18808864; 18874400; 18939936; 19005472; 19071008; 19136544; 19202080; 19267616; 19529760; 19595296; 19726368; 30343188; 12976461; 13238605; 13369677; 13500749; 14287181; 14352717; 14483789; 14549325; 14877005; 16580941; 16777549; 17629517; 17695053; 17760589; 18547021; 19136845; 19202381; 19530061; 19595597; 19726669; 30408705; 13500750; 30474241; 13500751; 30605313; 18284880; 30736404; 12976465; 13238609; 13369681; 13500753; 14287185; 14352721; 14483793; 14549329; 14877009; 16580945; 16777553; 17629521; 17695057; 17760593; 18547025; 19136849; 19202385; 19530065; 19595601; 19726673; 30801940; 12976466; 13238610; 13369682; 13500754; 14287186; 14352722; 14483794; 14549330; 14877010; 16580946; 16777554; 17629522; 17695058; 17760594; 18547026; 19136850; 19202386; 19530066; 19595602; 19726674; 30867476; 12976467; 13238611; 13369683; 13500755; 14287187; 14352723; 14483795; 14549331; 14877011; 16580947; 16777555; 17629523; 17695059; 17760595; 18547027; 19136851; 19202387; 19530067; 19595603; 19726675; 30998548; 12976468; 13238612; 13369684; 13500756; 14287188; 14352724; 14483796; 14549332; 14877012; 16580948; 16777556; 17629524; 17695060; 17760596; 18547028; 19136852; 19202388; 19530068; 19595604; 19726676; 31064084; 12976469; 13238613; 13369685; 13500757; 14287189; 14352725; 14483797; 14549333; 14877013; 16580949; 16777557; 17629525; 17695061; 17760597; 18547029; 19136853; 19202389; 19530069; 19595605; 19726677; 31129620; 12976470; 13238614; 13369686; 13500758; 14287190; 14352726; 14483798; 14549334; 14877014; 16580950; 16777558; 17629526; 17695062; 17760598; 18547030; 19136854; 19202390; 19530070; 19595606; 19726678; 31195137; 13238615; 31260673; 13238616; 31326209; 13238617; 31391745; 13238618; 31457282; 13238619; 19530075; 31522836; 12976476; 13238620; 13369692; 13500764; 14287196; 14352732; 14483804; 14549340; 14877020; 16580956; 16777564; 17629532; 17695068; 17760604; 18547036; 19136860; 19202396; 19530076; 19595612; 19726684; 31653889; 13762909; 31784962; 13762910; 14680414; 31981572; 13762911; 14483807; 14549343; 14680415; 32047108; 13762912; 14483808; 14549344; 14680416; 32112644; 13762913; 14483809; 14549345; 14680417; 32178180; 13762914; 14483810; 14549346; 14680418; 32243716; 13762915; 14483811; 14549347; 14680419; 32309250; 13762916; 14680420; 32374785; 13762917; 32440321; 13762918; 32505858; 13762919; 14680423; 32571395; 13762920; 14680424; 17564008; 32636931; 13762921; 14680425; 17564009; 32768004; 13762922; 14680426; 17564010; 17695082; 32833538; 13500779; 17629547; 32899074; 13500780; 17629548; 33161217; 13238637; 33226753; 13238638|]
let reduces = Array.zeroCreate 508
for i = 0 to 507 do
        reduces.[i] <- Array.zeroCreate 303
cur <- 0
while cur < small_reduces.Length do
    let i = small_reduces.[cur] >>> 16
    let length = small_reduces.[cur] &&& 65535
    cur <- cur + 1
    for k = 0 to length-1 do
        let j = small_reduces.[cur + k] >>> 16
        let x = small_reduces.[cur + k] &&& 65535
        reduces.[i].[j] <- lists_reduces.[x]
    cur <- cur + length
let private lists_zeroReduces = [|[|360|]; [|358|]; [|356|]; [|364|]; [|373|]; [|371|]; [|369|]; [|367|]; [|375|]; [|146|]; [|191|]; [|193|]; [|187|]; [|185|]; [|189|]; [|352|]; [|350|]; [|348|]; [|344|]; [|153|]; [|318|]; [|346|]; [|326|]; [|321|]; [|314|]; [|306|]; [|308; 306|]; [|294|]; [|304|]; [|296|]; [|298; 296|]; [|300|]; [|302|]; [|291|]; [|289|]; [|278|]; [|276|]; [|282|]; [|284|]; [|271|]; [|269|]; [|286|]; [|264|]; [|266; 264|]; [|262|]; [|258|]; [|226|]; [|233|]; [|231|]; [|229|]; [|238|]; [|250|]; [|252; 250|]; [|248|]; [|244|]; [|240|]; [|242; 240|]; [|254|]; [|256; 254|]; [|310|]; [|312|]; [|323|]; [|223|]; [|221|]; [|219|]; [|217|]; [|331|]; [|329|]; [|210|]; [|342|]; [|340|]|]
let private small_zeroReduces =
        [|524290; 13500416; 17629184; 851972; 13762561; 14680065; 17563649; 17694721; 983043; 13762562; 14680066; 17563650; 1048579; 13762563; 14680067; 17563651; 1114115; 13762563; 14680067; 17563651; 1376264; 12910596; 13762564; 14680068; 15859716; 15925252; 16187396; 17563652; 18284548; 1441799; 12910597; 13762565; 14680069; 15859717; 15925253; 16187397; 17563653; 1572869; 12910598; 13762566; 14680070; 16187398; 17563654; 1703940; 12910599; 13762567; 14680071; 17563655; 2424847; 13893640; 13959176; 14090248; 14221320; 14614536; 14942216; 15335432; 15400968; 15663112; 15728648; 16252936; 16908296; 16973832; 17235976; 17367048; 2621494; 12910601; 12976137; 13107209; 13238281; 13369353; 13500425; 13697033; 13762569; 14286857; 14352393; 14417929; 14483465; 14549001; 14745609; 14876681; 15007753; 15073289; 15138825; 15204361; 15532041; 15794185; 16580617; 16777225; 17104905; 17170441; 17301513; 17498121; 17563657; 17629193; 17694729; 17760265; 18087945; 18153481; 18219017; 18284553; 18350089; 18415625; 18481161; 18546697; 18612233; 18677769; 18743305; 18808841; 18874377; 18939913; 19005449; 19070985; 19136521; 19202057; 19267593; 19464201; 19529737; 19595273; 19726345; 2687030; 12910601; 12976137; 13107209; 13238281; 13369353; 13500425; 13697033; 13762569; 14286857; 14352393; 14417929; 14483465; 14549001; 14745609; 14876681; 15007753; 15073289; 15138825; 15204361; 15532041; 15794185; 16580617; 16777225; 17104905; 17170441; 17301513; 17498121; 17563657; 17629193; 17694729; 17760265; 18087945; 18153481; 18219017; 18284553; 18350089; 18415625; 18481161; 18546697; 18612233; 18677769; 18743305; 18808841; 18874377; 18939913; 19005449; 19070985; 19136521; 19202057; 19267593; 19464201; 19529737; 19595273; 19726345; 3604509; 12910602; 12976138; 13238282; 13369354; 13500426; 13762570; 14286858; 14352394; 14483466; 14549002; 14680074; 14876682; 15859722; 15925258; 16187402; 16580618; 16777226; 17432586; 17563658; 17629194; 17694730; 17760266; 18284554; 18546698; 19136522; 19202058; 19529738; 19595274; 19726346; 4063261; 12910603; 12976139; 13238283; 13369355; 13500427; 13762571; 14286859; 14352395; 14483467; 14549003; 14680075; 14876683; 15859723; 15925259; 16187403; 16580619; 16777227; 17432587; 17563659; 17629195; 17694731; 17760267; 18284555; 18546699; 19136523; 19202059; 19529739; 19595275; 19726347; 4587549; 12910604; 12976140; 13238284; 13369356; 13500428; 13762572; 14286860; 14352396; 14483468; 14549004; 14680076; 14876684; 15859724; 15925260; 16187404; 16580620; 16777228; 17432588; 17563660; 17629196; 17694732; 17760268; 18284556; 18546700; 19136524; 19202060; 19529740; 19595276; 19726348; 5046301; 12910605; 12976141; 13238285; 13369357; 13500429; 13762573; 14286861; 14352397; 14483469; 14549005; 14680077; 14876685; 15859725; 15925261; 16187405; 16580621; 16777229; 17432589; 17563661; 17629197; 17694733; 17760269; 18284557; 18546701; 19136525; 19202061; 19529741; 19595277; 19726349; 5832733; 12910606; 12976142; 13238286; 13369358; 13500430; 13762574; 14286862; 14352398; 14483470; 14549006; 14680078; 14876686; 15859726; 15925262; 16187406; 16580622; 16777230; 17432590; 17563662; 17629198; 17694734; 17760270; 18284558; 18546702; 19136526; 19202062; 19529742; 19595278; 19726350; 6488066; 13762575; 14680079; 6619137; 13762576; 6815764; 12976145; 13238289; 13369361; 13500433; 14286865; 14352401; 14483473; 14549009; 14876689; 16580625; 16777233; 17629201; 17694737; 17760273; 18546705; 19136529; 19202065; 19529745; 19595281; 19726353; 6881283; 13238290; 14352402; 19529746; 7077889; 19464211; 7274497; 19464212; 9895937; 19464212; 10354708; 12976149; 13238293; 13369365; 13500437; 14286869; 14352405; 14483477; 14549013; 14876693; 16580629; 16777237; 17629205; 17694741; 17760277; 18546709; 19136533; 19202069; 19529749; 19595285; 19726357; 10551316; 12976150; 13238294; 13369366; 13500438; 14286870; 14352406; 14483478; 14549014; 14876694; 16580630; 16777238; 17629206; 17694742; 17760278; 18546710; 19136534; 19202070; 19529750; 19595286; 19726358; 11141123; 13238290; 14352402; 19529746; 11206678; 12976151; 13238295; 13369367; 13500439; 14286871; 14352407; 14483479; 14549015; 14876695; 15073303; 16580631; 16777239; 17629207; 17694743; 17760279; 18546711; 19136535; 19202071; 19464215; 19529751; 19595287; 19726359; 11468802; 13041688; 13500440; 11730972; 12910617; 12976153; 13238297; 13369369; 13500442; 14286873; 14352409; 14417945; 14483481; 14549017; 14745625; 14876697; 15007769; 15073305; 16580633; 16777241; 17301529; 17498137; 17629209; 17694745; 17760281; 18546713; 19136537; 19202073; 19464217; 19529753; 19595289; 19726361; 12124187; 12976155; 13238299; 13369371; 13500443; 14286875; 14352411; 14417947; 14483483; 14549019; 14745627; 14876699; 15007771; 15073307; 16580635; 16777243; 17301531; 17498139; 17629211; 17694747; 17760283; 18546715; 19136539; 19202075; 19464219; 19529755; 19595291; 19726363; 12189723; 12976155; 13238299; 13369371; 13500443; 14286875; 14352411; 14417947; 14483483; 14549019; 14745627; 14876699; 15007771; 15073307; 16580635; 16777243; 17301531; 17498139; 17629211; 17694747; 17760283; 18546715; 19136539; 19202075; 19464219; 19529755; 19595291; 19726363; 12320770; 13041692; 13500444; 12582940; 12910621; 12976157; 13238301; 13369373; 13500446; 14286877; 14352413; 14417949; 14483485; 14549021; 14745629; 14876701; 15007773; 15073309; 16580637; 16777245; 17301533; 17498141; 17629213; 17694749; 17760285; 18546717; 19136541; 19202077; 19464221; 19529757; 19595293; 19726365; 13697052; 12910623; 12976159; 13238303; 13369375; 13500447; 14286879; 14352415; 14417951; 14483487; 14549023; 14745631; 14876703; 15007775; 15073311; 16580639; 16777247; 17301535; 17498143; 17629215; 17694751; 17760287; 18546719; 19136543; 19202079; 19464223; 19529759; 19595295; 19726367; 14024705; 19464224; 15400986; 12976161; 13238305; 13369377; 13500449; 14286881; 14352417; 14417953; 14483489; 14549025; 14876705; 15007777; 15073313; 16580641; 16777249; 17301537; 17498145; 17629217; 17694753; 17760289; 18546721; 19136545; 19202081; 19464225; 19529761; 19595297; 19726369; 15532057; 12976162; 13238306; 13369378; 13500450; 14286882; 14352418; 14417954; 14483490; 14549026; 14876706; 15007778; 15073314; 16580642; 16777250; 17301538; 17629218; 17694754; 17760290; 18546722; 19136546; 19202082; 19464226; 19529762; 19595298; 19726370; 15728651; 12976163; 13369379; 13500451; 16777251; 17629219; 17694755; 17760291; 18546723; 19136547; 19202083; 19726371; 15859737; 12976164; 13238308; 13369380; 13500452; 14286884; 14352420; 14417956; 14483492; 14549028; 14876708; 15007780; 15073316; 16580644; 16777252; 17301540; 17629220; 17694756; 17760292; 18546724; 19136548; 19202084; 19464228; 19529764; 19595300; 19726372; 15925273; 12976165; 13238309; 13369381; 13500453; 14286885; 14352421; 14417957; 14483493; 14549029; 14876709; 15007781; 15073317; 16580645; 16777253; 17301541; 17629221; 17694757; 17760293; 18546725; 19136549; 19202085; 19464229; 19529765; 19595301; 19726373; 15990809; 12976165; 13238309; 13369381; 13500453; 14286885; 14352421; 14417957; 14483493; 14549029; 14876709; 15007781; 15073317; 16580645; 16777253; 17301541; 17629221; 17694757; 17760293; 18546725; 19136549; 19202085; 19464229; 19529765; 19595301; 19726373; 16252939; 12976166; 13369382; 13500454; 16777254; 17629222; 17694758; 17760294; 18546726; 19136550; 19202086; 19726374; 16449537; 15204391; 16908289; 15597608; 17694731; 12976163; 13369379; 13500451; 16777251; 17629219; 17694755; 17760291; 18546723; 19136547; 19202083; 19726371; 17956875; 12976169; 13369385; 13500457; 16777257; 17629225; 17694761; 17760297; 18546729; 19136553; 19202089; 19726377; 18219019; 12976163; 13369379; 13500451; 16777251; 17629219; 17694755; 17760291; 18546723; 19136547; 19202083; 19726371; 18612235; 12976163; 13369379; 13500451; 16777251; 17629219; 17694755; 17760291; 18546723; 19136547; 19202083; 19726371; 19398667; 12976163; 13369379; 13500451; 16777251; 17629219; 17694755; 17760291; 18546723; 19136547; 19202083; 19726371; 19529757; 12910634; 12976170; 13238314; 13369386; 13500459; 14286890; 14352426; 14417962; 14483498; 14549034; 14876714; 15007786; 15073322; 16580650; 16777258; 17104938; 17301546; 17498154; 17563690; 17629226; 17694762; 17760298; 18546730; 19136554; 19202090; 19464234; 19529770; 19595306; 19726378; 19660828; 12910636; 12976172; 13238316; 13369388; 13500460; 14286892; 14352428; 14417964; 14483500; 14549036; 14876716; 15007788; 15073324; 16580652; 16777260; 17301548; 17498156; 17563692; 17629228; 17694764; 17760300; 18546732; 19136556; 19202092; 19464236; 19529772; 19595308; 19726380; 19791899; 12910637; 12976173; 13238317; 13369389; 13500461; 14286893; 14352429; 14417965; 14483501; 14549037; 14876717; 15007789; 15073325; 16580653; 16777261; 17301549; 17498157; 17629229; 17694765; 17760301; 18546733; 19136557; 19202093; 19464237; 19529773; 19595309; 19726381; 20054017; 17891374; 20119553; 17891374; 20578305; 17760303; 20774913; 19464240; 20971548; 12910641; 12976177; 13238321; 13369393; 13500465; 14286897; 14352433; 14417969; 14483505; 14549041; 14876721; 15007793; 15073329; 16580657; 16777265; 17301553; 17498161; 17563697; 17629233; 17694769; 17760305; 18546737; 19136561; 19202097; 19464241; 19529777; 19595313; 19726385; 21823514; 12976178; 13238322; 13369394; 13500466; 14286898; 14352434; 14417970; 14483506; 14549042; 14876722; 15007794; 15073330; 16580658; 16777266; 17301554; 17498162; 17629234; 17694770; 17760306; 18546738; 19136562; 19202098; 19464242; 19529778; 19595314; 19726386; 21889050; 12976178; 13238322; 13369394; 13500466; 14286898; 14352434; 14417970; 14483506; 14549042; 14876722; 15007794; 15073330; 16580658; 16777266; 17301554; 17498162; 17629234; 17694770; 17760306; 18546738; 19136562; 19202098; 19464242; 19529778; 19595314; 19726386; 22085661; 12910643; 12976179; 13238323; 13369395; 13500468; 14286899; 14352435; 14417971; 14483507; 14549043; 14876723; 15007795; 15073331; 16580659; 16777267; 17104947; 17301555; 17498163; 17563699; 17629235; 17694771; 17760307; 18546739; 19136563; 19202099; 19464243; 19529779; 19595315; 19726387; 22216732; 12910645; 12976181; 13238325; 13369397; 13500469; 14286901; 14352437; 14417973; 14483509; 14549045; 14876725; 15007797; 15073333; 16580661; 16777269; 17301557; 17498165; 17563701; 17629237; 17694773; 17760309; 18546741; 19136565; 19202101; 19464245; 19529781; 19595317; 19726389; 22347803; 12910646; 12976182; 13238326; 13369398; 13500470; 14286902; 14352438; 14417974; 14483510; 14549046; 14876726; 15007798; 15073334; 16580662; 16777270; 17301558; 17498166; 17629238; 17694774; 17760310; 18546742; 19136566; 19202102; 19464246; 19529782; 19595318; 19726390
                                        ; 22609921; 17891374; 22675457; 17891374; 23199771; 12910647; 12976183; 13238327; 13369399; 13500472; 14286903; 14352439; 14417975; 14483511; 14549047; 14876727; 15007799; 15073335; 16580663; 16777271; 17301559; 17498167; 17629239; 17694775; 17760311; 18546743; 19136567; 19202103; 19464247; 19529783; 19595319; 19726391; 23789595; 12910649; 12976185; 13238329; 13369401; 13500474; 14286905; 14352441; 14417977; 14483513; 14549049; 14876729; 15007801; 15073337; 16580665; 16777273; 17301561; 17498169; 17629241; 17694777; 17760313; 18546745; 19136569; 19202105; 19464249; 19529785; 19595321; 19726393; 24182812; 12910651; 12976187; 13238331; 13369403; 13500475; 14286907; 14352443; 14417979; 14483515; 14549051; 14745659; 14876731; 15007803; 15073339; 16580667; 16777275; 17301563; 17498171; 17629243; 17694779; 17760315; 18546747; 19136571; 19202107; 19464251; 19529787; 19595323; 19726395; 24510465; 19464252; 25362433; 16777277; 26017795; 13500478; 17629246; 17694782; 26214421; 12976191; 13238335; 13369407; 13500479; 14286911; 14352447; 14483519; 14549055; 14876735; 16580671; 16777279; 17563711; 17629247; 17694783; 17760319; 18546751; 19136575; 19202111; 19529791; 19595327; 19726399; 26542100; 12976192; 13238336; 13369408; 13500480; 14286912; 14352448; 14483520; 14549056; 14876736; 16580672; 16777280; 17629248; 17694784; 17760320; 18546752; 19136576; 19202112; 19529792; 19595328; 19726400; 26673172; 12976193; 13238337; 13369409; 13500481; 14286913; 14352449; 14483521; 14549057; 14876737; 16580673; 16777281; 17629249; 17694785; 17760321; 18546753; 19136577; 19202113; 19529793; 19595329; 19726401; 27525140; 12976194; 13238338; 13369410; 13500482; 14286914; 14352450; 14483522; 14549058; 14876738; 16580674; 16777282; 17629250; 17694786; 17760322; 18546754; 19136578; 19202114; 19529794; 19595330; 19726402; 28377089; 14352451; 28442625; 14352451; 29032450; 13041688; 13500440; 29098012; 12910617; 12976153; 13238297; 13369369; 13500442; 14286873; 14352409; 14417945; 14483481; 14549017; 14745625; 14876697; 15007769; 15073305; 16580633; 16777241; 17301529; 17498137; 17629209; 17694745; 17760281; 18546713; 19136537; 19202073; 19464217; 19529753; 19595289; 19726361; 29818881; 18284612; 31195138; 13238341; 19529797; 31260673; 13238342|]
let zeroReduces = Array.zeroCreate 508
for i = 0 to 507 do
        zeroReduces.[i] <- Array.zeroCreate 303
cur <- 0
while cur < small_zeroReduces.Length do
    let i = small_zeroReduces.[cur] >>> 16
    let length = small_zeroReduces.[cur] &&& 65535
    cur <- cur + 1
    for k = 0 to length-1 do
        let j = small_zeroReduces.[cur + k] >>> 16
        let x = small_zeroReduces.[cur + k] &&& 65535
        zeroReduces.[i].[j] <- lists_zeroReduces.[x]
    cur <- cur + length
let private small_acc = [2]
let private accStates = Array.zeroCreate 508
for i = 0 to 507 do
        accStates.[i] <- List.exists ((=) i) small_acc
let eofIndex = 202
let private parserSource = new ParserSource<Token> (gotos, reduces, zeroReduces, accStates, rules, rulesStart, leftSide, startRule, eofIndex, tokenToNumber, acceptEmptyInput)
let buildAst : (seq<Token> -> ParseResult<Token>) =
    buildAst<Token> parserSource

let _rnglr_epsilons : Tree<Token>[] = [|null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; new Tree<_>(null,box (new AST(new Family(364, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(344, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(329, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(318, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(294, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(282, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(238, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(146, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(375, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(350, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(348, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(346, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(342, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(340, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(331, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(326, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(321, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(323, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(314, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(373, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(310, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(312, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(306, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(308, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(304, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(300, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(302, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(296, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(298, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(291, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(371, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(289, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(286, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(284, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(278, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(276, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(271, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(269, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(264, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(266, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(262, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(369, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(258, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(254, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(256, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(250, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(252, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(248, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(244, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(240, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(242, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(233, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(367, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(231, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(229, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(226, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(223, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(221, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(219, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(217, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(210, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(193, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(191, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(360, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(189, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(187, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(185, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(153, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(358, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(356, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(352, new Nodes([||])), null)), null); null; null; null; null; null; null; null; null; null; null; null; null; null; null|]
let _rnglr_filtered_epsilons : Tree<Token>[] = [|null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; null; new Tree<_>(null,box (new AST(new Family(364, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(344, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(329, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(318, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(294, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(282, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(238, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(146, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(375, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(350, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(348, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(346, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(342, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(340, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(331, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(326, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(321, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(323, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(314, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(373, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(310, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(312, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(306, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(308, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(304, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(300, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(302, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(296, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(298, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(291, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(371, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(289, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(286, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(284, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(278, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(276, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(271, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(269, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(264, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(266, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(262, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(369, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(258, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(254, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(256, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(250, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(252, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(248, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(244, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(240, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(242, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(233, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(367, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(231, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(229, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(226, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(223, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(221, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(219, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(217, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(210, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(193, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(191, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(360, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(189, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(187, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(185, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(153, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(358, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(356, new Nodes([||])), null)), null); new Tree<_>(null,box (new AST(new Family(352, new Nodes([||])), null)), null); null; null; null; null; null; null; null; null; null; null; null; null; null; null|]
for x in _rnglr_filtered_epsilons do if x <> null then x.ChooseSingleAst()
let _rnglr_extra_array, _rnglr_rule_, _rnglr_concats = 
  (Array.zeroCreate 0 : array<'_rnglr_type_binop * '_rnglr_type_create_proc * '_rnglr_type_execute_as * '_rnglr_type_execute_stmnt * '_rnglr_type_from_stmnt * '_rnglr_type_full_ident * '_rnglr_type_ident * '_rnglr_type_proc_body_stmnt * '_rnglr_type_proc_formal_param * '_rnglr_type_query_expression * '_rnglr_type_query_specification * '_rnglr_type_root_rule * '_rnglr_type_search_condition * '_rnglr_type_search_condition_predicate * '_rnglr_type_select_stmnt * '_rnglr_type_set_stmnt * '_rnglr_type_sql_datatype * '_rnglr_type_sql_expr * '_rnglr_type_sql_expr_lrecu * '_rnglr_type_sql_value * '_rnglr_type_start2 * '_rnglr_type_table_hint * '_rnglr_type_tablesample_clause * '_rnglr_type_yard_exp_brackets_11 * '_rnglr_type_yard_exp_brackets_12 * '_rnglr_type_yard_exp_brackets_13 * '_rnglr_type_yard_exp_brackets_14 * '_rnglr_type_yard_exp_brackets_15 * '_rnglr_type_yard_exp_brackets_16 * '_rnglr_type_yard_exp_brackets_17 * '_rnglr_type_yard_exp_brackets_18 * '_rnglr_type_yard_exp_brackets_19 * '_rnglr_type_yard_exp_brackets_20 * '_rnglr_type_yard_exp_brackets_21 * '_rnglr_type_yard_exp_brackets_22 * '_rnglr_type_yard_exp_brackets_23 * '_rnglr_type_yard_exp_brackets_24 * '_rnglr_type_yard_exp_brackets_25 * '_rnglr_type_yard_exp_brackets_26 * '_rnglr_type_yard_exp_brackets_27 * '_rnglr_type_yard_exp_brackets_28 * '_rnglr_type_yard_exp_brackets_29 * '_rnglr_type_yard_exp_brackets_30 * '_rnglr_type_yard_exp_brackets_31 * '_rnglr_type_yard_exp_brackets_32 * '_rnglr_type_yard_exp_brackets_33 * '_rnglr_type_yard_exp_brackets_34 * '_rnglr_type_yard_exp_brackets_35 * '_rnglr_type_yard_exp_brackets_36 * '_rnglr_type_yard_exp_brackets_37 * '_rnglr_type_yard_exp_brackets_38 * '_rnglr_type_yard_exp_brackets_39 * '_rnglr_type_yard_exp_brackets_40 * '_rnglr_type_yard_exp_brackets_41 * '_rnglr_type_yard_exp_brackets_42 * '_rnglr_type_yard_exp_brackets_43 * '_rnglr_type_yard_exp_brackets_44 * '_rnglr_type_yard_exp_brackets_45 * '_rnglr_type_yard_exp_brackets_46 * '_rnglr_type_yard_exp_brackets_47 * '_rnglr_type_yard_exp_brackets_48 * '_rnglr_type_yard_exp_brackets_49 * '_rnglr_type_yard_exp_brackets_50 * '_rnglr_type_yard_exp_brackets_51 * '_rnglr_type_yard_exp_brackets_52 * '_rnglr_type_yard_exp_brackets_53 * '_rnglr_type_yard_exp_brackets_54 * '_rnglr_type_yard_exp_brackets_55 * '_rnglr_type_yard_exp_brackets_56 * '_rnglr_type_yard_exp_brackets_57 * '_rnglr_type_yard_exp_brackets_58 * '_rnglr_type_yard_exp_brackets_59 * '_rnglr_type_yard_exp_brackets_60 * '_rnglr_type_yard_exp_brackets_61 * '_rnglr_type_yard_exp_brackets_62 * '_rnglr_type_yard_exp_brackets_63 * '_rnglr_type_yard_exp_brackets_64 * '_rnglr_type_yard_exp_brackets_65 * '_rnglr_type_yard_exp_brackets_66 * '_rnglr_type_yard_exp_brackets_67 * '_rnglr_type_yard_exp_brackets_68 * '_rnglr_type_yard_exp_brackets_69 * '_rnglr_type_yard_exp_brackets_70 * '_rnglr_type_yard_exp_brackets_71 * '_rnglr_type_yard_exp_brackets_72 * '_rnglr_type_yard_exp_brackets_73 * '_rnglr_type_yard_exp_brackets_74 * '_rnglr_type_yard_exp_brackets_75 * '_rnglr_type_yard_exp_brackets_76 * '_rnglr_type_yard_exp_brackets_77 * '_rnglr_type_yard_exp_brackets_78 * '_rnglr_type_yard_exp_brackets_79 * '_rnglr_type_yard_exp_brackets_80 * '_rnglr_type_yard_exp_brackets_81 * '_rnglr_type_yard_exp_brackets_82 * '_rnglr_type_yard_exp_brackets_83 * '_rnglr_type_yard_exp_brackets_84 * '_rnglr_type_yard_exp_brackets_85 * '_rnglr_type_yard_exp_brackets_86 * '_rnglr_type_yard_exp_brackets_87 * '_rnglr_type_yard_exp_brackets_88 * '_rnglr_type_yard_exp_brackets_89 * '_rnglr_type_yard_exp_brackets_90 * '_rnglr_type_yard_exp_brackets_91 * '_rnglr_type_yard_exp_brackets_92 * '_rnglr_type_yard_exp_brackets_93 * '_rnglr_type_yard_exp_brackets_94 * '_rnglr_type_yard_exp_brackets_95 * '_rnglr_type_yard_exp_brackets_96 * '_rnglr_type_yard_exp_brackets_97 * '_rnglr_type_yard_exp_brackets_98 * '_rnglr_type_yard_many_1 * '_rnglr_type_yard_many_2 * '_rnglr_type_yard_many_3 * '_rnglr_type_yard_many_4 * '_rnglr_type_yard_many_5 * '_rnglr_type_yard_many_6 * '_rnglr_type_yard_many_7 * '_rnglr_type_yard_many_8 * '_rnglr_type_yard_opt_1 * '_rnglr_type_yard_opt_10 * '_rnglr_type_yard_opt_11 * '_rnglr_type_yard_opt_12 * '_rnglr_type_yard_opt_13 * '_rnglr_type_yard_opt_14 * '_rnglr_type_yard_opt_15 * '_rnglr_type_yard_opt_16 * '_rnglr_type_yard_opt_17 * '_rnglr_type_yard_opt_18 * '_rnglr_type_yard_opt_19 * '_rnglr_type_yard_opt_2 * '_rnglr_type_yard_opt_20 * '_rnglr_type_yard_opt_21 * '_rnglr_type_yard_opt_22 * '_rnglr_type_yard_opt_23 * '_rnglr_type_yard_opt_24 * '_rnglr_type_yard_opt_25 * '_rnglr_type_yard_opt_26 * '_rnglr_type_yard_opt_27 * '_rnglr_type_yard_opt_28 * '_rnglr_type_yard_opt_29 * '_rnglr_type_yard_opt_3 * '_rnglr_type_yard_opt_30 * '_rnglr_type_yard_opt_31 * '_rnglr_type_yard_opt_32 * '_rnglr_type_yard_opt_33 * '_rnglr_type_yard_opt_34 * '_rnglr_type_yard_opt_35 * '_rnglr_type_yard_opt_36 * '_rnglr_type_yard_opt_37 * '_rnglr_type_yard_opt_38 * '_rnglr_type_yard_opt_39 * '_rnglr_type_yard_opt_4 * '_rnglr_type_yard_opt_40 * '_rnglr_type_yard_opt_41 * '_rnglr_type_yard_opt_42 * '_rnglr_type_yard_opt_43 * '_rnglr_type_yard_opt_44 * '_rnglr_type_yard_opt_45 * '_rnglr_type_yard_opt_46 * '_rnglr_type_yard_opt_47 * '_rnglr_type_yard_opt_48 * '_rnglr_type_yard_opt_49 * '_rnglr_type_yard_opt_5 * '_rnglr_type_yard_opt_50 * '_rnglr_type_yard_opt_51 * '_rnglr_type_yard_opt_52 * '_rnglr_type_yard_opt_53 * '_rnglr_type_yard_opt_54 * '_rnglr_type_yard_opt_55 * '_rnglr_type_yard_opt_56 * '_rnglr_type_yard_opt_57 * '_rnglr_type_yard_opt_58 * '_rnglr_type_yard_opt_59 * '_rnglr_type_yard_opt_6 * '_rnglr_type_yard_opt_60 * '_rnglr_type_yard_opt_61 * '_rnglr_type_yard_opt_62 * '_rnglr_type_yard_opt_63 * '_rnglr_type_yard_opt_7 * '_rnglr_type_yard_opt_8 * '_rnglr_type_yard_opt_9 * '_rnglr_type_yard_rule_comma_list_1 * '_rnglr_type_yard_rule_comma_list_3 * '_rnglr_type_yard_rule_comma_list_6 * '_rnglr_type_yard_rule_comma_list_8 * '_rnglr_type_yard_rule_list_10 * '_rnglr_type_yard_rule_list_2 * '_rnglr_type_yard_rule_list_4 * '_rnglr_type_yard_rule_list_5 * '_rnglr_type_yard_rule_list_7 * '_rnglr_type_yard_rule_list_9 * '_rnglr_type_yard_some_1 * '_rnglr_type_yard_some_2 * '_rnglr_type_yard_some_3 * '_rnglr_type_yard_start_rule>), 
  [|
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with DOLLAR _rnglr_val -> [_rnglr_val] | a -> failwith "DOLLAR expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with KW_ROWGUID _rnglr_val -> [_rnglr_val] | a -> failwith "KW_ROWGUID expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 59 "mssql.yrd"
                                                              S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_98) 
# 634 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with DOLLAR _rnglr_val -> [_rnglr_val] | a -> failwith "DOLLAR expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with KW_IDENTITY _rnglr_val -> [_rnglr_val] | a -> failwith "KW_IDENTITY expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 59 "mssql.yrd"
                                                              S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_97) 
# 656 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_98) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                

                S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_96) 
# 676 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_97) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                

                S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_96) 
# 696 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with IDENT _rnglr_val -> [_rnglr_val] | a -> failwith "IDENT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 59 "mssql.yrd"
                                                   S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_96) 
# 716 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with DOLLAR _rnglr_val -> [_rnglr_val] | a -> failwith "DOLLAR expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with KW_ROWGUID _rnglr_val -> [_rnglr_val] | a -> failwith "KW_ROWGUID expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 59 "mssql.yrd"
                                                              S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_95) 
# 738 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with DOLLAR _rnglr_val -> [_rnglr_val] | a -> failwith "DOLLAR expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with KW_IDENTITY _rnglr_val -> [_rnglr_val] | a -> failwith "KW_IDENTITY expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 59 "mssql.yrd"
                                                              S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_94) 
# 760 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with LPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "LPAREN expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_search_condition) 
               |> List.iter (fun (S2) -> 
                (match ((unbox _rnglr_children.[2]) : Token) with RPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "RPAREN expected, but %A found" a )
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 44 "mssql.yrd"
                                                 S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_93) 
# 784 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_search_condition_predicate) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 74 "mssql.yrd"
                             S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_93) 
# 804 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_OR _rnglr_val -> [_rnglr_val] | a -> failwith "KW_OR expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 76 "mssql.yrd"
                                S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_92) 
# 824 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_AND _rnglr_val -> [_rnglr_val] | a -> failwith "KW_AND expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 76 "mssql.yrd"
                       S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_92) 
# 844 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_sql_expr) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_27) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 32 "mssql.yrd"
                      S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_91) 
# 866 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with IDENT _rnglr_val -> [_rnglr_val] | a -> failwith "IDENT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_25) udt_column_runtime
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 59 "mssql.yrd"
                                                     S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_91) 
# 888 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_opt_24) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_exp_brackets_96) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 15 "mssql.yrd"
                                   S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_91) 
# 910 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_95) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                

                S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_90) 
# 930 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_94) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                

                S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_90) 
# 950 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with IDENT _rnglr_val -> [_rnglr_val] | a -> failwith "IDENT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 59 "mssql.yrd"
                                                   S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_90) 
# 970 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_MAX _rnglr_val -> [_rnglr_val] | a -> failwith "KW_MAX expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 132 "mssql.yrd"
                                                     S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_89) 
# 990 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with DEC_NUMBER _rnglr_val -> [_rnglr_val] | a -> failwith "DEC_NUMBER expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 16 "mssql.yrd"
                                                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_89) 
# 1010 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_MAX _rnglr_val -> [_rnglr_val] | a -> failwith "KW_MAX expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 132 "mssql.yrd"
                                                     S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_88) 
# 1030 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with DEC_NUMBER _rnglr_val -> [_rnglr_val] | a -> failwith "DEC_NUMBER expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 16 "mssql.yrd"
                                                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_88) 
# 1050 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with DOUBLE_COLON _rnglr_val -> [_rnglr_val] | a -> failwith "DOUBLE_COLON expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 61 "mssql.yrd"
                                           S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_87) 
# 1070 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with DOT _rnglr_val -> [_rnglr_val] | a -> failwith "DOT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 15 "mssql.yrd"
                                            S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_87) 
# 1090 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_full_ident) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_54) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 15 "mssql.yrd"
                                   S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_86) 
# 1112 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with IDENT _rnglr_val -> [_rnglr_val] | a -> failwith "IDENT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_47) user_defined_function
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 59 "mssql.yrd"
                                                     S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_85) 
# 1134 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_full_ident) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_43) 
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_yard_opt_45) 
                 |> List.iter (fun (S3) -> 
                  ((unbox _rnglr_children.[3]) : '_rnglr_type_yard_opt_46) 
                   |> List.iter (fun (S4) -> 
                    _rnglr_cycle_res := (
                      
# 15 "mssql.yrd"
                                       S1, S2, S3, S4
                        )::!_rnglr_cycle_res ) ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_85) 
# 1160 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_LT _rnglr_val -> [_rnglr_val] | a -> failwith "OP_LT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with OP_MT _rnglr_val -> [_rnglr_val] | a -> failwith "OP_MT expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 80 "mssql.yrd"
                                         S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_84) 
# 1182 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_92) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_32) 
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_yard_exp_brackets_93) 
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    

                    S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_83) 
# 1206 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with LPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "LPAREN expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_search_condition) 
               |> List.iter (fun (S2) -> 
                (match ((unbox _rnglr_children.[2]) : Token) with RPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "RPAREN expected, but %A found" a )
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 44 "mssql.yrd"
                                                 S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_82) 
# 1230 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_search_condition_predicate) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 74 "mssql.yrd"
                             S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_82) 
# 1250 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_OR _rnglr_val -> [_rnglr_val] | a -> failwith "KW_OR expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 76 "mssql.yrd"
                                S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_81) 
# 1270 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_AND _rnglr_val -> [_rnglr_val] | a -> failwith "KW_AND expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 76 "mssql.yrd"
                       S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_81) 
# 1290 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with IDENT _rnglr_val -> [_rnglr_val] | a -> failwith "IDENT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with OP_EQ _rnglr_val -> [_rnglr_val] | a -> failwith "OP_EQ expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_sql_expr) 
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 59 "mssql.yrd"
                                                       S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_80) 
# 1314 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_91) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                

                S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_80) 
# 1334 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_full_ident) 
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with DOT _rnglr_val -> [_rnglr_val] | a -> failwith "DOT expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                (match ((unbox _rnglr_children.[2]) : Token) with STAR _rnglr_val -> [_rnglr_val] | a -> failwith "STAR expected, but %A found" a )
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 15 "mssql.yrd"
                                     S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_80) 
# 1358 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with STAR _rnglr_val -> [_rnglr_val] | a -> failwith "STAR expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 56 "mssql.yrd"
                            S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_80) 
# 1378 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun udt_column_runtime ->
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with IDENT _rnglr_val -> [_rnglr_val] | a -> failwith "IDENT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with LPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "LPAREN expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_yard_opt_26) udt_column_runtime
                 |> List.iter (fun (S3) -> 
                  (match ((unbox _rnglr_children.[3]) : Token) with RPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "RPAREN expected, but %A found" a )
                   |> List.iter (fun (S4) -> 
                    _rnglr_cycle_res := (
                      
# 59 "mssql.yrd"
                                                         S1, S2, S3, S4
                        )::!_rnglr_cycle_res ) ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_79) 
# 1404 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun udt_column_runtime ->
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with IDENT _rnglr_val -> [_rnglr_val] | a -> failwith "IDENT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 59 "mssql.yrd"
                                                   S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_79) 
# 1424 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun udt_column_runtime ->
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with DOUBLE_COLON _rnglr_val -> [_rnglr_val] | a -> failwith "DOUBLE_COLON expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 61 "mssql.yrd"
                                           S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_78) 
# 1444 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun udt_column_runtime ->
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with DOT _rnglr_val -> [_rnglr_val] | a -> failwith "DOT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 15 "mssql.yrd"
                                            S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_78) 
# 1464 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun udt_column_runtime ->
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with IDENT _rnglr_val -> [_rnglr_val] | a -> failwith "IDENT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with LPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "LPAREN expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_yard_opt_21) udt_column_runtime
                 |> List.iter (fun (S3) -> 
                  (match ((unbox _rnglr_children.[3]) : Token) with RPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "RPAREN expected, but %A found" a )
                   |> List.iter (fun (S4) -> 
                    _rnglr_cycle_res := (
                      
# 59 "mssql.yrd"
                                                         S1, S2, S3, S4
                        )::!_rnglr_cycle_res ) ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_77) 
# 1490 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun udt_column_runtime ->
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with IDENT _rnglr_val -> [_rnglr_val] | a -> failwith "IDENT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 59 "mssql.yrd"
                                                   S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_77) 
# 1510 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun udt_column_runtime ->
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with DOUBLE_COLON _rnglr_val -> [_rnglr_val] | a -> failwith "DOUBLE_COLON expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 61 "mssql.yrd"
                                           S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_76) 
# 1530 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun udt_column_runtime ->
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with DOT _rnglr_val -> [_rnglr_val] | a -> failwith "DOT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 15 "mssql.yrd"
                                            S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_76) 
# 1550 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_sql_expr) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_22) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 32 "mssql.yrd"
                      S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_75) 
# 1572 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with IDENT _rnglr_val -> [_rnglr_val] | a -> failwith "IDENT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_20) udt_column_runtime
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 59 "mssql.yrd"
                                                     S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_75) 
# 1594 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_opt_19) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_exp_brackets_90) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 15 "mssql.yrd"
                                   S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_75) 
# 1616 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_INTERSECT _rnglr_val -> [_rnglr_val] | a -> failwith "KW_INTERSECT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 46 "mssql.yrd"
                                                        S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_74) 
# 1636 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_EXCEPT _rnglr_val -> [_rnglr_val] | a -> failwith "KW_EXCEPT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 46 "mssql.yrd"
                                            S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_74) 
# 1656 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_UNION _rnglr_val -> [_rnglr_val] | a -> failwith "KW_UNION expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_18) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 46 "mssql.yrd"
                           S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_74) 
# 1678 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with LPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "LPAREN expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_query_expression) 
               |> List.iter (fun (S2) -> 
                (match ((unbox _rnglr_children.[2]) : Token) with RPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "RPAREN expected, but %A found" a )
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 44 "mssql.yrd"
                                                 S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_73) 
# 1702 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_BEGIN _rnglr_val -> [_rnglr_val] | a -> failwith "KW_BEGIN expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_many_3) 
               |> List.iter (fun (S2) -> 
                (match ((unbox _rnglr_children.[2]) : Token) with KW_END _rnglr_val -> [_rnglr_val] | a -> failwith "KW_END expected, but %A found" a )
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 24 "mssql.yrd"
                              S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_72) 
# 1726 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with STRING_CONST _rnglr_val -> [_rnglr_val] | a -> failwith "STRING_CONST expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 16 "mssql.yrd"
                                                                 S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_71) 
# 1746 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with DEC_NUMBER _rnglr_val -> [_rnglr_val] | a -> failwith "DEC_NUMBER expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 16 "mssql.yrd"
                                                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_71) 
# 1766 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_NULL _rnglr_val -> [_rnglr_val] | a -> failwith "KW_NULL expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 16 "mssql.yrd"
                                          S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_71) 
# 1786 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with DOT _rnglr_val -> [_rnglr_val] | a -> failwith "DOT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_ident) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 15 "mssql.yrd"
                                              S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_70) 
# 1808 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_TILDA _rnglr_val -> [_rnglr_val] | a -> failwith "OP_TILDA expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 141 "mssql.yrd"
                                                                           S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_69) 
# 1828 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_MINUS_EQ _rnglr_val -> [_rnglr_val] | a -> failwith "OP_MINUS_EQ expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 140 "mssql.yrd"
                               S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_69) 
# 1848 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_PLUS_EQ _rnglr_val -> [_rnglr_val] | a -> failwith "OP_PLUS_EQ expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 140 "mssql.yrd"
                  S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_69) 
# 1868 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with STRING_CONST _rnglr_val -> [_rnglr_val] | a -> failwith "STRING_CONST expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 16 "mssql.yrd"
                                                                 S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_68) 
# 1888 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_OWNER _rnglr_val -> [_rnglr_val] | a -> failwith "KW_OWNER expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 137 "mssql.yrd"
                                                                        S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_68) 
# 1908 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_SELF _rnglr_val -> [_rnglr_val] | a -> failwith "KW_SELF expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 137 "mssql.yrd"
                                                              S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_68) 
# 1928 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_CALLER _rnglr_val -> [_rnglr_val] | a -> failwith "KW_CALLER expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 137 "mssql.yrd"
                                                  S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_68) 
# 1948 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_EXECUTE _rnglr_val -> [_rnglr_val] | a -> failwith "KW_EXECUTE expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 108 "mssql.yrd"
                               S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_67) 
# 1968 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_EXEC _rnglr_val -> [_rnglr_val] | a -> failwith "KW_EXEC expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 108 "mssql.yrd"
                     S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_67) 
# 1988 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with LPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "LPAREN expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_exp_brackets_89) 
               |> List.iter (fun (S2) -> 
                (match ((unbox _rnglr_children.[2]) : Token) with RPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "RPAREN expected, but %A found" a )
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 44 "mssql.yrd"
                                                 S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_66) 
# 2012 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with LPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "LPAREN expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with DEC_NUMBER _rnglr_val -> [_rnglr_val] | a -> failwith "DEC_NUMBER expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                (match ((unbox _rnglr_children.[2]) : Token) with RPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "RPAREN expected, but %A found" a )
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 44 "mssql.yrd"
                                                 S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_65) 
# 2036 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with LPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "LPAREN expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_exp_brackets_88) 
               |> List.iter (fun (S2) -> 
                (match ((unbox _rnglr_children.[2]) : Token) with RPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "RPAREN expected, but %A found" a )
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 44 "mssql.yrd"
                                                 S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_64) 
# 2060 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with LPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "LPAREN expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with DEC_NUMBER _rnglr_val -> [_rnglr_val] | a -> failwith "DEC_NUMBER expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                (match ((unbox _rnglr_children.[2]) : Token) with RPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "RPAREN expected, but %A found" a )
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 44 "mssql.yrd"
                                                 S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_63) 
# 2084 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with LPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "LPAREN expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with DEC_NUMBER _rnglr_val -> [_rnglr_val] | a -> failwith "DEC_NUMBER expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                (match ((unbox _rnglr_children.[2]) : Token) with RPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "RPAREN expected, but %A found" a )
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 44 "mssql.yrd"
                                                 S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_62) 
# 2108 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with DOT _rnglr_val -> [_rnglr_val] | a -> failwith "DOT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with IDENT _rnglr_val -> [_rnglr_val] | a -> failwith "IDENT expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 15 "mssql.yrd"
                                              S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_61) 
# 2130 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with IDENT _rnglr_val -> [_rnglr_val] | a -> failwith "IDENT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_exp_brackets_87) 
               |> List.iter (fun (S2) -> 
                (match ((unbox _rnglr_children.[2]) : Token) with IDENT _rnglr_val -> [_rnglr_val] | a -> failwith "IDENT expected, but %A found" a )
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 59 "mssql.yrd"
                                                       S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_60) 
# 2154 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_sql_expr) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 32 "mssql.yrd"
                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_60) 
# 2174 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OFF _rnglr_val -> [_rnglr_val] | a -> failwith "OFF expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 119 "mssql.yrd"
                                                     S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_59) 
# 2194 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with ON _rnglr_val -> [_rnglr_val] | a -> failwith "ON expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 119 "mssql.yrd"
                                                S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_59) 
# 2214 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OFF _rnglr_val -> [_rnglr_val] | a -> failwith "OFF expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 119 "mssql.yrd"
                                                     S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_58) 
# 2234 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with ON _rnglr_val -> [_rnglr_val] | a -> failwith "ON expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 119 "mssql.yrd"
                                                S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_58) 
# 2254 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OFF _rnglr_val -> [_rnglr_val] | a -> failwith "OFF expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 119 "mssql.yrd"
                                                     S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_57) 
# 2274 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with ON _rnglr_val -> [_rnglr_val] | a -> failwith "ON expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 119 "mssql.yrd"
                                                S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_57) 
# 2294 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OFF _rnglr_val -> [_rnglr_val] | a -> failwith "OFF expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 119 "mssql.yrd"
                                                     S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_56) 
# 2314 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with ON _rnglr_val -> [_rnglr_val] | a -> failwith "ON expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 119 "mssql.yrd"
                                                S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_56) 
# 2334 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_WITH _rnglr_val -> [_rnglr_val] | a -> failwith "KW_WITH expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with KW_RECOMPILE _rnglr_val -> [_rnglr_val] | a -> failwith "KW_RECOMPILE expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 23 "mssql.yrd"
                       S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_55) 
# 2356 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with SEMI _rnglr_val -> [_rnglr_val] | a -> failwith "SEMI expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with DEC_NUMBER _rnglr_val -> [_rnglr_val] | a -> failwith "DEC_NUMBER expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 21 "mssql.yrd"
                                          S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_54) 
# 2378 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with LOCALVAR _rnglr_val -> [_rnglr_val] | a -> failwith "LOCALVAR expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with OP_EQ _rnglr_val -> [_rnglr_val] | a -> failwith "OP_EQ expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 15 "mssql.yrd"
                         S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_53) 
# 2400 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with LOCALVAR _rnglr_val -> [_rnglr_val] | a -> failwith "LOCALVAR expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 15 "mssql.yrd"
                       S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_52) 
# 2420 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_86) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                

                S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_52) 
# 2440 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_EXECUTE _rnglr_val -> [_rnglr_val] | a -> failwith "KW_EXECUTE expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 108 "mssql.yrd"
                               S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_51) 
# 2460 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_EXEC _rnglr_val -> [_rnglr_val] | a -> failwith "KW_EXEC expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 108 "mssql.yrd"
                     S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_51) 
# 2480 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_REPEATABLE _rnglr_val -> [_rnglr_val] | a -> failwith "KW_REPEATABLE expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with LPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "LPAREN expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                (match ((unbox _rnglr_children.[2]) : Token) with DEC_NUMBER _rnglr_val -> [_rnglr_val] | a -> failwith "DEC_NUMBER expected, but %A found" a )
                 |> List.iter (fun (S3) -> 
                  (match ((unbox _rnglr_children.[3]) : Token) with RPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "RPAREN expected, but %A found" a )
                   |> List.iter (fun (S4) -> 
                    _rnglr_cycle_res := (
                      
# 101 "mssql.yrd"
                               S1, S2, S3, S4
                        )::!_rnglr_cycle_res ) ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_50) 
# 2506 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_ROWS _rnglr_val -> [_rnglr_val] | a -> failwith "KW_ROWS expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 100 "mssql.yrd"
                                                                              S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_49) 
# 2526 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_RERCENT _rnglr_val -> [_rnglr_val] | a -> failwith "KW_RERCENT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 100 "mssql.yrd"
                                                                 S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_49) 
# 2546 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with COMMA _rnglr_val -> [_rnglr_val] | a -> failwith "COMMA expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_exp_brackets_85) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 161 "mssql.yrd"
                                                 S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_48) 
# 2568 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun user_defined_function ->
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_opt_48) user_defined_function
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with IDENT _rnglr_val -> [_rnglr_val] | a -> failwith "IDENT expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 24 "mssql.yrd"
                      S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_47) 
# 2590 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_WITH _rnglr_val -> [_rnglr_val] | a -> failwith "KW_WITH expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with LPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "LPAREN expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_yard_some_3) 
                 |> List.iter (fun (S3) -> 
                  (match ((unbox _rnglr_children.[3]) : Token) with RPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "RPAREN expected, but %A found" a )
                   |> List.iter (fun (S4) -> 
                    _rnglr_cycle_res := (
                      
# 23 "mssql.yrd"
                           S1, S2, S3, S4
                        )::!_rnglr_cycle_res ) ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_46) 
# 2616 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_opt_44) 
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with IDENT _rnglr_val -> [_rnglr_val] | a -> failwith "IDENT expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 24 "mssql.yrd"
                      S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_45) 
# 2638 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun user_defined_function ->
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_opt_42) user_defined_function
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with IDENT _rnglr_val -> [_rnglr_val] | a -> failwith "IDENT expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 24 "mssql.yrd"
                      S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_44) 
# 2660 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_WITH _rnglr_val -> [_rnglr_val] | a -> failwith "KW_WITH expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with LPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "LPAREN expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_yard_some_2) 
                 |> List.iter (fun (S3) -> 
                  (match ((unbox _rnglr_children.[3]) : Token) with RPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "RPAREN expected, but %A found" a )
                   |> List.iter (fun (S4) -> 
                    _rnglr_cycle_res := (
                      
# 23 "mssql.yrd"
                           S1, S2, S3, S4
                        )::!_rnglr_cycle_res ) ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_43) 
# 2686 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_opt_38) 
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with IDENT _rnglr_val -> [_rnglr_val] | a -> failwith "IDENT expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 24 "mssql.yrd"
                      S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_42) 
# 2708 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with IDENT _rnglr_val -> [_rnglr_val] | a -> failwith "IDENT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_41) user_defined_function
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 59 "mssql.yrd"
                                                     S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_41) 
# 2730 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_full_ident) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_37) 
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_yard_opt_39) 
                 |> List.iter (fun (S3) -> 
                  ((unbox _rnglr_children.[3]) : '_rnglr_type_yard_opt_40) 
                   |> List.iter (fun (S4) -> 
                    _rnglr_cycle_res := (
                      
# 15 "mssql.yrd"
                                       S1, S2, S3, S4
                        )::!_rnglr_cycle_res ) ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_41) 
# 2756 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_MT_EQ _rnglr_val -> [_rnglr_val] | a -> failwith "OP_MT_EQ expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 80 "mssql.yrd"
                                                                                  S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_40) 
# 2776 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_LT_EQ _rnglr_val -> [_rnglr_val] | a -> failwith "OP_LT_EQ expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 80 "mssql.yrd"
                                                                       S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_40) 
# 2796 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_84) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                

                S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_40) 
# 2816 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_MT _rnglr_val -> [_rnglr_val] | a -> failwith "OP_MT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 80 "mssql.yrd"
                                               S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_40) 
# 2836 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_LT _rnglr_val -> [_rnglr_val] | a -> failwith "OP_LT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 80 "mssql.yrd"
                                       S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_40) 
# 2856 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_EQ _rnglr_val -> [_rnglr_val] | a -> failwith "OP_EQ expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 16 "mssql.yrd"
                                   S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_40) 
# 2876 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with LPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "LPAREN expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_search_condition) 
               |> List.iter (fun (S2) -> 
                (match ((unbox _rnglr_children.[2]) : Token) with RPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "RPAREN expected, but %A found" a )
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 44 "mssql.yrd"
                                                 S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_39) 
# 2900 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_opt_33) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_search_condition_predicate) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 74 "mssql.yrd"
                       S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_39) 
# 2922 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with COMMA _rnglr_val -> [_rnglr_val] | a -> failwith "COMMA expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_exp_brackets_83) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 161 "mssql.yrd"
                                                 S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_38) 
# 2944 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_81) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_31) 
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_yard_exp_brackets_82) 
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    

                    S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_37) 
# 2968 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_WHERE _rnglr_val -> [_rnglr_val] | a -> failwith "KW_WHERE expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_search_condition) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 70 "mssql.yrd"
                       S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_36) 
# 2990 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with COMMA _rnglr_val -> [_rnglr_val] | a -> failwith "COMMA expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_exp_brackets_80) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 161 "mssql.yrd"
                                                 S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_35) 
# 3012 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_opt_28) 
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with IDENT _rnglr_val -> [_rnglr_val] | a -> failwith "IDENT expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 24 "mssql.yrd"
                      S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_34) 
# 3034 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun udt_column_runtime ->
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_78) udt_column_runtime
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_exp_brackets_79) udt_column_runtime
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  

                  S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_33) 
# 3056 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_full_ident) 
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with DOT _rnglr_val -> [_rnglr_val] | a -> failwith "DOT expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 15 "mssql.yrd"
                                   S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_32) 
# 3078 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_opt_23) 
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with IDENT _rnglr_val -> [_rnglr_val] | a -> failwith "IDENT expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 24 "mssql.yrd"
                      S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_31) 
# 3100 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun udt_column_runtime ->
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_76) udt_column_runtime
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_exp_brackets_77) udt_column_runtime
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  

                  S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_30) 
# 3122 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_full_ident) 
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with DOT _rnglr_val -> [_rnglr_val] | a -> failwith "DOT expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 15 "mssql.yrd"
                                   S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_29) 
# 3144 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with IDENT _rnglr_val -> [_rnglr_val] | a -> failwith "IDENT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with OP_EQ _rnglr_val -> [_rnglr_val] | a -> failwith "OP_EQ expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_sql_expr) 
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 59 "mssql.yrd"
                                                       S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_28) 
# 3168 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_75) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                

                S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_28) 
# 3188 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_full_ident) 
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with DOT _rnglr_val -> [_rnglr_val] | a -> failwith "DOT expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                (match ((unbox _rnglr_children.[2]) : Token) with STAR _rnglr_val -> [_rnglr_val] | a -> failwith "STAR expected, but %A found" a )
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 15 "mssql.yrd"
                                     S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_28) 
# 3212 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with STAR _rnglr_val -> [_rnglr_val] | a -> failwith "STAR expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 56 "mssql.yrd"
                            S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_28) 
# 3232 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with COMMA _rnglr_val -> [_rnglr_val] | a -> failwith "COMMA expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_sql_expr) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 161 "mssql.yrd"
                                                 S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_27) 
# 3254 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with LPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "LPAREN expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_query_expression) 
               |> List.iter (fun (S2) -> 
                (match ((unbox _rnglr_children.[2]) : Token) with RPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "RPAREN expected, but %A found" a )
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 44 "mssql.yrd"
                                                 S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_26) 
# 3278 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_74) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_query_specification) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  

                  S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_26) 
# 3300 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_73) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                

                S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_25) 
# 3320 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_query_specification) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 44 "mssql.yrd"
                      S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_25) 
# 3340 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_INTO _rnglr_val -> [_rnglr_val] | a -> failwith "KW_INTO expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_full_ident) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 41 "mssql.yrd"
                       S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_24) 
# 3362 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_EQ _rnglr_val -> [_rnglr_val] | a -> failwith "OP_EQ expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_sql_expr) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 16 "mssql.yrd"
                                     S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_23) 
# 3384 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_sql_expr) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 32 "mssql.yrd"
                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_22) 
# 3404 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_72) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                

                S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_22) 
# 3424 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_proc_body_stmnt) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_12) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 24 "mssql.yrd"
                                       S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_21) 
# 3446 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_FOR _rnglr_val -> [_rnglr_val] | a -> failwith "KW_FOR expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with KW_REPLICATION _rnglr_val -> [_rnglr_val] | a -> failwith "KW_REPLICATION expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 23 "mssql.yrd"
                                                  S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_20) 
# 3468 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_WITH _rnglr_val -> [_rnglr_val] | a -> failwith "KW_WITH expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_some_1) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 23 "mssql.yrd"
                       S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_19) 
# 3490 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with SEMI _rnglr_val -> [_rnglr_val] | a -> failwith "SEMI expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with DEC_NUMBER _rnglr_val -> [_rnglr_val] | a -> failwith "DEC_NUMBER expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 21 "mssql.yrd"
                                          S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_18) 
# 3512 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_ident) 
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with DOT _rnglr_val -> [_rnglr_val] | a -> failwith "DOT expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 8 "mssql.yrd"
                                           S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_17) 
# 3534 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_PROC _rnglr_val -> [_rnglr_val] | a -> failwith "KW_PROC expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 20 "mssql.yrd"
                                              S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_16) 
# 3554 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_PROCEDURE _rnglr_val -> [_rnglr_val] | a -> failwith "KW_PROCEDURE expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 20 "mssql.yrd"
                               S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_16) 
# 3574 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with COMMA _rnglr_val -> [_rnglr_val] | a -> failwith "COMMA expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_proc_formal_param) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 161 "mssql.yrd"
                                                 S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_15) 
# 3596 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_OUTPUT _rnglr_val -> [_rnglr_val] | a -> failwith "KW_OUTPUT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 17 "mssql.yrd"
                                S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_14) 
# 3616 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_OUT _rnglr_val -> [_rnglr_val] | a -> failwith "KW_OUT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 17 "mssql.yrd"
                       S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_14) 
# 3636 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_EQ _rnglr_val -> [_rnglr_val] | a -> failwith "OP_EQ expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_exp_brackets_71) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 16 "mssql.yrd"
                                     S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_13) 
# 3658 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_full_ident) 
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with DOT _rnglr_val -> [_rnglr_val] | a -> failwith "DOT expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 15 "mssql.yrd"
                                   S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_12) 
# 3680 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with LOCALVAR _rnglr_val -> [_rnglr_val] | a -> failwith "LOCALVAR expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_1) 
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_sql_datatype) 
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 15 "mssql.yrd"
                           S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )

               : '_rnglr_type_yard_exp_brackets_11) 
# 3704 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_rule_list_10) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 173 "mssql.yrd"
                            S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 173 "mssql.yrd"
               : '_rnglr_type_full_ident) 
# 3724 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_70) 
             |> List.iter (fun (yard_head) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_many_8) 
               |> List.iter (fun (yard_tail) -> 
                _rnglr_cycle_res := (
                  
# 15 "mssql.yrd"
                                              yard_head::yard_tail
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 15 "mssql.yrd"
               : '_rnglr_type_yard_many_8) 
# 3746 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 15 "mssql.yrd"
                                          []
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 15 "mssql.yrd"
               : '_rnglr_type_yard_many_8) 
# 3764 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_ident) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_many_8) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 8 "mssql.yrd"
                                           S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 160 "mssql.yrd"
               : '_rnglr_type_yard_rule_list_10) 
# 3786 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with IDENT _rnglr_val -> [_rnglr_val] | a -> failwith "IDENT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 59 "mssql.yrd"
                                                   S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 168 "mssql.yrd"
               : '_rnglr_type_ident) 
# 3806 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with LBRACKET _rnglr_val -> [_rnglr_val] | a -> failwith "LBRACKET expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_ident) 
               |> List.iter (fun (S2) -> 
                (match ((unbox _rnglr_children.[2]) : Token) with RBRACKET _rnglr_val -> [_rnglr_val] | a -> failwith "RBRACKET expected, but %A found" a )
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 169 "mssql.yrd"
                        S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )
# 168 "mssql.yrd"
               : '_rnglr_type_ident) 
# 3830 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with DEC_NUMBER _rnglr_val -> [_rnglr_val] | a -> failwith "DEC_NUMBER expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 16 "mssql.yrd"
                                                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 163 "mssql.yrd"
               : '_rnglr_type_sql_value) 
# 3850 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with STRING_CONST _rnglr_val -> [_rnglr_val] | a -> failwith "STRING_CONST expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 16 "mssql.yrd"
                                                                 S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 163 "mssql.yrd"
               : '_rnglr_type_sql_value) 
# 3870 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_rule_comma_list_3) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 62 "mssql.yrd"
                                                          Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 62 "mssql.yrd"
               : '_rnglr_type_yard_opt_63) 
# 3890 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 62 "mssql.yrd"
                                                        None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 62 "mssql.yrd"
               : '_rnglr_type_yard_opt_63) 
# 3908 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_full_ident) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 15 "mssql.yrd"
                                 S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 148 "mssql.yrd"
               : '_rnglr_type_sql_expr) 
# 3928 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with GLOBALVAR _rnglr_val -> [_rnglr_val] | a -> failwith "GLOBALVAR expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 9 "mssql.yrd"
                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 148 "mssql.yrd"
               : '_rnglr_type_sql_expr) 
# 3948 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_69) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_sql_expr) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  

                  S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 148 "mssql.yrd"
               : '_rnglr_type_sql_expr) 
# 3970 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_SELECT _rnglr_val -> [_rnglr_val] | a -> failwith "KW_SELECT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_sql_expr) 
               |> List.iter (fun (S2) -> 
                (match ((unbox _rnglr_children.[2]) : Token) with KW_FROM _rnglr_val -> [_rnglr_val] | a -> failwith "KW_FROM expected, but %A found" a )
                 |> List.iter (fun (S3) -> 
                  (match ((unbox _rnglr_children.[3]) : Token) with IDENT _rnglr_val -> [_rnglr_val] | a -> failwith "IDENT expected, but %A found" a )
                   |> List.iter (fun (S4) -> 
                    _rnglr_cycle_res := (
                      
# 8 "mssql.yrd"
                                     S1, S2, S3, S4
                        )::!_rnglr_cycle_res ) ) ) )
            !_rnglr_cycle_res
          )
            )
# 148 "mssql.yrd"
               : '_rnglr_type_sql_expr) 
# 3996 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_full_ident) 
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with LPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "LPAREN expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_yard_opt_63) 
                 |> List.iter (fun (S3) -> 
                  (match ((unbox _rnglr_children.[3]) : Token) with RPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "RPAREN expected, but %A found" a )
                   |> List.iter (fun (S4) -> 
                    _rnglr_cycle_res := (
                      
# 15 "mssql.yrd"
                                       S1, S2, S3, S4
                        )::!_rnglr_cycle_res ) ) ) )
            !_rnglr_cycle_res
          )
            )
# 148 "mssql.yrd"
               : '_rnglr_type_sql_expr) 
# 4022 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with LOCALVAR _rnglr_val -> [_rnglr_val] | a -> failwith "LOCALVAR expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 15 "mssql.yrd"
                       S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 148 "mssql.yrd"
               : '_rnglr_type_sql_expr) 
# 4042 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with LPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "LPAREN expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_sql_expr) 
               |> List.iter (fun (S2) -> 
                (match ((unbox _rnglr_children.[2]) : Token) with RPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "RPAREN expected, but %A found" a )
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 44 "mssql.yrd"
                                                 S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )
# 148 "mssql.yrd"
               : '_rnglr_type_sql_expr) 
# 4066 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_sql_value) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 150 "mssql.yrd"
                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 148 "mssql.yrd"
               : '_rnglr_type_sql_expr) 
# 4086 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_sql_expr_lrecu) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 149 "mssql.yrd"
                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 148 "mssql.yrd"
               : '_rnglr_type_sql_expr) 
# 4106 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_sql_expr) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_binop) 
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_sql_expr) 
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 32 "mssql.yrd"
                        S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )
# 146 "mssql.yrd"
               : '_rnglr_type_sql_expr_lrecu) 
# 4130 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_MT_EQ _rnglr_val -> [_rnglr_val] | a -> failwith "OP_MT_EQ expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 80 "mssql.yrd"
                                                                                  S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 139 "mssql.yrd"
               : '_rnglr_type_binop) 
# 4150 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_LT_EQ _rnglr_val -> [_rnglr_val] | a -> failwith "OP_LT_EQ expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 80 "mssql.yrd"
                                                                       S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 139 "mssql.yrd"
               : '_rnglr_type_binop) 
# 4170 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_MT _rnglr_val -> [_rnglr_val] | a -> failwith "OP_MT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 80 "mssql.yrd"
                                               S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 139 "mssql.yrd"
               : '_rnglr_type_binop) 
# 4190 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_LT _rnglr_val -> [_rnglr_val] | a -> failwith "OP_LT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 80 "mssql.yrd"
                                       S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 139 "mssql.yrd"
               : '_rnglr_type_binop) 
# 4210 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_TILDA _rnglr_val -> [_rnglr_val] | a -> failwith "OP_TILDA expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 141 "mssql.yrd"
                                                                           S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 139 "mssql.yrd"
               : '_rnglr_type_binop) 
# 4230 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_MOD _rnglr_val -> [_rnglr_val] | a -> failwith "OP_MOD expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 141 "mssql.yrd"
                                                                  S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 139 "mssql.yrd"
               : '_rnglr_type_binop) 
# 4250 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_DIV _rnglr_val -> [_rnglr_val] | a -> failwith "OP_DIV expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 141 "mssql.yrd"
                                                         S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 139 "mssql.yrd"
               : '_rnglr_type_binop) 
# 4270 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_MUL _rnglr_val -> [_rnglr_val] | a -> failwith "OP_MUL expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 141 "mssql.yrd"
                                                S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 139 "mssql.yrd"
               : '_rnglr_type_binop) 
# 4290 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_MINUS _rnglr_val -> [_rnglr_val] | a -> failwith "OP_MINUS expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 141 "mssql.yrd"
                                     S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 139 "mssql.yrd"
               : '_rnglr_type_binop) 
# 4310 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_PLUS _rnglr_val -> [_rnglr_val] | a -> failwith "OP_PLUS expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 141 "mssql.yrd"
                           S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 139 "mssql.yrd"
               : '_rnglr_type_binop) 
# 4330 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_EQ _rnglr_val -> [_rnglr_val] | a -> failwith "OP_EQ expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 16 "mssql.yrd"
                                   S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 139 "mssql.yrd"
               : '_rnglr_type_binop) 
# 4350 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_OR_EQ _rnglr_val -> [_rnglr_val] | a -> failwith "OP_OR_EQ expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 140 "mssql.yrd"
                                                                                                         S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 139 "mssql.yrd"
               : '_rnglr_type_binop) 
# 4370 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_XOR_EQ _rnglr_val -> [_rnglr_val] | a -> failwith "OP_XOR_EQ expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 140 "mssql.yrd"
                                                                                             S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 139 "mssql.yrd"
               : '_rnglr_type_binop) 
# 4390 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_AND_EQ _rnglr_val -> [_rnglr_val] | a -> failwith "OP_AND_EQ expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 140 "mssql.yrd"
                                                                                 S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 139 "mssql.yrd"
               : '_rnglr_type_binop) 
# 4410 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_MOD_EQ _rnglr_val -> [_rnglr_val] | a -> failwith "OP_MOD_EQ expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 140 "mssql.yrd"
                                                                     S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 139 "mssql.yrd"
               : '_rnglr_type_binop) 
# 4430 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_DIV_EQ _rnglr_val -> [_rnglr_val] | a -> failwith "OP_DIV_EQ expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 140 "mssql.yrd"
                                                         S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 139 "mssql.yrd"
               : '_rnglr_type_binop) 
# 4450 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_MUL_EQ _rnglr_val -> [_rnglr_val] | a -> failwith "OP_MUL_EQ expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 140 "mssql.yrd"
                                             S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 139 "mssql.yrd"
               : '_rnglr_type_binop) 
# 4470 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_MINUS_EQ _rnglr_val -> [_rnglr_val] | a -> failwith "OP_MINUS_EQ expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 140 "mssql.yrd"
                               S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 139 "mssql.yrd"
               : '_rnglr_type_binop) 
# 4490 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with OP_PLUS_EQ _rnglr_val -> [_rnglr_val] | a -> failwith "OP_PLUS_EQ expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 140 "mssql.yrd"
                  S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 139 "mssql.yrd"
               : '_rnglr_type_binop) 
# 4510 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_67) 
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with KW_AS _rnglr_val -> [_rnglr_val] | a -> failwith "KW_AS expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_yard_exp_brackets_68) 
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    

                    S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )
# 136 "mssql.yrd"
               : '_rnglr_type_execute_as) 
# 4534 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_66) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 44 "mssql.yrd"
                                             Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 44 "mssql.yrd"
               : '_rnglr_type_yard_opt_62) 
# 4554 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 44 "mssql.yrd"
                                           None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 44 "mssql.yrd"
               : '_rnglr_type_yard_opt_62) 
# 4572 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_65) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 44 "mssql.yrd"
                                             Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 44 "mssql.yrd"
               : '_rnglr_type_yard_opt_61) 
# 4592 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 44 "mssql.yrd"
                                           None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 44 "mssql.yrd"
               : '_rnglr_type_yard_opt_61) 
# 4610 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_64) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 44 "mssql.yrd"
                                             Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 44 "mssql.yrd"
               : '_rnglr_type_yard_opt_60) 
# 4630 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 44 "mssql.yrd"
                                           None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 44 "mssql.yrd"
               : '_rnglr_type_yard_opt_60) 
# 4648 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_63) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 44 "mssql.yrd"
                                             Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 44 "mssql.yrd"
               : '_rnglr_type_yard_opt_59) 
# 4668 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 44 "mssql.yrd"
                                           None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 44 "mssql.yrd"
               : '_rnglr_type_yard_opt_59) 
# 4686 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_62) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 44 "mssql.yrd"
                                             Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 44 "mssql.yrd"
               : '_rnglr_type_yard_opt_58) 
# 4706 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 44 "mssql.yrd"
                                           None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 44 "mssql.yrd"
               : '_rnglr_type_yard_opt_58) 
# 4724 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_NVARCHAR _rnglr_val -> [_rnglr_val] | a -> failwith "KW_NVARCHAR expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_62) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 134 "mssql.yrd"
                      S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 126 "mssql.yrd"
               : '_rnglr_type_sql_datatype) 
# 4746 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_NCHAR _rnglr_val -> [_rnglr_val] | a -> failwith "KW_NCHAR expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_61) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 133 "mssql.yrd"
                      S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 126 "mssql.yrd"
               : '_rnglr_type_sql_datatype) 
# 4768 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_VARCHAR _rnglr_val -> [_rnglr_val] | a -> failwith "KW_VARCHAR expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_60) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 132 "mssql.yrd"
                      S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 126 "mssql.yrd"
               : '_rnglr_type_sql_datatype) 
# 4790 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_CHAR _rnglr_val -> [_rnglr_val] | a -> failwith "KW_CHAR expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_59) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 131 "mssql.yrd"
                      S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 126 "mssql.yrd"
               : '_rnglr_type_sql_datatype) 
# 4812 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_REAL _rnglr_val -> [_rnglr_val] | a -> failwith "KW_REAL expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 130 "mssql.yrd"
                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 126 "mssql.yrd"
               : '_rnglr_type_sql_datatype) 
# 4832 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_FLOAT _rnglr_val -> [_rnglr_val] | a -> failwith "KW_FLOAT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_58) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 129 "mssql.yrd"
                      S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 126 "mssql.yrd"
               : '_rnglr_type_sql_datatype) 
# 4854 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_MONEY _rnglr_val -> [_rnglr_val] | a -> failwith "KW_MONEY expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 128 "mssql.yrd"
                                          S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 126 "mssql.yrd"
               : '_rnglr_type_sql_datatype) 
# 4874 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_TINYINT _rnglr_val -> [_rnglr_val] | a -> failwith "KW_TINYINT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 128 "mssql.yrd"
                             S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 126 "mssql.yrd"
               : '_rnglr_type_sql_datatype) 
# 4894 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_INT _rnglr_val -> [_rnglr_val] | a -> failwith "KW_INT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 128 "mssql.yrd"
                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 126 "mssql.yrd"
               : '_rnglr_type_sql_datatype) 
# 4914 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_SMALLMONEY _rnglr_val -> [_rnglr_val] | a -> failwith "KW_SMALLMONEY expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 127 "mssql.yrd"
                                                                                  S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 126 "mssql.yrd"
               : '_rnglr_type_sql_datatype) 
# 4934 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_DECIMAL _rnglr_val -> [_rnglr_val] | a -> failwith "KW_DECIMAL expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 127 "mssql.yrd"
                                                                     S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 126 "mssql.yrd"
               : '_rnglr_type_sql_datatype) 
# 4954 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_SMALLINT _rnglr_val -> [_rnglr_val] | a -> failwith "KW_SMALLINT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 127 "mssql.yrd"
                                                      S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 126 "mssql.yrd"
               : '_rnglr_type_sql_datatype) 
# 4974 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_BIT _rnglr_val -> [_rnglr_val] | a -> failwith "KW_BIT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 127 "mssql.yrd"
                                             S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 126 "mssql.yrd"
               : '_rnglr_type_sql_datatype) 
# 4994 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_NUMERIC _rnglr_val -> [_rnglr_val] | a -> failwith "KW_NUMERIC expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 127 "mssql.yrd"
                                S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 126 "mssql.yrd"
               : '_rnglr_type_sql_datatype) 
# 5014 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_BIGINT _rnglr_val -> [_rnglr_val] | a -> failwith "KW_BIGINT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 127 "mssql.yrd"
                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 126 "mssql.yrd"
               : '_rnglr_type_sql_datatype) 
# 5034 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_61) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 15 "mssql.yrd"
                                            Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 15 "mssql.yrd"
               : '_rnglr_type_yard_opt_57) 
# 5054 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 15 "mssql.yrd"
                                          None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 15 "mssql.yrd"
               : '_rnglr_type_yard_opt_57) 
# 5072 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with SET _rnglr_val -> [_rnglr_val] | a -> failwith "SET expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with LOCALVAR _rnglr_val -> [_rnglr_val] | a -> failwith "LOCALVAR expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_yard_opt_57) 
                 |> List.iter (fun (S3) -> 
                  (match ((unbox _rnglr_children.[3]) : Token) with OP_EQ _rnglr_val -> [_rnglr_val] | a -> failwith "OP_EQ expected, but %A found" a )
                   |> List.iter (fun (S4) -> 
                    ((unbox _rnglr_children.[4]) : '_rnglr_type_yard_exp_brackets_60) 
                     |> List.iter (fun (S5) -> 
                      _rnglr_cycle_res := (
                        
# 119 "mssql.yrd"
                            S1, S2, S3, S4, S5
                          )::!_rnglr_cycle_res ) ) ) ) )
            !_rnglr_cycle_res
          )
            )
# 118 "mssql.yrd"
               : '_rnglr_type_set_stmnt) 
# 5100 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with SET _rnglr_val -> [_rnglr_val] | a -> failwith "SET expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with QUOTED_IDENTIFIER _rnglr_val -> [_rnglr_val] | a -> failwith "QUOTED_IDENTIFIER expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_yard_exp_brackets_59) 
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 119 "mssql.yrd"
                        S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )
# 118 "mssql.yrd"
               : '_rnglr_type_set_stmnt) 
# 5124 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with SET _rnglr_val -> [_rnglr_val] | a -> failwith "SET expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with ANSI_NULLS _rnglr_val -> [_rnglr_val] | a -> failwith "ANSI_NULLS expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_yard_exp_brackets_58) 
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 119 "mssql.yrd"
                        S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )
# 118 "mssql.yrd"
               : '_rnglr_type_set_stmnt) 
# 5148 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with SET _rnglr_val -> [_rnglr_val] | a -> failwith "SET expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with NOCOUNT _rnglr_val -> [_rnglr_val] | a -> failwith "NOCOUNT expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_yard_exp_brackets_57) 
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 119 "mssql.yrd"
                        S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )
# 118 "mssql.yrd"
               : '_rnglr_type_set_stmnt) 
# 5172 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with SET _rnglr_val -> [_rnglr_val] | a -> failwith "SET expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with IMPLICIT_TRANSACTIONS _rnglr_val -> [_rnglr_val] | a -> failwith "IMPLICIT_TRANSACTIONS expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_yard_exp_brackets_56) 
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 119 "mssql.yrd"
                        S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )
# 118 "mssql.yrd"
               : '_rnglr_type_set_stmnt) 
# 5196 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with SEMI _rnglr_val -> [_rnglr_val] | a -> failwith "SEMI expected, but %A found" a )
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 21 "mssql.yrd"
                                        Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 21 "mssql.yrd"
               : '_rnglr_type_yard_opt_56) 
# 5216 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 21 "mssql.yrd"
                                      None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 21 "mssql.yrd"
               : '_rnglr_type_yard_opt_56) 
# 5234 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_55) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 23 "mssql.yrd"
                     Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 23 "mssql.yrd"
               : '_rnglr_type_yard_opt_55) 
# 5254 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 23 "mssql.yrd"
                   None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 23 "mssql.yrd"
               : '_rnglr_type_yard_opt_55) 
# 5272 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_54) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 21 "mssql.yrd"
                                        Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 21 "mssql.yrd"
               : '_rnglr_type_yard_opt_54) 
# 5292 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 21 "mssql.yrd"
                                      None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 21 "mssql.yrd"
               : '_rnglr_type_yard_opt_54) 
# 5310 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_53) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 15 "mssql.yrd"
                       Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 15 "mssql.yrd"
               : '_rnglr_type_yard_opt_53) 
# 5330 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 15 "mssql.yrd"
                     None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 15 "mssql.yrd"
               : '_rnglr_type_yard_opt_53) 
# 5348 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_51) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_53) 
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_yard_exp_brackets_52) 
                 |> List.iter (fun (S3) -> 
                  ((unbox _rnglr_children.[3]) : '_rnglr_type_yard_opt_55) 
                   |> List.iter (fun (S4) -> 
                    ((unbox _rnglr_children.[4]) : '_rnglr_type_yard_opt_56) 
                     |> List.iter (fun (S5) -> 
                      _rnglr_cycle_res := (
                        

                        S1, S2, S3, S4, S5
                          )::!_rnglr_cycle_res ) ) ) ) )
            !_rnglr_cycle_res
          )
            )
# 107 "mssql.yrd"
               : '_rnglr_type_execute_stmnt) 
# 5376 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_NOEXPAND _rnglr_val -> [_rnglr_val] | a -> failwith "KW_NOEXPAND expected, but %A found" a )
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 104 "mssql.yrd"
                            Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 104 "mssql.yrd"
               : '_rnglr_type_yard_opt_52) 
# 5396 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 104 "mssql.yrd"
                          None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 104 "mssql.yrd"
               : '_rnglr_type_yard_opt_52) 
# 5414 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_opt_52) 
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with NOLOCK _rnglr_val -> [_rnglr_val] | a -> failwith "NOLOCK expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 104 "mssql.yrd"
                              S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 104 "mssql.yrd"
               : '_rnglr_type_table_hint) 
# 5436 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_50) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 101 "mssql.yrd"
                         Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 101 "mssql.yrd"
               : '_rnglr_type_yard_opt_51) 
# 5456 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 101 "mssql.yrd"
                       None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 101 "mssql.yrd"
               : '_rnglr_type_yard_opt_51) 
# 5474 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_49) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 100 "mssql.yrd"
                                                                 Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 100 "mssql.yrd"
               : '_rnglr_type_yard_opt_50) 
# 5494 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 100 "mssql.yrd"
                                                               None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 100 "mssql.yrd"
               : '_rnglr_type_yard_opt_50) 
# 5512 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_SYSTEM _rnglr_val -> [_rnglr_val] | a -> failwith "KW_SYSTEM expected, but %A found" a )
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 100 "mssql.yrd"
                                   Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 100 "mssql.yrd"
               : '_rnglr_type_yard_opt_49) 
# 5532 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 100 "mssql.yrd"
                                 None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 100 "mssql.yrd"
               : '_rnglr_type_yard_opt_49) 
# 5550 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_TABLESAMPLE _rnglr_val -> [_rnglr_val] | a -> failwith "KW_TABLESAMPLE expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_49) 
               |> List.iter (fun (S2) -> 
                (match ((unbox _rnglr_children.[2]) : Token) with LPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "LPAREN expected, but %A found" a )
                 |> List.iter (fun (S3) -> 
                  (match ((unbox _rnglr_children.[3]) : Token) with DEC_NUMBER _rnglr_val -> [_rnglr_val] | a -> failwith "DEC_NUMBER expected, but %A found" a )
                   |> List.iter (fun (S4) -> 
                    ((unbox _rnglr_children.[4]) : '_rnglr_type_yard_opt_50) 
                     |> List.iter (fun (S5) -> 
                      (match ((unbox _rnglr_children.[5]) : Token) with RPAREN _rnglr_val -> [_rnglr_val] | a -> failwith "RPAREN expected, but %A found" a )
                       |> List.iter (fun (S6) -> 
                        ((unbox _rnglr_children.[6]) : '_rnglr_type_yard_opt_51) 
                         |> List.iter (fun (S7) -> 
                          _rnglr_cycle_res := (
                            
# 100 "mssql.yrd"
                                S1, S2, S3, S4, S5, S6, S7
                              )::!_rnglr_cycle_res ) ) ) ) ) ) )
            !_rnglr_cycle_res
          )
            )
# 99 "mssql.yrd"
               : '_rnglr_type_tablesample_clause) 
# 5582 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_FROM _rnglr_val -> [_rnglr_val] | a -> failwith "KW_FROM expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_rule_comma_list_8) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 8 "mssql.yrd"
                                                 S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 91 "mssql.yrd"
               : '_rnglr_type_from_stmnt) 
# 5604 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_rule_list_9) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 161 "mssql.yrd"
                                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 161 "mssql.yrd"
               : '_rnglr_type_yard_rule_comma_list_8) 
# 5624 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_48) 
             |> List.iter (fun (yard_head) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_many_7) 
               |> List.iter (fun (yard_tail) -> 
                _rnglr_cycle_res := (
                  
# 161 "mssql.yrd"
                                                 yard_head::yard_tail
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 161 "mssql.yrd"
               : '_rnglr_type_yard_many_7) 
# 5646 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 161 "mssql.yrd"
                                             []
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 161 "mssql.yrd"
               : '_rnglr_type_yard_many_7) 
# 5664 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun user_defined_function ->
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_47) user_defined_function
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 24 "mssql.yrd"
                    Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_47) 
# 5684 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun user_defined_function ->
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 24 "mssql.yrd"
                  None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_47) 
# 5702 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun user_defined_function ->
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_AS _rnglr_val -> [_rnglr_val] | a -> failwith "KW_AS expected, but %A found" a )
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 24 "mssql.yrd"
                    Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_48) 
# 5722 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun user_defined_function ->
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 24 "mssql.yrd"
                  None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_48) 
# 5740 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_46) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 23 "mssql.yrd"
                     Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 23 "mssql.yrd"
               : '_rnglr_type_yard_opt_46) 
# 5760 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 23 "mssql.yrd"
                   None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 23 "mssql.yrd"
               : '_rnglr_type_yard_opt_46) 
# 5778 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_table_hint) 
             |> List.iter (fun (yard_head) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_some_3) 
               |> List.iter (fun (yard_tail) -> 
                _rnglr_cycle_res := (
                  
# 94 "mssql.yrd"
                                              yard_head::yard_tail
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 94 "mssql.yrd"
               : '_rnglr_type_yard_some_3) 
# 5800 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_table_hint) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 94 "mssql.yrd"
                                            [yard_elem]
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 94 "mssql.yrd"
               : '_rnglr_type_yard_some_3) 
# 5820 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_tablesample_clause) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 93 "mssql.yrd"
                                                   Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 93 "mssql.yrd"
               : '_rnglr_type_yard_opt_45) 
# 5840 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 93 "mssql.yrd"
                                                 None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 93 "mssql.yrd"
               : '_rnglr_type_yard_opt_45) 
# 5858 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_45) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 24 "mssql.yrd"
                    Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_43) 
# 5878 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 24 "mssql.yrd"
                  None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_43) 
# 5896 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_AS _rnglr_val -> [_rnglr_val] | a -> failwith "KW_AS expected, but %A found" a )
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 24 "mssql.yrd"
                    Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_44) 
# 5916 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 24 "mssql.yrd"
                  None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_44) 
# 5934 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun user_defined_function ->
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_44) user_defined_function
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 24 "mssql.yrd"
                    Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_41) 
# 5954 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun user_defined_function ->
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 24 "mssql.yrd"
                  None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_41) 
# 5972 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun user_defined_function ->
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_AS _rnglr_val -> [_rnglr_val] | a -> failwith "KW_AS expected, but %A found" a )
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 24 "mssql.yrd"
                    Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_42) 
# 5992 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun user_defined_function ->
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 24 "mssql.yrd"
                  None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_42) 
# 6010 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_43) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 23 "mssql.yrd"
                     Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 23 "mssql.yrd"
               : '_rnglr_type_yard_opt_40) 
# 6030 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 23 "mssql.yrd"
                   None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 23 "mssql.yrd"
               : '_rnglr_type_yard_opt_40) 
# 6048 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_table_hint) 
             |> List.iter (fun (yard_head) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_some_2) 
               |> List.iter (fun (yard_tail) -> 
                _rnglr_cycle_res := (
                  
# 94 "mssql.yrd"
                                              yard_head::yard_tail
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 94 "mssql.yrd"
               : '_rnglr_type_yard_some_2) 
# 6070 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_table_hint) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 94 "mssql.yrd"
                                            [yard_elem]
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 94 "mssql.yrd"
               : '_rnglr_type_yard_some_2) 
# 6090 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_tablesample_clause) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 93 "mssql.yrd"
                                                   Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 93 "mssql.yrd"
               : '_rnglr_type_yard_opt_39) 
# 6110 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 93 "mssql.yrd"
                                                 None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 93 "mssql.yrd"
               : '_rnglr_type_yard_opt_39) 
# 6128 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_42) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 24 "mssql.yrd"
                    Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_37) 
# 6148 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 24 "mssql.yrd"
                  None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_37) 
# 6166 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_AS _rnglr_val -> [_rnglr_val] | a -> failwith "KW_AS expected, but %A found" a )
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 24 "mssql.yrd"
                    Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_38) 
# 6186 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 24 "mssql.yrd"
                  None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_38) 
# 6204 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_41) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_many_7) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  

                  S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 160 "mssql.yrd"
               : '_rnglr_type_yard_rule_list_9) 
# 6226 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_NOT _rnglr_val -> [_rnglr_val] | a -> failwith "KW_NOT expected, but %A found" a )
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 74 "mssql.yrd"
                     Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 74 "mssql.yrd"
               : '_rnglr_type_yard_opt_36) 
# 6246 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 74 "mssql.yrd"
                   None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 74 "mssql.yrd"
               : '_rnglr_type_yard_opt_36) 
# 6264 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_NOT _rnglr_val -> [_rnglr_val] | a -> failwith "KW_NOT expected, but %A found" a )
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 74 "mssql.yrd"
                     Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 74 "mssql.yrd"
               : '_rnglr_type_yard_opt_35) 
# 6284 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 74 "mssql.yrd"
                   None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 74 "mssql.yrd"
               : '_rnglr_type_yard_opt_35) 
# 6302 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_sql_expr) 
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with KW_IS _rnglr_val -> [_rnglr_val] | a -> failwith "KW_IS expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_yard_opt_36) 
                 |> List.iter (fun (S3) -> 
                  (match ((unbox _rnglr_children.[3]) : Token) with KW_NULL _rnglr_val -> [_rnglr_val] | a -> failwith "KW_NULL expected, but %A found" a )
                   |> List.iter (fun (S4) -> 
                    _rnglr_cycle_res := (
                      
# 32 "mssql.yrd"
                          S1, S2, S3, S4
                        )::!_rnglr_cycle_res ) ) ) )
            !_rnglr_cycle_res
          )
            )
# 79 "mssql.yrd"
               : '_rnglr_type_search_condition_predicate) 
# 6328 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_sql_expr) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_35) 
               |> List.iter (fun (S2) -> 
                (match ((unbox _rnglr_children.[2]) : Token) with KW_LIKE _rnglr_val -> [_rnglr_val] | a -> failwith "KW_LIKE expected, but %A found" a )
                 |> List.iter (fun (S3) -> 
                  ((unbox _rnglr_children.[3]) : '_rnglr_type_sql_expr) 
                   |> List.iter (fun (S4) -> 
                    _rnglr_cycle_res := (
                      
# 32 "mssql.yrd"
                          S1, S2, S3, S4
                        )::!_rnglr_cycle_res ) ) ) )
            !_rnglr_cycle_res
          )
            )
# 79 "mssql.yrd"
               : '_rnglr_type_search_condition_predicate) 
# 6354 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_sql_expr) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_exp_brackets_40) 
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_sql_expr) 
                 |> List.iter (fun (S3) -> 
                  _rnglr_cycle_res := (
                    
# 32 "mssql.yrd"
                        S1, S2, S3
                      )::!_rnglr_cycle_res ) ) )
            !_rnglr_cycle_res
          )
            )
# 79 "mssql.yrd"
               : '_rnglr_type_search_condition_predicate) 
# 6378 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_rule_comma_list_6) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 75 "mssql.yrd"
                   Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 75 "mssql.yrd"
               : '_rnglr_type_yard_opt_34) 
# 6398 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 75 "mssql.yrd"
                 None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 75 "mssql.yrd"
               : '_rnglr_type_yard_opt_34) 
# 6416 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_NOT _rnglr_val -> [_rnglr_val] | a -> failwith "KW_NOT expected, but %A found" a )
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 74 "mssql.yrd"
                     Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 74 "mssql.yrd"
               : '_rnglr_type_yard_opt_33) 
# 6436 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 74 "mssql.yrd"
                   None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 74 "mssql.yrd"
               : '_rnglr_type_yard_opt_33) 
# 6454 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_39) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_34) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  

                  S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 73 "mssql.yrd"
               : '_rnglr_type_search_condition) 
# 6476 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_rule_list_7) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 161 "mssql.yrd"
                                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 161 "mssql.yrd"
               : '_rnglr_type_yard_rule_comma_list_6) 
# 6496 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_38) 
             |> List.iter (fun (yard_head) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_many_6) 
               |> List.iter (fun (yard_tail) -> 
                _rnglr_cycle_res := (
                  
# 161 "mssql.yrd"
                                                 yard_head::yard_tail
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 161 "mssql.yrd"
               : '_rnglr_type_yard_many_6) 
# 6518 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 161 "mssql.yrd"
                                             []
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 161 "mssql.yrd"
               : '_rnglr_type_yard_many_6) 
# 6536 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_NOT _rnglr_val -> [_rnglr_val] | a -> failwith "KW_NOT expected, but %A found" a )
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 74 "mssql.yrd"
                     Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 74 "mssql.yrd"
               : '_rnglr_type_yard_opt_32) 
# 6556 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 74 "mssql.yrd"
                   None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 74 "mssql.yrd"
               : '_rnglr_type_yard_opt_32) 
# 6574 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_NOT _rnglr_val -> [_rnglr_val] | a -> failwith "KW_NOT expected, but %A found" a )
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 74 "mssql.yrd"
                     Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 74 "mssql.yrd"
               : '_rnglr_type_yard_opt_31) 
# 6594 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 74 "mssql.yrd"
                   None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 74 "mssql.yrd"
               : '_rnglr_type_yard_opt_31) 
# 6612 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_37) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_many_6) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  

                  S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 160 "mssql.yrd"
               : '_rnglr_type_yard_rule_list_7) 
# 6634 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_36) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 70 "mssql.yrd"
                     Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 70 "mssql.yrd"
               : '_rnglr_type_yard_opt_30) 
# 6654 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 70 "mssql.yrd"
                   None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 70 "mssql.yrd"
               : '_rnglr_type_yard_opt_30) 
# 6672 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_from_stmnt) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 69 "mssql.yrd"
                    Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 69 "mssql.yrd"
               : '_rnglr_type_yard_opt_29) 
# 6692 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 69 "mssql.yrd"
                  None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 69 "mssql.yrd"
               : '_rnglr_type_yard_opt_29) 
# 6710 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_SELECT _rnglr_val -> [_rnglr_val] | a -> failwith "KW_SELECT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_rule_list_5) 
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_yard_opt_29) 
                 |> List.iter (fun (S3) -> 
                  ((unbox _rnglr_children.[3]) : '_rnglr_type_yard_opt_30) 
                   |> List.iter (fun (S4) -> 
                    _rnglr_cycle_res := (
                      
# 8 "mssql.yrd"
                                     S1, S2, S3, S4
                        )::!_rnglr_cycle_res ) ) ) )
            !_rnglr_cycle_res
          )
            )
# 50 "mssql.yrd"
               : '_rnglr_type_query_specification) 
# 6736 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_35) 
             |> List.iter (fun (yard_head) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_many_5) 
               |> List.iter (fun (yard_tail) -> 
                _rnglr_cycle_res := (
                  
# 161 "mssql.yrd"
                                                 yard_head::yard_tail
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 161 "mssql.yrd"
               : '_rnglr_type_yard_many_5) 
# 6758 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 161 "mssql.yrd"
                                             []
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 161 "mssql.yrd"
               : '_rnglr_type_yard_many_5) 
# 6776 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_34) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 24 "mssql.yrd"
                    Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_27) 
# 6796 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 24 "mssql.yrd"
                  None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_27) 
# 6814 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_AS _rnglr_val -> [_rnglr_val] | a -> failwith "KW_AS expected, but %A found" a )
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 24 "mssql.yrd"
                    Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_28) 
# 6834 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 24 "mssql.yrd"
                  None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_28) 
# 6852 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun udt_column_runtime ->
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_33) udt_column_runtime
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 15 "mssql.yrd"
                                            Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 15 "mssql.yrd"
               : '_rnglr_type_yard_opt_25) 
# 6872 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun udt_column_runtime ->
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 15 "mssql.yrd"
                                          None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 15 "mssql.yrd"
               : '_rnglr_type_yard_opt_25) 
# 6890 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun udt_column_runtime ->
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_rule_comma_list_3) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 62 "mssql.yrd"
                                                          Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 62 "mssql.yrd"
               : '_rnglr_type_yard_opt_26) 
# 6910 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun udt_column_runtime ->
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 62 "mssql.yrd"
                                                        None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 62 "mssql.yrd"
               : '_rnglr_type_yard_opt_26) 
# 6928 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_32) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 15 "mssql.yrd"
                                 Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 15 "mssql.yrd"
               : '_rnglr_type_yard_opt_24) 
# 6948 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 15 "mssql.yrd"
                               None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 15 "mssql.yrd"
               : '_rnglr_type_yard_opt_24) 
# 6966 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_31) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 24 "mssql.yrd"
                    Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_22) 
# 6986 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 24 "mssql.yrd"
                  None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_22) 
# 7004 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_AS _rnglr_val -> [_rnglr_val] | a -> failwith "KW_AS expected, but %A found" a )
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 24 "mssql.yrd"
                    Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_23) 
# 7024 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 24 "mssql.yrd"
                  None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_23) 
# 7042 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun udt_column_runtime ->
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_30) udt_column_runtime
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 15 "mssql.yrd"
                                            Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 15 "mssql.yrd"
               : '_rnglr_type_yard_opt_20) 
# 7062 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun udt_column_runtime ->
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 15 "mssql.yrd"
                                          None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 15 "mssql.yrd"
               : '_rnglr_type_yard_opt_20) 
# 7080 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun udt_column_runtime ->
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_rule_comma_list_3) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 62 "mssql.yrd"
                                                          Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 62 "mssql.yrd"
               : '_rnglr_type_yard_opt_21) 
# 7100 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( fun udt_column_runtime ->
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 62 "mssql.yrd"
                                                        None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 62 "mssql.yrd"
               : '_rnglr_type_yard_opt_21) 
# 7118 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_29) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 15 "mssql.yrd"
                                 Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 15 "mssql.yrd"
               : '_rnglr_type_yard_opt_19) 
# 7138 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 15 "mssql.yrd"
                               None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 15 "mssql.yrd"
               : '_rnglr_type_yard_opt_19) 
# 7156 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_28) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_many_5) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  

                  S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 160 "mssql.yrd"
               : '_rnglr_type_yard_rule_list_5) 
# 7178 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_rule_list_4) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 161 "mssql.yrd"
                                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 161 "mssql.yrd"
               : '_rnglr_type_yard_rule_comma_list_3) 
# 7198 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_27) 
             |> List.iter (fun (yard_head) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_many_4) 
               |> List.iter (fun (yard_tail) -> 
                _rnglr_cycle_res := (
                  
# 161 "mssql.yrd"
                                                 yard_head::yard_tail
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 161 "mssql.yrd"
               : '_rnglr_type_yard_many_4) 
# 7220 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 161 "mssql.yrd"
                                             []
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 161 "mssql.yrd"
               : '_rnglr_type_yard_many_4) 
# 7238 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_sql_expr) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_many_4) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 32 "mssql.yrd"
                      S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 160 "mssql.yrd"
               : '_rnglr_type_yard_rule_list_4) 
# 7260 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_26) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 46 "mssql.yrd"
                         Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 46 "mssql.yrd"
               : '_rnglr_type_yard_opt_17) 
# 7280 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 46 "mssql.yrd"
                       None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 46 "mssql.yrd"
               : '_rnglr_type_yard_opt_17) 
# 7298 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_ALL _rnglr_val -> [_rnglr_val] | a -> failwith "KW_ALL expected, but %A found" a )
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 46 "mssql.yrd"
                                  Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 46 "mssql.yrd"
               : '_rnglr_type_yard_opt_18) 
# 7318 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 46 "mssql.yrd"
                                None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 46 "mssql.yrd"
               : '_rnglr_type_yard_opt_18) 
# 7336 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_25) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_17) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  

                  S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 43 "mssql.yrd"
               : '_rnglr_type_query_expression) 
# 7358 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_24) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 41 "mssql.yrd"
                     Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 41 "mssql.yrd"
               : '_rnglr_type_yard_opt_16) 
# 7378 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 41 "mssql.yrd"
                   None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 41 "mssql.yrd"
               : '_rnglr_type_yard_opt_16) 
# 7396 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_query_expression) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_16) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 40 "mssql.yrd"
                      S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 38 "mssql.yrd"
               : '_rnglr_type_select_stmnt) 
# 7418 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_sql_expr) 
             |> List.iter (fun (yard_head) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_many_3) 
               |> List.iter (fun (yard_tail) -> 
                _rnglr_cycle_res := (
                  
# 32 "mssql.yrd"
                      yard_head::yard_tail
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 32 "mssql.yrd"
               : '_rnglr_type_yard_many_3) 
# 7440 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 32 "mssql.yrd"
                  []
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 32 "mssql.yrd"
               : '_rnglr_type_yard_many_3) 
# 7458 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_23) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 16 "mssql.yrd"
                                   Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 16 "mssql.yrd"
               : '_rnglr_type_yard_opt_15) 
# 7478 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 16 "mssql.yrd"
                                 None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 16 "mssql.yrd"
               : '_rnglr_type_yard_opt_15) 
# 7496 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_IF _rnglr_val -> [_rnglr_val] | a -> failwith "KW_IF expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_sql_expr) 
               |> List.iter (fun (S2) -> 
                (match ((unbox _rnglr_children.[2]) : Token) with KW_THEN _rnglr_val -> [_rnglr_val] | a -> failwith "KW_THEN expected, but %A found" a )
                 |> List.iter (fun (S3) -> 
                  ((unbox _rnglr_children.[3]) : '_rnglr_type_yard_exp_brackets_22) 
                   |> List.iter (fun (S4) -> 
                    _rnglr_cycle_res := (
                      
# 35 "mssql.yrd"
                          S1, S2, S3, S4
                        )::!_rnglr_cycle_res ) ) ) )
            !_rnglr_cycle_res
          )
            )
# 28 "mssql.yrd"
               : '_rnglr_type_proc_body_stmnt) 
# 7522 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_RETURN _rnglr_val -> [_rnglr_val] | a -> failwith "KW_RETURN expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_sql_expr) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 34 "mssql.yrd"
                      S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 28 "mssql.yrd"
               : '_rnglr_type_proc_body_stmnt) 
# 7544 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_DECLARE _rnglr_val -> [_rnglr_val] | a -> failwith "KW_DECLARE expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              (match ((unbox _rnglr_children.[1]) : Token) with LOCALVAR _rnglr_val -> [_rnglr_val] | a -> failwith "LOCALVAR expected, but %A found" a )
               |> List.iter (fun (S2) -> 
                (match ((unbox _rnglr_children.[2]) : Token) with KW_AS _rnglr_val -> [_rnglr_val] | a -> failwith "KW_AS expected, but %A found" a )
                 |> List.iter (fun (S3) -> 
                  ((unbox _rnglr_children.[3]) : '_rnglr_type_sql_datatype) 
                   |> List.iter (fun (S4) -> 
                    ((unbox _rnglr_children.[4]) : '_rnglr_type_yard_opt_15) 
                     |> List.iter (fun (S5) -> 
                      _rnglr_cycle_res := (
                        
# 33 "mssql.yrd"
                            S1, S2, S3, S4, S5
                          )::!_rnglr_cycle_res ) ) ) ) )
            !_rnglr_cycle_res
          )
            )
# 28 "mssql.yrd"
               : '_rnglr_type_proc_body_stmnt) 
# 7572 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_sql_expr) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 32 "mssql.yrd"
                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 28 "mssql.yrd"
               : '_rnglr_type_proc_body_stmnt) 
# 7592 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_execute_stmnt) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 31 "mssql.yrd"
                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 28 "mssql.yrd"
               : '_rnglr_type_proc_body_stmnt) 
# 7612 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_set_stmnt) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 30 "mssql.yrd"
                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 28 "mssql.yrd"
               : '_rnglr_type_proc_body_stmnt) 
# 7632 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_select_stmnt) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 29 "mssql.yrd"
                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 28 "mssql.yrd"
               : '_rnglr_type_proc_body_stmnt) 
# 7652 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with SEMI _rnglr_val -> [_rnglr_val] | a -> failwith "SEMI expected, but %A found" a )
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 21 "mssql.yrd"
                                        Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 21 "mssql.yrd"
               : '_rnglr_type_yard_opt_14) 
# 7672 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 21 "mssql.yrd"
                                      None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 21 "mssql.yrd"
               : '_rnglr_type_yard_opt_14) 
# 7690 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_END _rnglr_val -> [_rnglr_val] | a -> failwith "KW_END expected, but %A found" a )
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 24 "mssql.yrd"
                                                             Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_13) 
# 7710 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 24 "mssql.yrd"
                                                           None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_13) 
# 7728 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_21) 
             |> List.iter (fun (yard_head) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_many_2) 
               |> List.iter (fun (yard_tail) -> 
                _rnglr_cycle_res := (
                  
# 24 "mssql.yrd"
                                       yard_head::yard_tail
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_many_2) 
# 7750 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 24 "mssql.yrd"
                                   []
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_many_2) 
# 7768 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with SEMI _rnglr_val -> [_rnglr_val] | a -> failwith "SEMI expected, but %A found" a )
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 21 "mssql.yrd"
                                        Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 21 "mssql.yrd"
               : '_rnglr_type_yard_opt_12) 
# 7788 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 21 "mssql.yrd"
                                      None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 21 "mssql.yrd"
               : '_rnglr_type_yard_opt_12) 
# 7806 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_BEGIN _rnglr_val -> [_rnglr_val] | a -> failwith "KW_BEGIN expected, but %A found" a )
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 24 "mssql.yrd"
                          Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_11) 
# 7826 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 24 "mssql.yrd"
                        None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 24 "mssql.yrd"
               : '_rnglr_type_yard_opt_11) 
# 7844 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_20) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 23 "mssql.yrd"
                                                Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 23 "mssql.yrd"
               : '_rnglr_type_yard_opt_10) 
# 7864 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 23 "mssql.yrd"
                                              None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 23 "mssql.yrd"
               : '_rnglr_type_yard_opt_10) 
# 7882 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_19) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 23 "mssql.yrd"
                     Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 23 "mssql.yrd"
               : '_rnglr_type_yard_opt_9) 
# 7902 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 23 "mssql.yrd"
                   None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 23 "mssql.yrd"
               : '_rnglr_type_yard_opt_9) 
# 7920 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_execute_as) 
             |> List.iter (fun (yard_head) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_some_1) 
               |> List.iter (fun (yard_tail) -> 
                _rnglr_cycle_res := (
                  
# 23 "mssql.yrd"
                                yard_head::yard_tail
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 23 "mssql.yrd"
               : '_rnglr_type_yard_some_1) 
# 7942 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_execute_as) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 23 "mssql.yrd"
                              [yard_elem]
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 23 "mssql.yrd"
               : '_rnglr_type_yard_some_1) 
# 7962 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_rule_comma_list_1) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 22 "mssql.yrd"
                    Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 22 "mssql.yrd"
               : '_rnglr_type_yard_opt_8) 
# 7982 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 22 "mssql.yrd"
                  None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 22 "mssql.yrd"
               : '_rnglr_type_yard_opt_8) 
# 8000 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_18) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 21 "mssql.yrd"
                                        Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 21 "mssql.yrd"
               : '_rnglr_type_yard_opt_7) 
# 8020 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 21 "mssql.yrd"
                                      None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 21 "mssql.yrd"
               : '_rnglr_type_yard_opt_7) 
# 8038 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_17) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 8 "mssql.yrd"
                                         Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 8 "mssql.yrd"
               : '_rnglr_type_yard_opt_6) 
# 8058 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 8 "mssql.yrd"
                                       None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 8 "mssql.yrd"
               : '_rnglr_type_yard_opt_6) 
# 8076 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_CREATE _rnglr_val -> [_rnglr_val] | a -> failwith "KW_CREATE expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_exp_brackets_16) 
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_yard_opt_6) 
                 |> List.iter (fun (S3) -> 
                  ((unbox _rnglr_children.[3]) : '_rnglr_type_ident) 
                   |> List.iter (fun (S4) -> 
                    ((unbox _rnglr_children.[4]) : '_rnglr_type_yard_opt_7) 
                     |> List.iter (fun (S5) -> 
                      ((unbox _rnglr_children.[5]) : '_rnglr_type_yard_opt_8) 
                       |> List.iter (fun (S6) -> 
                        ((unbox _rnglr_children.[6]) : '_rnglr_type_yard_opt_9) 
                         |> List.iter (fun (S7) -> 
                          ((unbox _rnglr_children.[7]) : '_rnglr_type_yard_opt_10) 
                           |> List.iter (fun (S8) -> 
                            (match ((unbox _rnglr_children.[8]) : Token) with KW_AS _rnglr_val -> [_rnglr_val] | a -> failwith "KW_AS expected, but %A found" a )
                             |> List.iter (fun (S9) -> 
                              ((unbox _rnglr_children.[9]) : '_rnglr_type_yard_opt_11) 
                               |> List.iter (fun (S10) -> 
                                ((unbox _rnglr_children.[10]) : '_rnglr_type_yard_many_2) 
                                 |> List.iter (fun (S11) -> 
                                  ((unbox _rnglr_children.[11]) : '_rnglr_type_yard_opt_13) 
                                   |> List.iter (fun (S12) -> 
                                    ((unbox _rnglr_children.[12]) : '_rnglr_type_yard_opt_14) 
                                     |> List.iter (fun (S13) -> 
                                      _rnglr_cycle_res := (
                                        
# 20 "mssql.yrd"
                                            S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13
                                          )::!_rnglr_cycle_res ) ) ) ) ) ) ) ) )
                     ) ) ) )
            !_rnglr_cycle_res
          )
            )
# 19 "mssql.yrd"
               : '_rnglr_type_create_proc) 
# 8121 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_rule_list_2) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 161 "mssql.yrd"
                                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 161 "mssql.yrd"
               : '_rnglr_type_yard_rule_comma_list_1) 
# 8141 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_15) 
             |> List.iter (fun (yard_head) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_many_1) 
               |> List.iter (fun (yard_tail) -> 
                _rnglr_cycle_res := (
                  
# 161 "mssql.yrd"
                                                 yard_head::yard_tail
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 161 "mssql.yrd"
               : '_rnglr_type_yard_many_1) 
# 8163 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 161 "mssql.yrd"
                                             []
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 161 "mssql.yrd"
               : '_rnglr_type_yard_many_1) 
# 8181 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_proc_formal_param) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_many_1) 
               |> List.iter (fun (S2) -> 
                _rnglr_cycle_res := (
                  
# 22 "mssql.yrd"
                                  S1, S2
                    )::!_rnglr_cycle_res ) )
            !_rnglr_cycle_res
          )
            )
# 160 "mssql.yrd"
               : '_rnglr_type_yard_rule_list_2) 
# 8203 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_READONLY _rnglr_val -> [_rnglr_val] | a -> failwith "KW_READONLY expected, but %A found" a )
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 17 "mssql.yrd"
                                            Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 17 "mssql.yrd"
               : '_rnglr_type_yard_opt_5) 
# 8223 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 17 "mssql.yrd"
                                          None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 17 "mssql.yrd"
               : '_rnglr_type_yard_opt_5) 
# 8241 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_14) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 17 "mssql.yrd"
                       Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 17 "mssql.yrd"
               : '_rnglr_type_yard_opt_4) 
# 8261 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 17 "mssql.yrd"
                     None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 17 "mssql.yrd"
               : '_rnglr_type_yard_opt_4) 
# 8279 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_13) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 16 "mssql.yrd"
                                   Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 16 "mssql.yrd"
               : '_rnglr_type_yard_opt_3) 
# 8299 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 16 "mssql.yrd"
                                 None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 16 "mssql.yrd"
               : '_rnglr_type_yard_opt_3) 
# 8317 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_VARYING _rnglr_val -> [_rnglr_val] | a -> failwith "KW_VARYING expected, but %A found" a )
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 16 "mssql.yrd"
                      Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 16 "mssql.yrd"
               : '_rnglr_type_yard_opt_2) 
# 8337 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 16 "mssql.yrd"
                    None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 16 "mssql.yrd"
               : '_rnglr_type_yard_opt_2) 
# 8355 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_12) 
             |> List.iter (fun (yard_elem) -> 
              _rnglr_cycle_res := (
                
# 15 "mssql.yrd"
                                 Some(yard_elem)
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 15 "mssql.yrd"
               : '_rnglr_type_yard_opt_1) 
# 8375 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            _rnglr_cycle_res := (
              
# 15 "mssql.yrd"
                               None
                )::!_rnglr_cycle_res
            !_rnglr_cycle_res
          )
            )
# 15 "mssql.yrd"
               : '_rnglr_type_yard_opt_1) 
# 8393 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_yard_exp_brackets_11) 
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_yard_opt_2) 
               |> List.iter (fun (S2) -> 
                ((unbox _rnglr_children.[2]) : '_rnglr_type_yard_opt_3) 
                 |> List.iter (fun (S3) -> 
                  ((unbox _rnglr_children.[3]) : '_rnglr_type_yard_opt_4) 
                   |> List.iter (fun (S4) -> 
                    ((unbox _rnglr_children.[4]) : '_rnglr_type_yard_opt_5) 
                     |> List.iter (fun (S5) -> 
                      _rnglr_cycle_res := (
                        

                        S1, S2, S3, S4, S5
                          )::!_rnglr_cycle_res ) ) ) ) )
            !_rnglr_cycle_res
          )
            )
# 14 "mssql.yrd"
               : '_rnglr_type_proc_formal_param) 
# 8421 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with TEMPOBJ _rnglr_val -> [_rnglr_val] | a -> failwith "TEMPOBJ expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 11 "mssql.yrd"
                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 7 "mssql.yrd"
               : '_rnglr_type_start2) 
# 8441 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with GLOBALTEMPOBJ _rnglr_val -> [_rnglr_val] | a -> failwith "GLOBALTEMPOBJ expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 10 "mssql.yrd"
                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 7 "mssql.yrd"
               : '_rnglr_type_start2) 
# 8461 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with GLOBALVAR _rnglr_val -> [_rnglr_val] | a -> failwith "GLOBALVAR expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 9 "mssql.yrd"
                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 7 "mssql.yrd"
               : '_rnglr_type_start2) 
# 8481 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with KW_SELECT _rnglr_val -> [_rnglr_val] | a -> failwith "KW_SELECT expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              ((unbox _rnglr_children.[1]) : '_rnglr_type_ident) 
               |> List.iter (fun (S2) -> 
                (match ((unbox _rnglr_children.[2]) : Token) with KW_FROM _rnglr_val -> [_rnglr_val] | a -> failwith "KW_FROM expected, but %A found" a )
                 |> List.iter (fun (S3) -> 
                  ((unbox _rnglr_children.[3]) : '_rnglr_type_ident) 
                   |> List.iter (fun (S4) -> 
                    _rnglr_cycle_res := (
                      
# 8 "mssql.yrd"
                                     S1, S2, S3, S4
                        )::!_rnglr_cycle_res ) ) ) )
            !_rnglr_cycle_res
          )
            )
# 7 "mssql.yrd"
               : '_rnglr_type_start2) 
# 8507 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_start2) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 4 "mssql.yrd"
                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 1 "mssql.yrd"
               : '_rnglr_type_root_rule) 
# 8527 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            (match ((unbox _rnglr_children.[0]) : Token) with GO _rnglr_val -> [_rnglr_val] | a -> failwith "GO expected, but %A found" a )
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 3 "mssql.yrd"
                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 1 "mssql.yrd"
               : '_rnglr_type_root_rule) 
# 8547 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          (
            let _rnglr_cycle_res = ref []
            ((unbox _rnglr_children.[0]) : '_rnglr_type_create_proc) 
             |> List.iter (fun (S1) -> 
              _rnglr_cycle_res := (
                
# 2 "mssql.yrd"
                    S1
                  )::!_rnglr_cycle_res )
            !_rnglr_cycle_res
          )
            )
# 1 "mssql.yrd"
               : '_rnglr_type_root_rule) 
# 8567 "MSParser.fs"
      );
  (
    fun (_rnglr_children : array<_>) (parserRange : (Microsoft.FSharp.Text.Lexing.Position * Microsoft.FSharp.Text.Lexing.Position)) -> 
      box (
        ( 
          ((unbox _rnglr_children.[0]) : '_rnglr_type_root_rule) 
            )
# 1 "mssql.yrd"
               : '_rnglr_type_yard_start_rule) 
# 8577 "MSParser.fs"
      );
  |] , [|
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_binop)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_create_proc)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_execute_as)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_execute_stmnt)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_from_stmnt)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_full_ident)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_ident)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_proc_body_stmnt)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_proc_formal_param)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_query_expression)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_query_specification)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_root_rule)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_search_condition)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_search_condition_predicate)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_select_stmnt)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_set_stmnt)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_sql_datatype)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_sql_expr)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_sql_expr_lrecu)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_sql_value)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_start2)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_table_hint)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_tablesample_clause)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_11)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_12)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_13)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_14)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_15)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_16)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_17)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_18)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_19)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_20)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_21)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_22)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_23)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_24)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_25)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_26)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_27)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_28)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_29)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( fun udt_column_runtime ->
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_30)  udt_column_runtime ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_31)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_32)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( fun udt_column_runtime ->
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_33)  udt_column_runtime ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_34)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_35)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_36)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_37)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_38)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_39)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_40)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_41)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_42)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_43)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( fun user_defined_function ->
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_44)  user_defined_function ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_45)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_46)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( fun user_defined_function ->
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_47)  user_defined_function ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_48)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_49)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_50)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_51)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_52)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_53)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_54)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_55)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_56)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_57)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_58)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_59)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_60)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_61)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_62)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_63)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_64)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_65)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_66)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_67)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_68)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_69)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_70)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_71)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_72)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_73)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_74)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_75)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( fun udt_column_runtime ->
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_76)  udt_column_runtime ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( fun udt_column_runtime ->
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_77)  udt_column_runtime ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( fun udt_column_runtime ->
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_78)  udt_column_runtime ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( fun udt_column_runtime ->
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_79)  udt_column_runtime ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_80)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_81)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_82)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_83)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_84)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_85)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_86)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_87)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_88)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_89)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_90)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_91)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_92)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_93)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_94)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_95)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_96)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_97)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_exp_brackets_98)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_many_1)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_many_2)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_many_3)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_many_4)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_many_5)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_many_6)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_many_7)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_many_8)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_1)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_10)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_11)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_12)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_13)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_14)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_15)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_16)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_17)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_18)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_19)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_2)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( fun udt_column_runtime ->
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_20)  udt_column_runtime ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( fun udt_column_runtime ->
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_21)  udt_column_runtime ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_22)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_23)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_24)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( fun udt_column_runtime ->
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_25)  udt_column_runtime ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( fun udt_column_runtime ->
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_26)  udt_column_runtime ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_27)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_28)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_29)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_3)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_30)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_31)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_32)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_33)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_34)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_35)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_36)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_37)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_38)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_39)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_4)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_40)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( fun user_defined_function ->
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_41)  user_defined_function ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( fun user_defined_function ->
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_42)  user_defined_function ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_43)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_44)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_45)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_46)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( fun user_defined_function ->
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_47)  user_defined_function ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( fun user_defined_function ->
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_48)  user_defined_function ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_49)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_5)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_50)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_51)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_52)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_53)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_54)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_55)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_56)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_57)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_58)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_59)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_6)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_60)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_61)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_62)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_63)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_7)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_8)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_opt_9)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_rule_comma_list_1)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_rule_comma_list_3)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_rule_comma_list_6)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_rule_comma_list_8)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_rule_list_10)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_rule_list_2)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_rule_list_4)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_rule_list_5)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_rule_list_7)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_rule_list_9)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_some_1)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_some_2)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_some_3)   ) |> List.concat));
    (fun (_rnglr_list : list<_>) -> 
      box ( 
        _rnglr_list |> List.map (fun _rnglr_item -> ((unbox _rnglr_item) : '_rnglr_type_yard_start_rule)   ) |> List.concat));
  |] 
let translate (args : TranslateArguments<_,_>) (tree : Tree<_>) : '_rnglr_type_yard_start_rule = 
  unbox (tree.Translate _rnglr_rule_  leftSide _rnglr_concats (if args.filterEpsilons then _rnglr_filtered_epsilons else _rnglr_epsilons) args.tokenToRange args.zeroPosition args.clearAST) : '_rnglr_type_yard_start_rule
