// Signature file for parser generated by fsyacc
module Parser
type token = 
  | SEMI of (string)
  | PLUS of (string)
  | KW_FUN of (string)
  | ARROW of (string)
  | KW_LET of (string)
  | EQ of (string)
  | NUMBER of (string)
  | IDENT of (string)
  | EOF of (string)
type tokenId = 
    | TOKEN_SEMI
    | TOKEN_PLUS
    | TOKEN_KW_FUN
    | TOKEN_ARROW
    | TOKEN_KW_LET
    | TOKEN_EQ
    | TOKEN_NUMBER
    | TOKEN_IDENT
    | TOKEN_EOF
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__starts
    | NONTERM_yard_exp_brackets_2
    | NONTERM_subexpr
    | NONTERM_expr
    | NONTERM_num
    | NONTERM_var
    | NONTERM_ident
    | NONTERM_s
    | NONTERM_yard_many_1
    | NONTERM_yard_rule_not_empty_list_1
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val s : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ('a) 
