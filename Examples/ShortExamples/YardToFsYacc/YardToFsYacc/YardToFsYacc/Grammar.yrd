{
open AST
}

(*  Comon grammar templates from ./GrammarTemplates *)
include "Common.yrd"

+s: lst=not_empty_list<<expr SEMI>>{Prog lst};

ident: id=IDENT {Ident id};

var: v=IDENT {Var v};

num: n=NUMBER {Number(int n)};

expr: "let" id=ident EQ expr=subexpr{Expr(id,expr)};

subexpr:
	  n=num {n}
	| v=var {v} 
	| l=subexpr PLUS r=subexpr {Sum(l,r)}
	| "fun" id=ident ARROW body=subexpr {Fun(id,body)}
	;