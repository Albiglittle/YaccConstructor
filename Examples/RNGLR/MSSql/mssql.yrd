(*
  mssql.yrd contains grammar of MS-SQL\T-SQL.
  
  Copyright 2012, 2013 Anastasiya Ragozina <ragozina.anastasiya@gmail.com>

  This file is part of YaccConctructor.

  YaccConstructor is free software:you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*)
(*Вопрос про execute*)
{
open Microsoft.FSharp.Text.Lexing
}
(* include "../../../GrammarTemplates/Common.yrd" *)


list <<item separator>>: 
      {[]}
    | hd=item tl=(separator itm=item {itm})* {hd::tl}
    ;

not_empty_list<<item separator>>:
    hd=item tl=(separator itm=item {itm})* {hd::tl}
    ;

brace_opt<<o_br block cl_br>>:
      block 
    | -o_br block -cl_br
    ;



[<Start>]
root_rule: list<<batch_body KW_GO?>> KW_GO?

batch_body: 
   create_proc
 | set_stmnt
 | KW_USE LBRACKET "mdw_control" RBRACKET
 | begin_transaction
 | commit_transaction
 | declare
 | case (**&&&***)
 | rollback_transaction
 (* | if_stmt *)
 | drop_procedure 
  
rollback_transaction:
    KW_ROLLBACK (KW_TRAN | KW_TRANSACTION)? 
         (IDENT | LOCALVAR)? 
    SEMI?
(*****************************************SET****************************************************)

set_stmnt:
    KW_SET (
        "ANSI_NULLS" | "ANSI_DEFAULTS" | "ANSI_NULL_DFLT" 
            | "ANSI_PADDING" | "ANSI_WARNINGS" | "CONCAT_NULL_YIELDS_NULL"
            | "CURSOR_CLOSE_ON_COMMIT" | "QUOTED_IDENTIFIER" 
            | "FMTONLY" | "FORCEPLAN" | "IMPLICIT_TRANSACTIONS"
            | "NOCOUNT" | "NOEXEC" | "NUMERIC_ROUNDABORT" | "PARSEONLY"
            | "REMOTE_PROC_TRANSACTIONS" | "SHOWPLAN_ALL" | "SHOWPLAN_TEXT"
            | "SHOWPLAN_XML" | "STATISTICS" ("IO" | "PROFILE" | "TIME" | KW_XML)
            | "XACT_ABORT" ) (KW_ON | KW_OFF)
            | set_localvar

set_localvar:
    KW_SET
    ( 
        LOCALVAR 
        (DOUBLE_COLON (*property_name |*) ident )? OP_EQ sql_expr | STRING_CONST ( DOT | DOUBLE_COLON ) ident LPAREN comma_list<<proc_formal_param>> RPAREN (*свойство пользовательского типа или общее поле польз типа*)
    )
    |
    ( LOCALVAR OP_EQ 
        ( LOCALVAR | ident | ( KW_CURSOR ( KW_FORWARD_ONLY | KW_SCROLL )? 
        ( KW_STATIC | KW_KEYSET | KW_DYNAMIC | KW_FAST_FORWARD )? 
        ( KW_READ_ONLY | KW_SCROLL_LOCKS | KW_OPTIMISTIC )? 
        KW_TYPE_WARNING? 
        KW_FOR select_stmnt 
        ( KW_FOR ( KW_EAD ONLY | KW_UPDATE ( KW_OF comma_list<<ident>> )?))? 
        ) 
        )
    )   
    
(*********************************PROCEDURE************************************************************)    

drop_procedure: KW_DROP ( KW_PROC | KW_PROCEDURE ) ( (ident DOT)? ident)+

proc_formal_param:
    LOCALVAR (full_ident DOT)? sql_datatype?
    KW_VARYING? (OP_EQ (KW_NULL | DEC_NUMBER | STRING_CONST) )?
    (KW_OUT | KW_OUTPUT)? KW_READONLY?  
  
create_proc:
    KW_CREATE (KW_PROCEDURE | KW_PROC)
    (ident DOT)? ident (SEMI DEC_NUMBER)? 
    brace_opt<<LPAREN (comma_list<<proc_formal_param>>?) RPAREN>>
    (KW_WITH (execute_as)+ )? 
    ( KW_FOR KW_REPLICATION )?
    KW_AS KW_BEGIN? (proc_body_stmnt SEMI?)* KW_END?
    SEMI?

procedure_option: 
      KW_ENCRYPTION?
    | KW_RECOMPILE?
    | KW_EXECUTE_AS_Clause?

proc_body_stmnt:
     select_stmnt
   | set_stmnt
   | execute_stmnt
   | sql_expr
   | declare
   | KW_RETURN sql_expr
   | if_stmt
   | raiserror_stmnt
   | stmt_block
   | KW_BEGIN proc_body_stmnt KW_END
   | begin_transaction
   | commit_transaction
   | rollback_transaction
   | drop_procedure
   

(***********************************STATEMENTS******************************************************)

stmt_block: KW_BEGIN (proc_body_stmnt SEMI?)* KW_END

if_stmt: KW_IF brace_opt<<LPAREN sql_expr RPAREN>> proc_body_stmnt (KW_ELSE proc_body_stmnt)?
                

raiserror_stmnt:
    KW_RAISERROR LPAREN ( dec_num | STRING_CONST | LOCALVAR )
    ( COMMA dec_num COMMA dec_num )
    ( COMMA comma_list<<sql_expr>> )? RPAREN
    ( KW_WITH comma_list<< ("LOG" | KW_NOWAIT | "SETERROR")>> )?
   
(***********************************DECLARE**********************************************************)

declare:  
    KW_DECLARE 
    comma_list<<(
        LOCALVAR KW_AS? sql_datatype
        | ident KW_CURSOR KW_LOCAL? KW_STATIC? KW_FOR? sql_expr
        | ident KW_AS? table_type_definition
    )>>
    SEMI?

table_type_definition: 
     KW_TABLE LPAREN (column_definition | table_constraint)* RPAREN 

column_definition:
    ident (("scalar_data_type") | (KW_AS sql_expr))
    (KW_COLLATE ident)? 
    ((KW_DEFAULT sql_expr)? | KW_IDENTITY (DEC_NUMBER COMMA DEC_NUMBER)? )? 
    (KW_ROWGUIDCOL)? 
    (column_constraint)? 

column_constraint: 
    ((KW_NULL | KW_NOT KW_NULL)? 
    | (KW_PRIMARY KW_KEY | KW_UNIQUE)?
    | KW_CHECK sql_expr 
    ) 

table_constraint: 
     ((KW_PRIMARY KW_KEY | KW_UNIQUE) LPAREN comma_list<<ident>> RPAREN) 
     | (KW_CHECK LPAREN search_condition RPAREN) 
       
(*****************************************SELECT****************************************************)

select_stmnt:  
    ((KW_WITH comma_list<<common_table_expression>>)?
    query_expression 
    (KW_ORDER KW_BY comma_list<<( (ident| IDENT | DEC_NUMBER) (KW_ASC | KW_DESC)?)>>)? 
    (KW_COMPUTE 
        comma_list<<( (KW_AVG | KW_COUNT | KW_MAX | KW_MIN | KW_SUM) LPAREN sql_expr RPAREN)>> 
        (KW_BY comma_list<<sql_expr>>)? 
    )? 
    for? 
    (KW_OPTION LPAREN comma_list<<query_hint>> RPAREN)? )
    | KW_SELECT comma_list<<(LOCALVAR OP_EQ sql_expr)>> SEMI?
    |KW_SELECT (STAR | IDENT) KW_FROM full_ident KW_WHERE sql_expr (((KW_AND | KW_OR) LPAREN? sql_expr RPAREN? )*)?
     
    
for:
    (KW_FOR (KW_BROWSE | xml))?
    
xml:
    KW_XML 
    ( 
        (KW_RAW (LPAREN STRING_CONST RPAREN)? | KW_AUTO) 
        ( 
            common_directives
            (COMMA (KW_XMLDATA | KW_XMLSCHEMA (LPAREN STRING_CONST RPAREN)?))? 
            (COMMA KW_ELEMENTS (KW_XSINIL | KW_ABSENT)?)?
        )?
        | KW_EXPLICIT 
            ( 
                common_directives 
                (COMMA KW_XMLDATA)? 
            )?
        | KW_PATH (LPAREN STRING_CONST RPAREN)? 
            (
                common_directives 
                (COMMA KW_ELEMENTS (KW_XSINIL | KW_ABSENT)?)?
            )?
    )

common_directives:
    (COMMA KW_BINARY KW_BASE64)?
    (COMMA KW_TYPE)?
    (COMMA KW_ROOT (LPAREN STRING_CONST RPAREN)?)?

query_hint: 
    ((KW_HASH | KW_ORDER) KW_GROUP 
    | (KW_CONCAT | KW_HASH | KW_MERGE) KW_UNION 
    | (KW_LOOP | KW_MERGE | KW_HASH) KW_JOIN 
    | KW_FAST DEC_NUMBER
    | KW_FORCE KW_ORDER 
    | KW_MAXDOP DEC_NUMBER 
    | KW_OPTIMIZE KW_FOR LPAREN comma_list<<(LOCALVAR OP_EQ STRING_CONST)>>RPAREN  
    | KW_PARAMETERIZATION (KW_SIMPLE | KW_FORCED)
    | KW_RECOMPILE
    | KW_ROBUST KW_PLAN 
    | KW_KEEP KW_PLAN 
    | KW_KEEPFIXED KW_PLAN
    | KW_EXPAND KW_VIEWS 
    | KW_MAXRECURSION DEC_NUMBER 
    | KW_USE KW_PLAN STRING_CONST    
    ) 
    
common_table_expression:
    (full_ident | ident) (LPAREN comma_list<<ident>> RPAREN)?
    KW_AS
        LPAREN select_stmnt RPAREN
    SEMI?
    
query_expression: 
    ( query_specification | LPAREN query_expression RPAREN )
    ( ( KW_UNION KW_ALL? | KW_EXCEPT | KW_INTERSECT )
    query_specification | comma_list<<(LPAREN query_expression RPAREN)>>)? 
        
query_specification: 
    KW_SELECT (KW_ALL | KW_DISTINCT)? 
    (KW_TOP sql_expr KW_PERCENT? (KW_WITH KW_TIES)?)? 
    select_list                                          
    (KW_INTO name)? 
    from? 
    (KW_WHERE search_condition)? 
    (KW_GROUP KW_BY KW_ALL? comma_list<<sql_expr>>
        (KW_WITH (KW_CUBE | KW_ROLLUP))?
    )?
    (KW_HAVING search_condition)? 

select_list:
    comma_list<<(
        STAR 
        | name DOT STAR 
        | ( ( name DOT )? 
            ( name | KW_IDENTITY | KW_ROWGUID )  
            ( ( DOT | DOUBLE_COLON ) 
            ( ( STRING_CONST | ident ) 
            | name LPAREN comma_list<<sql_expr>> RPAREN ) )? 
            | sql_expr (KW_AS? name)? ) 
        | name = sql_expr)>>
    
name:
     ident | full_ident | LOCALVAR
    
scalar_function:
    KW_LOWER LPAREN sql_expr RPAREN
    | KW_SUM LPAREN (KW_ALL | KW_DISTINCT)? sql_expr 
    
aggregate_windowed_function:
    KW_OVER LPAREN comma_list<<((KW_PARTITION KW_BY LOCALVAR | select_stmnt)?)>> order_by_clause RPAREN

ranking_windowed_function:
        (KW_RANK | KW_DENSE_RANK | KW_ROW_NUMBER | KW_NTILE) LPAREN (sql_expr)? RPAREN KW_OVER LPAREN 
        ((KW_PARTITION KW_BY LOCALVAR|select_stmnt|full_ident)*)?
        order_by_clause RPAREN
    
order_by_clause:
    (KW_ORDER KW_BY 
        comma_list<< (sql_expr (KW_ASC | KW_DESC)?) >>
    )? 

    
search_condition: 
    ( KW_NOT? predicate | LPAREN search_condition RPAREN )
    ((KW_AND | KW_OR) KW_NOT? (predicate | LPAREN search_condition RPAREN))*
    
predicate: 
    sql_expr binop sql_expr 
    | STRING_CONST KW_NOT? KW_LIKE STRING_CONST                     
        (KW_ESCAPE STRING_CONST)?                                                
    | sql_expr KW_NOT? KW_BETWEEN sql_expr KW_AND sql_expr 
    | sql_expr KW_IS KW_NOT? KW_NULL  
    | sql_expr binop                     
        (KW_ALL | KW_SOME | KW_ANY) LPAREN query_expression RPAREN            
    | KW_EXISTS LPAREN query_expression RPAREN  
    | IDENT (DOT IDENT)? (LPAREN RPAREN)? KW_IN LPAREN ((dec_num | STRING_CONST) COMMA (dec_num | STRING_CONST)) RPAREN

from:
    ( KW_FROM comma_list<<table_source>> )? 

table_source: 
    name KW_AS?  full_ident tablesample_clause? 
        (KW_WITH LPAREN table_hint COMMA* RPAREN)? 
    | ((rowset_function (KW_AS? name)? 
        (LPAREN comma_list<<name>> RPAREN)?) 
        | sql_expr (KW_AS? name)? (LPAREN comma_list<<name>> RPAREN)?)
    (*| openxml_clause*)
    | name  KW_AS? name (LPAREN comma_list<<name>> RPAREN)? 
    | joined_table 
    | pivoted_table 
    | (unpivoted_table                                                     
        | LOCALVAR (KW_AS? full_ident)?
            | LOCALVAR DOT name LPAREN comma_list<<sql_expr>> RPAREN (KW_AS name)? (LPAREN comma_list<<name>> RPAREN)?)


rowset_function:
    containstable
    | freetexttable
    | opendatasource
    | openquery
    | openrowset
    (*| openxml*)

openrowset:
    KW_OPENROWSET 
    LPAREN (STRING_CONST COMMA (STRING_CONST SEMI STRING_CONST SEMI STRING_CONST 
        | STRING_CONST) 
        COMMA ((full_ident DOT)? (full_ident DOT)? full_ident 
        | STRING_CONST 
        ) 
        | KW_BULK STRING_CONST COMMA 
       (KW_FORMATFILE OP_EQ STRING_CONST bulk_options?
       | KW_SINGLE_BLOB | KW_SINGLE_CLOB | KW_SINGLE_NCLOB)
    ) RPAREN 

bulk_options:
   (COMMA KW_CODEPAGE OP_EQ STRING_CONST)? 
   (COMMA KW_ERRORFILE OP_EQ STRING_CONST)?
   (COMMA KW_FIRSTROW OP_EQ DEC_NUMBER)?
   (COMMA KW_LASTROW OP_EQ DEC_NUMBER)? 
   (COMMA KW_MAXERRORS OP_EQ DEC_NUMBER)? 
   (COMMA KW_ROWS_PER_BATCH OP_EQ DEC_NUMBER)?  
    
openquery:
    KW_OPENQUERY LPAREN full_ident COMMA STRING_CONST RPAREN    
    
opendatasource: 
    KW_OPENDATASOURCE LPAREN ident COMMA STRING_CONST RPAREN    

freetexttable:
    KW_FREETEXTTABLE LPAREN full_ident COMMA (full_ident | LPAREN comma_list<<full_ident>> RPAREN | STAR) 
    COMMA STRING_CONST 
    (COMMA KW_LANGUAGE (STRING_CONST|DEC_NUMBER))? 
    (COMMA DEC_NUMBER)? RPAREN  
    
containstable:
    KW_CONTAINSTABLE LPAREN full_ident COMMA (ident | LPAREN comma_list<<ident>> RPAREN | STAR) COMMA "'" contains_search_condition "'" 
    (COMMA KW_LANGUAGE (STRING_CONST|DEC_NUMBER))? 
    (COMMA DEC_NUMBER)? 
    RPAREN 
    
contains_search_condition: 
    (simple_term 
    | prefix_term 
    | generation_term 
    | proximity_term 
    | weighted_term ) 
    | (LPAREN contains_search_condition RPAREN 
        ( ( KW_AND | "&" ) | ( KW_AND KW_NOT | "&!" ) | ( KW_OR | "|" ) ) 
        contains_search_condition+ )
        
simple_term: 
    STRING_CONST
          
prefix_term:
    STRING_CONST 
    
generation_term: 
    KW_FORMSOF LPAREN (KW_INFLECTIONAL | KW_THESAURUS) COMMA comma_list<<simple_term>> RPAREN
    
proximity_term: 
     (simple_term | prefix_term) 
     ((KW_NEAR | OP_TILDA) (simple_term | prefix_term))+
     
weighted_term: 
    KW_ISABOUT
        LPAREN comma_list<<(( 
        simple_term 
        | prefix_term 
        | generation_term 
        | proximity_term ) 
        (WEIGHT LPAREN DEC_NUMBER RPAREN)? )>>
        RPAREN
        
table_hint: 
    (KW_NOEXPAND )? 
    (KW_INDEX LPAREN comma_list<<ident>> RPAREN     
        | KW_FASTFIRSTROW 
        | KW_HOLDLOCK 
        | KW_NOLOCK 
        | KW_NOWAIT
        | KW_PAGLOCK 
        | KW_READCOMMITTED 
        | KW_READCOMMITTEDLOCK 
        | KW_READPAST 
        | KW_READUNCOMMITTED 
        | KW_REPEATABLEREAD 
        | KW_ROWLOCK 
        | KW_SERIALIZABLE 
        | KW_TABLOCK 
        | KW_TABLOCKX 
        | KW_UPDLOCK 
        | KW_XLOCK 
    ) 

table_hint_limited:
    (
        KW_KEEPIDENTITY 
    | KW_KEEPDEFAULTS 
    | KW_FASTFIRSTROW 
    | KW_HOLDLOCK 
    | KW_IGNORE_CONSTRAINTS 
    | KW_IGNORE_TRIGGERS 
    | KW_NOWAIT
    | KW_PAGLOCK 
    | KW_READCOMMITTED 
    | KW_READCOMMITTEDLOCK 
    | KW_READPAST 
    | KW_REPEATABLEREAD 
    | KW_ROWLOCK 
    | KW_SERIALIZABLE 
    | KW_TABLOCK 
    | KW_TABLOCKX 
    | KW_UPDLOCK 
    | KW_XLOCK 
    )?

tablesample_clause:
    KW_TABLESAMPLE KW_SYSTEM? LPAREN sql_expr ( KW_PERCENT | KW_ROWS )? RPAREN  
        ( KW_REPEATABLE LPAREN sql_expr RPAREN )?                            

joined_table: 
    table_source join_type table_source KW_ON search_condition 
    | table_source KW_CROSS KW_JOIN table_source 
    (*| left_table_source (KW_CROSS | KW_OUTER) KW_APPLY right_table_source  (*OOOOOOOOOOO*)*)
    | LPAREN? joined_table RPAREN? 
    

join_type: 
    (KW_INNER | ((KW_LEFT | KW_RIGHT | KW_FULL) KW_OUTER?) (join_hint)?)?
    KW_JOIN

join_hint: 
      KW_LOOP 
      | KW_HASH 
      | KW_MERGE 
      | KW_REMOTE 

pivoted_table:
        table_source KW_PIVOT pivot_clause full_ident

pivot_clause:
        LPAREN sql_expr LPAREN ( sql_expr | name ) RPAREN  
        KW_FOR sql_expr 
        KW_IN LPAREN comma_list<<name>> RPAREN      
        RPAREN 

unpivoted_table:
        table_source KW_UNPIVOT unpivot_clause full_ident

unpivot_clause:
        LPAREN name KW_FOR sql_expr KW_IN LPAREN comma_list<<full_ident>> RPAREN RPAREN
 
    
case:
    KW_CASE sql_expr?
        (KW_WHEN sql_expr KW_THEN sql_expr)*
        ( KW_ELSE sql_expr )? 
    KW_END 
    
(*
(*****************************************CREATE TABLE****************************************************)
create_table:
    KW_CREATE KW_TABLE 
        ( IDENT DOT IDENT? DOT? )? IDENT 
            LPAREN ( column_definition | computed_column_definition )
            comma_list<<table_constraint>>? RPAREN 
        ( KW_ON ( IDENT LPAREN IDENT RPAREN | IDENT 
            | KW_DEFAULT ) )? 
        ( KW_TEXTIMAGE_ON (IDENT | KW_DEFAULT) )?
    SEMI?

column_definition:
    IDENT data_type
        (KW_COLLATE IDENT)? 
        ( KW_NULL | KW_NOT KW_NULL )?
        ( 
            ( KW_CONSTRAINT IDENT )? KW_DEFAULT sql_expr )? 
          | (KW_IDENTITY (LPAREN sql_expr COMMA sql_expr RPAREN)? (KW_NOT KW_FOR KW_REPLICATION)?
        )?
        ( KW_ROWGUIDCOL )? column_constraint* 

data type: 
    ( IDENT DOT ) IDENT 
        (LPAREN DEC_NUMBER (COMMA DEC_NUMBER)? | KW_MAX | 
            (KW_CONTENT | KW_DOCUMENT)? IDENT RPAREN)? 

column_constraint: 
    (KW_CONSTRAINT IDENT)? 
    ((KW_PRIMARY KW_KEY | KW_UNIQUE) 
            (KW_CLUSTERED | KW_NONCLUSTERED)? 
            ( 
                KW_WITH KW_FILLFACTOR OP_EQ DEC_NUMBER  
              | KW_WITH LPAREN comma_list<<index_option>> RPAREN 

            )?
            (KW_ON ( IDENT LPAREN IDENT RPAREN 
                | IDENT | KW_DEFAULT))?
      | (KW_FOREIGN KW_KEY)? 
            KW_REFERENCES (IDENT DOT)? IDENT (LPAREN IDENT RPAREN)? 
            delete_update*
            (KW_NOT KW_FOR KW_REPLICATION)? 
      | KW_CHECK (KW_NOT KW_FOR KW_REPLICATION)? LPAREN sql_expr RPAREN 
    ) 

computed_column_definition:
    IDENT KW_AS sql_expr 
    (KW_PERSISTED (KW_NOT KW_NULL)?)?
    ( 
        (KW_CONSTRAINT IDENT)?
        (KW_PRIMARY KW_KEY | KW_UNIQUE)
            (KW_CLUSTERED | KW_NONCLUSTERED)?
            ( 
                KW_WITH KW_FILLFACTOR OP_EQ DEC_NUMBER 
              | KW_WITH LPAREN comma_list<<index_option>> RPAREN
            )?
            (KW_ON (IDENT LPAREN IDENT RPAREN 
                | IDENT | KW_DEFAULT))?
        | (KW_FOREIGN KW_KEY)? 
            KW_REFERENCES IDENT (LPAREN IDENT RPAREN)? 
            delete_update*
            (KW_NOT KW_FOR KW_REPLICATION)? 
        | KW_CHECK (KW_NOT KW_FOR KW_REPLICATION)? LPAREN sql_expr RPAREN 
    )? 

table_constraint:
    (KW_CONSTRAINT IDENT)? 
    ( 
        (KW_PRIMARY KW_KEY | KW_UNIQUE) 
            (KW_CLUSTERED | KW_NONCLUSTERED)? 
                    LPAREN comma_list<<(IDENT (KW_ASC | KW_DESC)?)>> RPAREN 
            ( 
                KW_WITH KW_FILLFACTOR OP_EQ DEC_NUMBER 
               |KW_WITH LPAREN comma_list<<index_option>> RPAREN 
            )?
            (KW_ON (IDENT LPAREN IDENT RPAREN
                | IDENT | KW_DEFAULT))? 
        | KW_FOREIGN KW_KEY 
                    LPAREN comma_list<<IDENT>> RPAREN 
            KW_REFERENCES IDENT (LPAREN comma_list<<IDENT>> RPAREN )? 
            delete_update*
            (KW_NOT KW_FOR KW_REPLICATION)? 
        | KW_CHECK (KW_NOT KW_FOR KW_REPLICATION)? LPAREN sql_expr RPAREN 
    ) 

delete_update:
    KW_ON (KW_DELETE | KW_UPDATE) delete_update_options
    
delete_update_options:
    KW_NO KW_ACTION | KW_CASCADE | KW_SET KW_NULL | KW_SET KW_DEFAULT
    
index_option:
    ( 
        KW_PAD_INDEX OP_EQ (KW_ON | KW_OFF) 
        | KW_FILLFACTOR OP_EQ DEC_NUMBER 
        | KW_IGNORE_DUP_KEY OP_EQ (KW_ON | KW_OFF) 
        | KW_STATISTICS_NORECOMPUTE OP_EQ (KW_ON | KW_OFF) 
        | KW_ALLOW_ROW_LOCKS OP_EQ (KW_ON | KW_OFF) 
        | KW_ALLOW_PAGE_LOCKS OP_EQ (KW_ON | KW_OFF) 
    )
        
*)
begin_transaction:
    KW_BEGIN (KW_TRAN | KW_TRANSACTION) 
        ((ident | LOCALVAR)
          (KW_WITH KW_MARK STRING_CONST?)?
        )?
    SEMI?

commit_transaction:
    KW_COMMIT (KW_TRAN | KW_TRANSACTION) ( IDENT | LOCALVAR )? 
    SEMI?
    
execute_stmnt:
    execute_proc
    |execute_character_string
    |execute_command

execute_proc:
    (KW_EXEC | KW_EXECUTE)?
    (((LOCALVAR OP_EQ)?
      (name (SEMI DEC_NUMBER)? | LOCALVAR) 
      brace_opt<<
         LPAREN 
         (comma_list<<((ident OP_EQ)? 
            (sql_expr 
            | LOCALVAR (KW_OUTPUT | KW_OUT)? 
            | KW_DEFAULT?)
         )?>>)
        RPAREN>>
      (KW_WITH KW_RECOMPILE)?
    )
    | create_object DOT IDENT LPAREN (comma_list<<((ident OP_EQ)? (sql_expr| DEC_NUMBER))>>)? RPAREN)

create_object: STOREDPROCEDURE LPAREN comma_list<<sql_expr>>? RPAREN

execute_character_string:
    (KW_EXEC | KW_EXECUTE) 
    LPAREN (( LOCALVAR | STRING_CONST ) PLUS?)+ RPAREN    
    (KW_AS (KW_LOGIN | KW_USER) OP_EQ STRING_CONST)?
SEMI?

execute_command:
    (KW_EXEC | KW_EXECUTE)
    LPAREN ( LOCALVAR | STRING_CONST "?"? PLUS?)+
    (( COMMA (sql_expr | LOCALVAR KW_OUTPUT?))+)?
    RPAREN 
    (KW_AS (KW_LOGIN | KW_USER) OP_EQ STRING_CONST)?
    (KW_AT full_ident)?
SEMI?

type_size : LPAREN (DEC_NUMBER | KW_MAX) RPAREN

sql_datatype:
      KW_BIGINT | KW_NUMERIC | KW_BIT | KW_SMALLINT  | KW_DECIMAL | KW_DATETIME | "SMALLMONEY"  | "sysname"
    | "INT" | KW_TINYINT | KW_MONEY
    | KW_FLOAT type_size?  (* http://msdn.microsoft.com/en-us/library/ms173773.aspx *)
    | KW_REAL
    | KW_CHAR type_size?
    | KW_VARCHAR type_size?
    | KW_VARBINARY type_size?
    | KW_NCHAR type_size?   (* http://msdn.microsoft.com/en-us/library/ms186939.aspx *)
    | KW_NVARCHAR type_size?
    | KW_SQL_VARIANT

execute_as: (KW_EXEC | KW_EXECUTE) KW_AS (KW_CALLER | KW_SELF | KW_OWNER | username = STRING_CONST) 

binop:
     OP_PLUS_EQ | OP_MINUS_EQ | OP_MUL_EQ | OP_DIV_EQ | OP_MOD_EQ | OP_AND_EQ | OP_XOR_EQ | OP_OR_EQ
    | OP_EQ | OP_PLUS | OP_MINUS | STAR | OP_DIV | OP_MOD | OP_TILDA 
    | OP_LT | OP_MT | (OP_LT OP_MT) | (OP_LT OP_EQ) | (OP_MT OP_EQ) | (OP_LT OP_GT)
fetch_stmnt:    
    KW_FETCH 
              ((KW_NEXT | KW_PRIOR | KW_FIRST | KW_LAST 
                        | KW_ABSOLUTE (dec_num | LOCALVAR) 
                        | KW_RELATIVE (dec_num | LOCALVAR) 
                   )? 
                   KW_FROM 
              )? 
    ((KW_GLOBAL? IDENT) | LOCALVAR) 
    (KW_INTO comma_list<<LOCALVAR>>)? 
    
sql_expr:
    sql_value
    | scalar_function
    | (name DOT) name
    | LPAREN sql_expr RPAREN
    | LOCALVAR 
    | call_expr
    | select_stmnt
    | (OP_PLUS_EQ | OP_MINUS_EQ | OP_TILDA) sql_expr 
    | GLOBALVAR
    | name
    | sql_expr binop sql_expr
    | sql_expr KW_IS KW_NOT? KW_NULL
    | ranking_windowed_function 
    | aggregate_windowed_function
    | sql_expr KW_COLLATE ident
    | case
    | begin_transaction
    | KW_NOT? KW_EXISTS sql_expr
    | KW_NOT? KW_IS_MEMBER LPAREN STRING_CONST RPAREN
    | KW_IS? KW_NOT? KW_NULL
    | IDENT LPAREN LOCALVAR COMMA STRING_CONST RPAREN
    | sql_expr ( KW_AND | KW_OR ) sql_expr
    | KW_TYPE KW_FROM full_ident
    | fetch_stmnt
    | sql_expr KW_IN LPAREN comma_list<<sql_expr>> RPAREN
    

call_expr: full_ident LPAREN comma_list<<(sql_datatype|sql_expr)>>? RPAREN

comma_list<<item>>: list<<item COMMA>>

dec_num: OP_MINUS? DEC_NUMBER

sql_value:
     STRING_CONST   (* http://msdn.microsoft.com/en-us/library/ms179899.aspx *)
   | dec_num
   | KW_NULL

    
   

(* http://msdn.microsoft.com/en-us/library/ms175874.aspx *)
ident: brace_opt<<LBRACKET (IDENT | KW_TYPE | KW_CLASS | KW_STATE | KW_OWNER) RBRACKET>>

full_ident: not_empty_list<<ident DOT>>
