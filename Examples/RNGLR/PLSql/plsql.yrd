(*
  mssql.yrd contains grammar of MS-SQL\T-SQL.
  
  Copyright 2012, 2013 Anastasiya Ragozina <ragozina.anastasiya@gmail.com>

  This file is part of YaccConctructor.

  YaccConstructor is free software:you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
   
  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*)
(*Вопрос про execute*)
{
open Microsoft.FSharp.Text.Lexing
open Yard.Utils.SourceText
}

include "../../../GrammarTemplates/Common.yrd"
include "../common_grammars/MsCommon.yrd"

tokens {
    _ of SourceText
}

options {
    translate = false
    module = "Yard.Examples.MSParser"
    infEpsPath = epsilons
    pos = uint64
}

module Main

open Common, MsCommon

[<Start>]
root_rule: (batch_body '/'?)*

batch_body: 
       create_proc
     | set_stmnt
     | begin_transaction
     | commit_transaction
     | declare
     | case (**&&&***)
     | rollback_transaction
     | if_stmt 
     | drop_procedure 
     | create_table
     | insert
	 | stmt_block
	 | 'commit' ';'?
  
rollback_transaction:
    'ROLLBACK'
    ['TRAN' | 'TRANSACTION']
    [IDENT | LOCALVAR]
    ';'?

(**************************************EXCEPTION****************************************************)
exception:
      'WHEN' 
       (not_empty_list<ident 'OR'>
	  |'OTHERS') 
      'THEN' list<proc_body_stmnt ';'>';'

(*****************************************SET****************************************************)

set_stmnt:
    'SET' (
        'ANSI_NULLS' | 'ANSI_DEFAULTS' | 'ANSI_NULL_DFLT' 
      | 'ANSI_PADDING' | 'ANSI_WARNINGS' | 'CONCAT_NULL_YIELDS_NULL'
      | 'CURSOR_CLOSE_ON_COMMIT' | 'QUOTED_IDENTIFIER' 
      | 'FMTONLY' | 'FORCEPLAN' | 'IMPLICIT_TRANSACTIONS'
      | 'NOCOUNT' | 'NOEXEC' | 'NUMERIC_ROUNDABORT' | 'PARSEONLY'
      | 'REMOTE_PROC_TRANSACTIONS' | 'SHOWPLAN_ALL' | 'SHOWPLAN_TEXT'
      | 'SHOWPLAN_XML' | 'STATISTICS' ('IO' | 'PROFILE' | 'TIME' | 'XML')
      | 'XACT_ABORT'
    )
    ('ON' | 'OFF')
  | set_localvar

set_localvar:
    'SET' ( 
        LOCALVAR 
        [DOUBLE_COLON ident] '=' sql_expr
      | STRING_CONST ('.' | DOUBLE_COLON) ident
        '(' comma_list<proc_formal_param> ')' 
    )
  | LOCALVAR '=' LOCALVAR
  | ident
  | 'CURSOR' ['FORWARD_ONLY' | 'SCROLL']
    ['STATIC' | 'KEYSET' | 'DYNAMIC' | 'FAST_FORWARD']
    ['READ_ONLY' | 'SCROLL_LOCKS' | 'OPTIMISTIC']
    'TYPE_WARNING'?
    'FOR' select_stmnt 
    [ 'FOR' (
          'READ' 'ONLY'
        | 'UPDATE' ['OF' comma_list<ident>]
      )
    ]

  
(*********************************PROCEDURE************************************************************)    

drop_procedure: 'DROP' ('PROC' | 'PROCEDURE') ([ident '.'] ident)+

proc_formal_param:
    LOCALVAR [full_ident '.'] sql_datatype?
    ['VARYING'] ['=' ('NULL' | DEC_NUMBER | STRING_CONST)]
    ['OUT' | 'OUTPUT'] 'READONLY'?  
  
create_proc:
    'CREATE' ('PROCEDURE' | 'PROC')
    [ident '.'] ident [';' DEC_NUMBER]
    brace_opt<'(' comma_list<proc_formal_param> ')'>
    ['WITH' (execute_as)+]
    ['FOR' 'REPLICATION']
    'AS' (proc_body_stmnt ';'?)*
    ';'?

procedure_option: 
  [
      'ENCRYPTION'
    | 'RECOMPILE'
    | 'EXECUTE_AS_Clause'
  ]

proc_body_stmnt:
  ('<<' ident '>>')*
     select_stmnt
   | set_stmnt
   | execute_stmnt   
   | declare
   | 'RETURN' sql_expr
   | if_stmt
   | raiserror_stmnt
   | stmt_block
   | begin_transaction
   | commit_transaction
   | rollback_transaction
   | drop_procedure
   | while_stmt
   | create_table
   | insert
   | fetch_stmnt
   | print_stmt
   | null_stmt
   | update_stmnt 
  (* | error *)
   
null_stmt: 'null'
(***********************************STATEMENTS******************************************************)

print_stmt: 'PRINT' sql_expr ';'?
while_stmt: 'WHILE' sql_expr proc_body_stmnt

stmt_block: 'BEGIN' (proc_body_stmnt ';'?)* exception? 'END' ';'

if_stmt: 'IF' sql_expr proc_body_stmnt ['ELSE' proc_body_stmnt]                

raiserror_stmnt:
    'RAISERROR' '(' (dec_num | STRING_CONST | LOCALVAR)
    (',' dec_num ',' dec_num)
    [',' comma_list<sql_expr>] ')'
    ['WITH' comma_list<('LOG' | 'NOWAIT' | 'SETERROR')>]

update_stmnt:
    'UPDATE'
	[IDENT '.'] IDENT
	'SET'
	IDENT '=' sql_expr
	['WHERE' search_condition]
	';'?
   
(***********************************DECLARE**********************************************************)


declare:  
    'DECLARE' 
    (execute_stmnt)*
	(*| error*)
	';'?

table_type_definition: 
     'TABLE' '(' (column_definition | table_constraint)* ')' 

column_definition:
    ident ('scalar_data_type' | 'AS' sql_expr)
    ['COLLATE' ident]
    ['DEFAULT' sql_expr | 'IDENTITY' [DEC_NUMBER ',' DEC_NUMBER]]
    'ROWGUIDCOL'? 
    column_constraint? 

column_constraint: 
  [
      ['NOT'] 'NULL'
    | 'PRIMARY' 'KEY'
    | 'UNIQUE'
    | 'CHECK' sql_expr 
  ]

table_constraint: 
    ('PRIMARY' 'KEY' | 'UNIQUE') '(' comma_list<ident> ')'
  | 'CHECK' '(' search_condition ')'
       
(*****************************************SELECT****************************************************)

select_stmnt:  
    ['WITH' comma_list<common_table_expression>]
    query_expression 
    ['ORDER' 'BY' comma_list<((ident | DEC_NUMBER) ['ASC' | 'DESC'])>]
    [
      'COMPUTE' 
      comma_list<( ('AVG' | 'COUNT' | 'MAX' | 'MIN' | 'SUM') sql_expr)>
      ['BY' comma_list<sql_expr>]
    ] 
    for?
	';'? 
	
for: 'FOR' 'UPDATE' ['OF' comma_list<colomn_id>]

colomn_id: [[IDENT '.'] IDENT '.'] IDENT
	
	(* 
	for? ['OPTION' '(' comma_list<query_hint> ')']
    ';'?
    
for: 'FOR' ('BROWSE' | xml)
    
xml:
    'XML' 
    ( 
        ('RAW' ['(' STRING_CONST ')'] | 'AUTO') 
        [ 
          common_directives
          [',' ('XMLDATA' | 'XMLSCHEMA' ['(' STRING_CONST ')'] ) ]
          [',' 'ELEMENTS' ['XSINIL' | 'ABSENT'] ]
        ]
      | 'EXPLICIT' [common_directives [',' 'XMLDATA'] ]
      | 'PATH' ['(' STRING_CONST ')']
        [common_directives  [',' 'ELEMENTS' ['XSINIL' | 'ABSENT'] ] ]
    )

common_directives:
    [',' 'BINARY' 'BASE64']
    [',' 'TYPE']
    [',' 'ROOT' ['(' STRING_CONST ')']]

query_hint: 
    ('HASH' | 'ORDER') 'GROUP' 
  | ('CONCAT' | 'HASH' | 'MERGE') 'UNION' 
  | ('LOOP' | 'MERGE' | 'HASH') 'JOIN' 
  | 'FAST' DEC_NUMBER
  | 'FORCE' 'ORDER' 
  | 'MAXDOP' DEC_NUMBER 
  | 'OPTIMIZE' 'FOR' '(' comma_list<(LOCALVAR '=' STRING_CONST)> ')'  
  | 'PARAMETERIZATION' ('SIMPLE' | 'FORCED')
  | 'RECOMPILE'
  | 'ROBUST' 'PLAN' 
  | 'KEEP' 'PLAN' 
  | 'KEEPFIXED' 'PLAN'
  | 'EXPAND' 'VIEWS' 
  | 'MAXRECURSION' DEC_NUMBER 
  | 'USE' 'PLAN' STRING_CONST    
 *)
    
common_table_expression:
    (full_ident | ident)
    ['(' comma_list<ident> ')']
    'AS' '(' select_stmnt ')'
    ';'?
    
query_expression: 
    (query_specification | '(' query_expression ')')
    [
        ('UNION' 'ALL'? | 'EXCEPT' | 'INTERSECT')
        query_specification
      | comma_list<('(' query_expression ')')>
    ]
        
query_specification: 
    'SELECT' ['ALL' | 'DISTINCT' | 'UNIQUE']
    ['TOP' sql_expr 'PERCENT'? ['WITH' 'TIES'] ]
    select_list                                          
    ['INTO' full_ident]
    from? 
    ['WHERE' search_condition]
    [
      'GROUP' 'BY' 'ALL'? comma_list<sql_expr>
      ['WITH' ('CUBE' | 'ROLLUP')]
    ]
    ['HAVING' search_condition]

select_list:
    comma_list<(
        '*' 
      | full_ident '.' '*' 
      | (
            [ident '.']
            (ident | 'IDENTITY' | 'ROWGUID')
            [ ('.' | DOUBLE_COLON)
              (
                  STRING_CONST
                | ident
                | ident '(' comma_list<sql_expr> ')'
              )
            ] 
          | sql_expr ['AS'? ident]
        ) 
      | ident '=' sql_expr
    )>
    
aggregate_windowed_function:
    'OVER' '(' comma_list<['PARTITION' 'BY' LOCALVAR | select_stmnt]> order_by_clause ')'

ranking_windowed_function:
    ('RANK' | 'DENSE_RANK' | 'ROW_NUMBER' | 'NTILE')
    '(' sql_expr? ')'
    'OVER'
    '(' 
      [('PARTITION' 'BY' LOCALVAR|select_stmnt|full_ident)*]
      order_by_clause
    ')'
    
order_by_clause:
    ['ORDER' 'BY' comma_list<(sql_expr ['ASC' | 'DESC'])>]
    
search_condition: 
    (
        'NOT'? predicate
      | '(' search_condition ')'
    )
    (
      ('AND' | 'OR')
      'NOT'? (predicate | '(' search_condition ')')
    )*
    
predicate: 
      sql_expr ['ESCAPE' STRING_CONST]
    | sql_expr 'NOT'? 'BETWEEN' sql_expr 'AND' sql_expr 
    | sql_expr 'IS' 'NOT'? 'NULL'  
    | sql_expr binop ('ALL' | 'SOME' | 'ANY')
      '(' query_expression ')'            
    | 'EXISTS' '(' query_expression ')'  
    | IDENT ['.' IDENT] ['(' ')'] 'IN'
      '('
        (dec_num | STRING_CONST) ',' (dec_num | STRING_CONST)
      ')'

from:
    'FROM' comma_list<table_source>

table_source: 
    full_ident 'AS'?  full_ident tablesample_clause? 
    ['WITH' '(' table_hint ','* ')']
  | (rowset_function | sql_expr)
    ['AS'? ident]
    ['(' comma_list<ident> ')']
  (*| openxml_clause*)
  | ident 'AS'? ident ['(' comma_list<ident> ')']
  | joined_table 
  | pivoted_table 
  | unpivoted_table                                                     
  | LOCALVAR ['AS'? full_ident]
  | LOCALVAR '.' ident
    '(' comma_list<sql_expr> ')' ['AS' ident]
    ['(' comma_list<ident> ')']


rowset_function:
    containstable
  | freetexttable
  | opendatasource
  | openquery
  | openrowset
  (*| openxml*)

openrowset:
    'OPENROWSET' 
    '('
    (
        STRING_CONST ','
        (STRING_CONST ';' STRING_CONST ';' STRING_CONST | STRING_CONST)
        ','
        ([ [full_ident '.'] full_ident '.'] full_ident | STRING_CONST)
      | 'BULK' STRING_CONST ',' 
        (
            'FORMATFILE' '=' STRING_CONST bulk_options?
          | 'SINGLE_BLOB'
          | 'SINGLE_CLOB'
          | 'SINGLE_NCLOB'
        )
    ) ')' 

bulk_options:
   [',' 'CODEPAGE' '=' STRING_CONST]
   [',' 'ERRORFILE' '=' STRING_CONST]
   [',' 'FIRSTROW' '=' DEC_NUMBER]
   [',' 'LASTROW' '=' DEC_NUMBER]
   [',' 'MAXERRORS' '=' DEC_NUMBER]
   [',' 'ROWS_PER_BATCH' '=' DEC_NUMBER]
    
openquery:
    'OPENQUERY' '(' full_ident ',' STRING_CONST ')'    
    
opendatasource: 
    'OPENDATASOURCE' '(' ident ',' STRING_CONST ')'    

freetexttable:
    'FREETEXTTABLE' '(' full_ident ','
    (
        full_ident
      | '(' comma_list<full_ident> ')'
      | '*'
    )
    ',' STRING_CONST 
    [',' 'LANGUAGE' (STRING_CONST|DEC_NUMBER)]
    [',' DEC_NUMBER] ')'  
    
containstable:
    'CONTAINSTABLE'
    '('
      full_ident ','
      (ident | '(' comma_list<ident> ')' | '*')
      ',' '\'' contains_search_condition '\''
      [',' 'LANGUAGE' (STRING_CONST|DEC_NUMBER)]
      [',' DEC_NUMBER]
    ')' 
    
contains_search_condition: 
    simple_term 
  | prefix_term 
  | generation_term 
  | proximity_term 
  | weighted_term
  | '(' contains_search_condition ')' 
    ('AND' | '&' | 'AND' 'NOT' | '&!' | 'OR' | '|' ) 
    contains_search_condition+
        
simple_term: 
    STRING_CONST
          
prefix_term:
    STRING_CONST 
    
generation_term: 
    'FORMSOF'
    '('
      ('INFLECTIONAL' | 'THESAURUS') ',' comma_list<simple_term>
    ')'
    
proximity_term: 
    (simple_term | prefix_term) 
    (('NEAR' | '~') (simple_term | prefix_term))+
     
weighted_term: 
    'ISABOUT'
    '(' comma_list<(
      ( 
          simple_term 
        | prefix_term 
        | generation_term 
        | proximity_term
      ) 
      [WEIGHT '(' DEC_NUMBER ')']
    )> ')'
        
table_hint: 
    'NOEXPAND'?
    (
        'INDEX' '(' comma_list<ident> ')'     
      | 'FASTFIRSTROW' 
      | 'HOLDLOCK' 
      | 'NOLOCK' 
      | 'NOWAIT'
      | 'PAGLOCK' 
      | 'READCOMMITTED' 
      | 'READCOMMITTEDLOCK' 
      | 'READPAST' 
      | 'READUNCOMMITTED' 
      | 'REPEATABLEREAD' 
      | 'ROWLOCK' 
      | 'SERIALIZABLE' 
      | 'TABLOCK' 
      | 'TABLOCKX' 
      | 'UPDLOCK' 
      | 'XLOCK' 
    ) 

table_hint_limited:
    'KEEPIDENTITY' 
  | 'KEEPDEFAULTS' 
  | 'FASTFIRSTROW' 
  | 'HOLDLOCK' 
  | 'IGNORE_CONSTRAINTS' 
  | 'IGNORE_TRIGGERS' 
  | 'NOWAIT'
  | 'PAGLOCK' 
  | 'READCOMMITTED' 
  | 'READCOMMITTEDLOCK' 
  | 'READPAST' 
  | 'REPEATABLEREAD' 
  | 'ROWLOCK' 
  | 'SERIALIZABLE' 
  | 'TABLOCK' 
  | 'TABLOCKX' 
  | 'UPDLOCK' 
  | 'XLOCK' 

tablesample_clause:
    'TABLESAMPLE' 'SYSTEM'?
    '(' sql_expr ['PERCENT' | 'ROWS'] ')'  
    ['REPEATABLE' sql_expr]

joined_table: 
    table_source join_type? 'JOIN' table_source 'ON' search_condition 
  | table_source 'CROSS' 'JOIN' table_source 
  (*| left_table_source ('CROSS' | 'OUTER') 'APPLY' right_table_source  (*OOOOOOOOOOO*)*)
  | '(' joined_table ')'
    

join_type: 
    'INNER'
  | ('LEFT' | 'RIGHT' | 'FULL') 'OUTER'? join_hint?
    

join_hint: 
    'LOOP' 
  | 'HASH' 
  | 'MERGE' 
  | 'REMOTE' 

pivoted_table:
    table_source 'PIVOT' pivot_clause full_ident

pivot_clause:
    '('
      sql_expr+  
      'FOR' sql_expr 
      'IN' '(' comma_list<ident> ')'      
    ')'

unpivoted_table:
    table_source 'UNPIVOT' unpivot_clause full_ident

unpivot_clause:
    '('
      ident 'FOR' sql_expr 'IN'
      '(' comma_list<full_ident> ')'
    ')'
 
(*****************************************CREATE TABLE****************************************************)
create_table:
    'CREATE' 'TABLE' 
    [IDENT '.' IDENT? '.'?] IDENT 
    '('
      comma_list<(column_definition_create_table | computed_column_definition)>
      comma_list<table_constraint_create_table>
    ')' 
    ['ON' (IDENT '(' IDENT ')' | IDENT | 'DEFAULT')]
    ['TEXTIMAGE_ON' (IDENT | 'DEFAULT')]
    ';'?

column_definition_create_table:
    ident sql_datatype
    ['COLLATE' IDENT]
    ['NOT'? 'NULL']
    [['CONSTRAINT' IDENT] 'DEFAULT' sql_expr]
  | ['IDENTITY' ['(' sql_expr ',' sql_expr ')'] ['NOT' 'FOR' 'REPLICATION']]
    ['ROWGUIDCOL'] column_constraint_create_table*

column_constraint_create_table: 
    ['CONSTRAINT' IDENT]
    (
        ('PRIMARY' 'KEY' | 'UNIQUE') 
        ['CLUSTERED' | 'NONCLUSTERED']
        [ 
            'WITH' 'FILLFACTOR' '=' DEC_NUMBER  
          | 'WITH' '(' comma_list<index_option> ')' 
        ]
        ['ON' (IDENT '(' IDENT ')' | IDENT | 'DEFAULT')]
      | ['FOREIGN' 'KEY']
        'REFERENCES' [IDENT '.'] IDENT ['(' IDENT ')']
        delete_update*
        ['NOT' 'FOR' 'REPLICATION']
      | 'CHECK' ['NOT' 'FOR' 'REPLICATION'] sql_expr 
    ) 

computed_column_definition:
    IDENT 'AS' sql_expr 
    ['PERSISTED' ['NOT' 'NULL']]
    [ 
        ['CONSTRAINT' IDENT]
        ('PRIMARY' 'KEY' | 'UNIQUE')
        ['CLUSTERED' | 'NONCLUSTERED']
        [
            'WITH' 'FILLFACTOR' '=' DEC_NUMBER 
          | 'WITH' '(' comma_list<index_option> ')'
        ]
        ['ON' (IDENT '(' IDENT ')' | IDENT | 'DEFAULT')]
      | ['FOREIGN' 'KEY']
        'REFERENCES' IDENT ['(' IDENT ')']
        delete_update*
        ['NOT' 'FOR' 'REPLICATION']
      | 'CHECK' ['NOT' 'FOR' 'REPLICATION'] sql_expr 
    ] 
(*-*)
table_constraint_create_table:
    ['CONSTRAINT' IDENT]
    ( 
        ('PRIMARY' 'KEY' | 'UNIQUE') 
        ['CLUSTERED' | 'NONCLUSTERED']
        '(' comma_list<(IDENT ['ASC' | 'DESC'])> ')' 
        [ 
            'WITH' 'FILLFACTOR' '=' DEC_NUMBER 
          | 'WITH' '(' comma_list<index_option> ')' 
        ]
        ['ON' (IDENT '(' IDENT ')' | IDENT | 'DEFAULT')]
      | 'FOREIGN' 'KEY' 
        '(' comma_list<IDENT> ')' 
        'REFERENCES' IDENT ['(' comma_list<IDENT> ')']
        delete_update*
        ['NOT' 'FOR' 'REPLICATION']
      | 'CHECK' ['NOT' 'FOR' 'REPLICATION'] sql_expr
    ) 
	
delete_update:
    'ON' ('DELETE' | 'UPDATE') delete_update_options
   
delete_update_options:
    'NO' 'ACTION' | 'CASCADE' | 'SET' 'NULL' | 'SET' 'DEFAULT'
   
index_option:
    ( 
        'PAD_INDEX' '=' ('ON' | 'OFF') 
      | 'FILLFACTOR' '=' DEC_NUMBER 
      | 'IGNORE_DUP_KEY' '=' ('ON' | 'OFF')
      | 'STATISTICS_NORECOMPUTE' '=' ('ON' | 'OFF') 
      | 'ALLOW_ROW_LOCKS' '=' ('ON' | 'OFF') 
      | 'ALLOW_PAGE_LOCKS' '=' ('ON' | 'OFF') 
    ) 
    
insert:
    'INSERT' 
    'INTO'? 
    (object | rowset_function ['WITH' '(' table_hint* ')'] )
    ['(' comma_list<ident> ')']
    output_clause?
    [
        'VALUES' '(' comma_list<('DEFAULT' | sql_expr)> ')' 
      | batch_body
      | 'DEFAULT' 'VALUES'
    ]
    ';'?

output_clause:
    'OUTPUT' dml_select_list 'INTO' (LOCALVAR | IDENT)
    ['(' comma_list<LOCALVAR> ')']
    ['OUTPUT' dml_select_list]
    
dml_select_list:
    (ident | sql_expr) ['AS'? IDENT]
    comma_list<( (ident | sql_expr) ['AS'? IDENT])>

column_name:
    ('DELETED' | 'INSERTED' | ident) '.' ('*' | ident)

object:
    [
        IDENT '.' IDENT '.' IDENT '.' 
      | IDENT '.' IDENT? '.' 
      | IDENT '.'
    ]
    ident
       

begin_transaction:
    'BEGIN' ('TRAN' | 'TRANSACTION') 
    [
      (ident | LOCALVAR)
      ['WITH' 'MARK' STRING_CONST?]
    ]
    ';'?

commit_transaction:
    'COMMIT' ('TRAN' | 'TRANSACTION') [IDENT | LOCALVAR]
    ';'?
    
execute_stmnt:
    execute_proc
  | execute_character_string
  | execute_command
  | assign_var


execute_proc:

        full_ident 
        
          '(' 
            comma_list<[
              [ident '=' '>']
              (sql_expr  ['OUTPUT' | 'OUT'])
            ]>
          ')'


create_object: STOREDPROCEDURE '(' comma_list<sql_expr> ')'

execute_character_string:
    ('EXEC' | 'EXECUTE') 
    '(' ((LOCALVAR | STRING_CONST) '+'?)+ ')'    
    ['AS' ('LOGIN' | 'USER') '=' STRING_CONST]
    ';'?

execute_command:
    ('EXEC' | 'EXECUTE')
    '('
      (LOCALVAR | STRING_CONST '?'? '+'?)+
      (',' sql_expr 'OUTPUT'?)*
    ')' 
    ['AS' ('LOGIN' | 'USER') '=' STRING_CONST]
    ['AT' full_ident]
    ';'?

assign_var:
     ident sql_datatype? [':' '=' sql_expr] ';'?

type_size : '(' (DEC_NUMBER | 'MAX') ')'

sql_datatype:
      'BIGINT'
    | 'NUMERIC'
    | 'BIT'
    | 'SMALLINT'
    | 'DECIMAL'
    | 'DATETIME'
    | 'SMALLMONEY'
    | 'SYSNAME'
    | 'INT'
    | 'TINYINT'
    | 'MONEY'
    | 'FLOAT' type_size?  (* http://msdn.microsoft.com/en-us/library/ms173773.aspx *)
    | 'REAL'
    | 'CHAR' type_size?
    | 'VARCHAR' type_size?
	| 'VARCHAR2' type_size?
    | 'VARBINARY' type_size?
    | 'NCHAR' type_size?   (* http://msdn.microsoft.com/en-us/library/ms186939.aspx *)
    | 'NVARCHAR' type_size?
    | 'SQL_VARIANT'
	| 'CLOB'
	| 'RAW' type_size?
	| 'BLOB'

execute_as:
    ('EXEC' | 'EXECUTE')
    'AS'
    ('CALLER' | 'SELF' | 'OWNER' |ident '=' STRING_CONST) 

binop:
      '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|='
    | '=' | '+' | '-' | '*' | '/' | '%' | '~'
    | '<' | '>' | ('<' '>') | ('<' '=') | ('>' '=') | ('|' '|')

fetch_stmnt:    
    'FETCH' 
    [
      [
          'NEXT'
        | 'PRIOR'
        | 'FIRST'
        | 'LAST' 
        | 'ABSOLUTE' (dec_num | LOCALVAR) 
        | 'RELATIVE' (dec_num | LOCALVAR) 
      ] 
      'FROM' 
    ] 
    ('GLOBAL'? IDENT | LOCALVAR) 
    ('INTO' comma_list<LOCALVAR>)? 
    
sql_expr:
    sql_value
  | scalar_function
  | '(' sql_expr ')'
  | call_expr
  | full_ident
  | select_stmnt
  | ('NOT' | '+=' | '-=' | '~') sql_expr 
  | GLOBALVAR
  | LOCALVAR
  | '*'
  | sql_expr binop sql_expr
  | sql_expr 'IS' 'NOT'? 'NULL'
  | ranking_windowed_function 
  | aggregate_windowed_function
  | sql_expr 'COLLATE' ident
  | case
  | begin_transaction
  | 'EXISTS' sql_expr
  | 'IS_MEMBER' '(' STRING_CONST ')'
  | sql_expr ('AND' | 'OR') sql_expr
  | 'TYPE' 'FROM' full_ident
  | fetch_stmnt
  | sql_expr 'NOT'? 'IN' '(' comma_list<sql_expr> ')'
  | sql_expr 'NOT'? 'LIKE' sql_expr
     
call_expr: full_ident '(' comma_list<(sql_datatype|sql_expr)> ')'

scalar_function:
      'LOWER' sql_expr
    | 'SUM' '(' ['ALL' | 'DISTINCT'] sql_expr ')'
	| 'UNISTR' '(' sql_value ')'
	| 'HEXTORAW' '(' sql_value ')'

case:
    'CASE' sql_expr?
    ('WHEN' sql_expr 'THEN' sql_expr)*
    ['ELSE' sql_expr]
    'END'
