(*
  mssql.yrd contains grammar of MS-SQL\T-SQL.
  
  Copyright 2012, 2013 Anastasiya Ragozina <ragozina.anastasiya@gmail.com>

  This file is part of YaccConctructor.

  YaccConstructor is free software:you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
   
  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*)

{
open Microsoft.FSharp.Text.Lexing
open Yard.Utils.SourceText
}

include "../../../GrammarTemplates/Common.yrd"
include "../common_grammars/MsCommon.yrd"

tokens {
    _ of SourceText
}

options {
    translate = false
    module = "Yard.Examples.MSParser"
    infEpsPath = epsilons
    pos = uint64
}

module Main

open Common, MsCommon

[<Start>]
root_rule: (batch_body '/'?)*

batch_body: 
       create_proc
     | set_stmnt
     | begin_transaction
     | commit_transaction
     | declare
     | case (**&&&***)
     | rollback_transaction
     | if_stmt 
     | drop_procedure 
     | create_table
     | insert
	 | stmt_block
	 | 'commit' ';'?
	 | e=error {printfn "Error in position %A" }
  
(*********************************PROCEDURE************************************************************)    


proc_formal_param:
    LOCALVAR [full_ident '.'] sql_datatype?
    ['VARYING'] ['=' ('NULL' | DEC_NUMBER | STRING_CONST)]
    ['OUT' | 'OUTPUT'] 'READONLY'?  
  
create_proc:
    'CREATE' ('PROCEDURE' | 'PROC')
    [ident '.'] ident [';' DEC_NUMBER]
    brace_opt<'(' comma_list<proc_formal_param> ')'>
    ['WITH' (execute_as)+]
    ['FOR' 'REPLICATION']
    'AS' (proc_body_stmnt ';'?)*
    ';'?

procedure_option: 
  [
      'ENCRYPTION'
    | 'RECOMPILE'
    | 'EXECUTE_AS_Clause'
  ]

