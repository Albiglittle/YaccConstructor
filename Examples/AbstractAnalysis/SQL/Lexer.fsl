{
//  UserLexer.fs contains simple lexer for testing.
//
//  for build:  fslex Lexer.fsl --unicode -o Lexer.fs
//
//  Copyright 2011, 2012 Semen Grigorev <rsdpisuy@gmail.com>
//
//  This file is part of YaccConctructor.
//
//  YaccConstructor is free software:you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

module Lexer
//open Microsoft.FSharp.Text.Lexing
//open Microsoft.FSharp.Text
open Microsoft.FSharp.Reflection
open Yard.Examples.MSParser
open LexerHelper
open System
open Yard.Utils.StructClass

let mutable id = 0<id>

}

let anything = ['a'-'z' 'A'-'Z' '0'-'9' '\n' '\r' ' ' ] + 
let lparen = '('
let rparen = ')'
let eol = '\r' | '\n' | '\r' '\n' (* See script.sql position (4560,27) *)
let whitespaces = [' '  '\t']+
let idenstarchar  = ['A'-'Z' 'a'-'z' '_' '@' '#' '%' 'а'-'я' 'А'-'Я' ] 
let idenbody_char  = ['A'-'Z' 'a'-'z' '_' '0'-'9' '@' '%' '#' '$' 'а'-'я' 'А'-'Я' ] 
// Разобраться с идентификаторами cyrillic с,а (885574,_) (1004524)
//let with_dot = '.' | idenbody_char
let ident = idenstarchar idenbody_char*
let decnumber = ['0'-'9']+ 
let hexnumber = "0x" ['0'-'9' 'a'-'f' 'A'-'F']+
let floae = 'e' | 'E'
let floatnumber = decnumber ('.' decnumber)? ( floae decnumber) ? (* what with 100.   ?? *)
let label = ident ':'

rule tokens = parse
(* | eol          { lexbuf.EndPos <- lexbuf.EndPos.NextLine;tokens lexbuf }
 | '\'' | "N'" { clearBuf(); startPos := lexbuf.StartPos; literal lexbuf } *)
 | decnumber    { DEC_NUMBER(defaultSourceText id brs lexeme )|> Some }
 | whitespaces  { None }
 | "."          { getLiteral id brs "." |> Some }
 | ","          { getLiteral id brs "," |> Some }
 | "="          { getLiteral id brs "=" |> Some }
 | ">"          { getLiteral id brs ">"|> Some  }
 | "<"          { getLiteral id brs "<" |> Some }
 | ";"          { getLiteral id brs ";" |> Some }
 | "("      { getLiteral id brs "(" |> Some }
 | ")"      { getLiteral id brs ")" |> Some }
 | "["      { getLiteral id brs "[" |> Some }
 | "]"      { getLiteral id brs "]" |> Some }
 | "+"      { getLiteral id brs "+" |> Some }
 | "-"      { getLiteral id brs "-" |> Some }
 | "~"      { getLiteral id brs "~" |> Some }
 | "*"      { getLiteral id brs "*" |> Some }
 //| "$"      { getLiteral brs "$" } 
 | ident {  let tok = makeIdent false lexeme (brs, brs)
            Some tok }
 | "--" [^'\r' '\n']*  { None (* parser knows nothing about comments *) }  
 (*| "/*" { commendepth := 1; clearBuf(); multiline_comment brs }*)
 | eof  {RNGLR_EOF(defaultSourceText id brs  "") |> Some }
 | _    { failwith (sprintf "fucking shit received %s\n" lexeme ) }
(* and literal = parse
  | "''" { appendBuf("'"); literal brs }
  | '\'' { STRING_CONST(defaultSourceText id  brs (string str_buf)) }
  | eol { appendBuf(lexeme brs); brs.EndPos <- brs.EndPos.NextLine; literal brs }
  | eof { failwith "unclosed literal at the end of file" }
  | _ { appendBuf(lexeme brs); literal brs }
and multiline_comment = parse
  | "/*" 
    { incr commendepth; appendBuf(brsfer<_>.LexemeString(brs)); multiline_comment brs}
  | "*/"
    { decr commendepth; 
      if !commendepth = 0 then 
        tokens brs
      else 
        appendBuf(brsfer<_>.LexemeString(brs)); multiline_comment brs 
    }
  | eol {brs.EndPos <- brs.EndPos.NextLine; appendBuf(brsfer<_>.LexemeString(brs)); multiline_comment brs }
  | eof { failwith "unclosed comment in the end of file" }
  | [^ '\r' '\n' '*' '/']+ { appendBuf(brsfer<_>.LexemeString(brs)); multiline_comment brs } 
  | _ { appendBuf(brsfer<_>.LexemeString(brs)); multiline_comment brs }

*)  
