// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


open AST


# 12 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | SEMI of (string)
  | PLUS of (string)
  | KW_FUN of (string)
  | ARROW of (string)
  | KW_LET of (string)
  | EQ of (string)
  | NUMBER of (string)
  | IDENT of (string)
  | EOF of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_SEMI
    | TOKEN_PLUS
    | TOKEN_KW_FUN
    | TOKEN_ARROW
    | TOKEN_KW_LET
    | TOKEN_EQ
    | TOKEN_NUMBER
    | TOKEN_IDENT
    | TOKEN_EOF
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__starts
    | NONTERM_yard_exp_brackets_2
    | NONTERM_subexpr
    | NONTERM_expr
    | NONTERM_num
    | NONTERM_var
    | NONTERM_ident
    | NONTERM_s
    | NONTERM_yard_many_1
    | NONTERM_yard_rule_not_empty_list_1

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | SEMI _ -> 0 
  | PLUS _ -> 1 
  | KW_FUN _ -> 2 
  | ARROW _ -> 3 
  | KW_LET _ -> 4 
  | EQ _ -> 5 
  | NUMBER _ -> 6 
  | IDENT _ -> 7 
  | EOF _ -> 8 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_SEMI 
  | 1 -> TOKEN_PLUS 
  | 2 -> TOKEN_KW_FUN 
  | 3 -> TOKEN_ARROW 
  | 4 -> TOKEN_KW_LET 
  | 5 -> TOKEN_EQ 
  | 6 -> TOKEN_NUMBER 
  | 7 -> TOKEN_IDENT 
  | 8 -> TOKEN_EOF 
  | 11 -> TOKEN_end_of_input
  | 9 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__starts 
    | 1 -> NONTERM_yard_exp_brackets_2 
    | 2 -> NONTERM_subexpr 
    | 3 -> NONTERM_subexpr 
    | 4 -> NONTERM_subexpr 
    | 5 -> NONTERM_subexpr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_num 
    | 8 -> NONTERM_var 
    | 9 -> NONTERM_ident 
    | 10 -> NONTERM_s 
    | 11 -> NONTERM_yard_many_1 
    | 12 -> NONTERM_yard_many_1 
    | 13 -> NONTERM_yard_rule_not_empty_list_1 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 11 
let _fsyacc_tagOfErrorTerminal = 9

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | SEMI _ -> "SEMI" 
  | PLUS _ -> "PLUS" 
  | KW_FUN _ -> "KW_FUN" 
  | ARROW _ -> "ARROW" 
  | KW_LET _ -> "KW_LET" 
  | EQ _ -> "EQ" 
  | NUMBER _ -> "NUMBER" 
  | IDENT _ -> "IDENT" 
  | EOF _ -> "EOF" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | SEMI _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PLUS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | KW_FUN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ARROW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | KW_LET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUMBER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 2us; 65535us; 21us; 21us; 23us; 21us; 3us; 65535us; 9us; 6us; 12us; 7us; 15us; 8us; 2us; 65535us; 0us; 23us; 2us; 3us; 3us; 65535us; 9us; 4us; 12us; 4us; 15us; 4us; 3us; 65535us; 9us; 5us; 12us; 5us; 15us; 5us; 2us; 65535us; 10us; 11us; 13us; 14us; 1us; 65535us; 0us; 1us; 2us; 65535us; 21us; 22us; 23us; 24us; 1us; 65535us; 0us; 19us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 4us; 8us; 11us; 15us; 19us; 22us; 24us; 27us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 3us; 2us; 4us; 4us; 2us; 4us; 5us; 2us; 4us; 6us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 15us; 18us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; 49us; 51us; |]
let _fsyacc_action_rows = 25
let _fsyacc_actionTableElements = [|1us; 32768us; 4us; 13us; 0us; 49152us; 1us; 32768us; 4us; 13us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 1us; 16388us; 1us; 9us; 1us; 16389us; 1us; 9us; 1us; 16390us; 1us; 9us; 3us; 32768us; 2us; 10us; 6us; 16us; 7us; 17us; 1us; 32768us; 7us; 18us; 1us; 32768us; 3us; 12us; 3us; 32768us; 2us; 10us; 6us; 16us; 7us; 17us; 1us; 32768us; 7us; 18us; 1us; 32768us; 5us; 15us; 3us; 32768us; 2us; 10us; 6us; 16us; 7us; 17us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 1us; 32768us; 8us; 20us; 0us; 16394us; 1us; 16395us; 0us; 2us; 0us; 16396us; 1us; 16395us; 0us; 2us; 0us; 16397us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 6us; 7us; 8us; 10us; 12us; 14us; 18us; 20us; 22us; 26us; 28us; 30us; 34us; 35us; 36us; 37us; 39us; 40us; 42us; 43us; 45us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 3us; 4us; 4us; 1us; 1us; 1us; 2us; 0us; 2us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 3us; 4us; 5us; 6us; 7us; 8us; 8us; 9us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16391us; 16392us; 16393us; 65535us; 16394us; 65535us; 16396us; 65535us; 16397us; |]
let _fsyacc_reductions ()  =    [| 
# 137 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_starts));
# 146 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "Parser.fsy"
                                                        fun hd -> let itm=_2  in itm
                   )
# 22 "Parser.fsy"
                 : 'yard_exp_brackets_2));
# 158 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'num)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "Parser.fsy"
                                      let n=_1  in n
                   )
# 24 "Parser.fsy"
                 : 'subexpr));
# 169 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'var)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "Parser.fsy"
                                       let v=_1  in v
                   )
# 25 "Parser.fsy"
                 : 'subexpr));
# 180 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'subexpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'subexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "Parser.fsy"
                                                        let l=_1  in let r=_3  in Sum(l,r)
                   )
# 26 "Parser.fsy"
                 : 'subexpr));
# 193 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'subexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "Parser.fsy"
                                   let id=_2  in let body=_4  in Fun(id,body)
                   )
# 28 "Parser.fsy"
                 : 'subexpr));
# 207 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'subexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                                                       let id=_2  in let expr=_4  in Expr(id,expr)
                   )
# 30 "Parser.fsy"
                 : 'expr));
# 221 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                     let n=_1  in Number(int n)
                   )
# 32 "Parser.fsy"
                 : 'num));
# 232 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                    let v=_1  in Var v
                   )
# 34 "Parser.fsy"
                 : 'var));
# 243 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                      let id=_1  in Ident id
                   )
# 36 "Parser.fsy"
                 : 'ident));
# 254 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'yard_rule_not_empty_list_1)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                                           let lst=_1  in Prog lst
                   )
# 38 "Parser.fsy"
                 : 'a));
# 266 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                      fun hd -> []
                   )
# 40 "Parser.fsy"
                 : 'yard_many_1));
# 276 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'yard_exp_brackets_2)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'yard_many_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                       fun hd -> let yard_head=_1 hd in let yard_tail=_2 hd in yard_head::yard_tail
                   )
# 42 "Parser.fsy"
                 : 'yard_many_1));
# 288 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'yard_many_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                                      let hd=_1  in let tl=_2 hd in hd::tl
                   )
# 45 "Parser.fsy"
                 : 'yard_rule_not_empty_list_1));
|]
# 301 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 12;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let s lexer lexbuf : 'a =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
