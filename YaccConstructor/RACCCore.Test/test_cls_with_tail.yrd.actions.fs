//this file was generated by RACC
//source grammar:..\Tests\RACC\test_cls_with_tail\\test_cls_with_tail.yrd
//date:2/3/2011 14:02:16

module RACC.Actions_Cls_tail

open Yard.Generators.RACCGenerator

let value x = x.value

let s0 expr = 
    let inner  = 
        match expr with
        | RESeq [x0; x1] -> 
            let (res) =
                let yardElemAction expr = 
                    match expr with
                    | REClosure(lst) -> 
                        let yardClsAction expr = 
                            match expr with
                            | RESeq [_] -> 

                                ("list minus")
                            | x -> "Unexpected type of node\nType " + x.ToString() + " is not expected in this position\nRESeq was expected." |> failwith

                        List.map yardClsAction lst 
                    | x -> "Unexpected type of node\nType " + x.ToString() + " is not expected in this position\nREClosure was expected." |> failwith

                yardElemAction(x0)
            let (oneMinus) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tMINUS -> tMINUS :?> 'a
                    | x -> "Unexpected type of node\nType " + x.ToString() + " is not expected in this position\nRELeaf was expected." |> failwith

                yardElemAction(x1)
            (res |> fun x -> x @ ["tail minus"] |> String.concat ";")
        | x -> "Unexpected type of node\nType " + x.ToString() + " is not expected in this position\nRESeq was expected." |> failwith
    box (inner)

let ruleToAction = dict [|("s",s0)|]

