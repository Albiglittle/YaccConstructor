//this file was generated by RACC
//source grammar:..\Tests\RACC\test_alt\\test_alt.yrd
//date:12/14/2010 18:13:01

module RACC.Actions_Alt

open Yard.Generators.RACCGenerator

exception CheckerFalse

let value x = x.value

let s0 expr = 
    let inner  = 
        match expr with
        | REAlt(Some(x), None) -> 
            let yardLAltAction expr = 
                match expr with
                | RESeq [x0] -> 
                    let (p) =
                        let yardElemAction expr = 
                            match expr with
                            | RELeaf tPLUS -> tPLUS :?> 'a
                            | x -> "Unexpected type of node\nType " + x.ToString() + " is not expected in this position\nRELeaf was expected." |> failwith

                        yardElemAction(x0)
                    ("Detected: " + (value p))
                | x -> "Unexpected type of node\nType " + x.ToString() + " is not expected in this position\nRESeq was expected." |> failwith

            yardLAltAction x 
        | REAlt(None, Some(x)) -> 
            let yardRAltAction expr = 
                match expr with
                | RESeq [x0] -> 
                    let (m) =
                        let yardElemAction expr = 
                            match expr with
                            | RELeaf tMULT -> tMULT :?> 'a
                            | x -> "Unexpected type of node\nType " + x.ToString() + " is not expected in this position\nRELeaf was expected." |> failwith

                        yardElemAction(x0)
                    ("Detected: " + (value m))
                | x -> "Unexpected type of node\nType " + x.ToString() + " is not expected in this position\nRESeq was expected." |> failwith

            yardRAltAction x 
        | x -> "Unexpected type of node\nType " + x.ToString() + " is not expected in this position\nREAlt was expected." |> failwith
    box (inner)

let ruleToAction = dict [|("s",s0)|]

