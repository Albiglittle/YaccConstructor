//this file was generated by RACC
//source grammar:..\Tests\RACC\test_reduce_reduce\\test_reduce_reduce.yrd
//date:2/12/2011 10:57:04 AM

module RACC.Actions_Rdc_Rdc

open Yard.Generators.RACCGenerator

let getUnmatched x expectedType =
    "Unexpected type of node\nType " + x.ToString() + " is not expected in this position\n" + expectedType + " was expected." |> failwith
let s0 expr = 
    let inner  = 
        match expr with
        | RESeq [x0] -> 
            let (res:string) =
                let yardElemAction expr = 
                    match expr with
                    | REAlt(Some(x), None) -> 
                        let yardLAltAction expr = 
                            match expr with
                            | RESeq [x0] -> 
                                let (r) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf a -> (a :?> _ ) 
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(x0)
                                (r)
                            | x -> getUnmatched x "RESeq"

                        yardLAltAction x 
                    | REAlt(None, Some(x)) -> 
                        let yardRAltAction expr = 
                            match expr with
                            | RESeq [x0] -> 
                                let (r) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf b -> (b :?> _ ) 
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(x0)
                                (r)
                            | x -> getUnmatched x "RESeq"

                        yardRAltAction x 
                    | x -> getUnmatched x "REAlt"

                yardElemAction(x0)
            (res)
        | x -> getUnmatched x "RESeq"
    box (inner)
let a1 expr = 
    let inner  = 
        match expr with
        | RESeq [_; _; _] -> 



            ( "A" )
        | x -> getUnmatched x "RESeq"
    box (inner)
let b2 expr = 
    let inner  = 
        match expr with
        | RESeq [_; _; _] -> 



            ( "B" )
        | x -> getUnmatched x "RESeq"
    box (inner)

let ruleToAction = dict [|("b",b2); ("a",a1); ("s",s0)|]

