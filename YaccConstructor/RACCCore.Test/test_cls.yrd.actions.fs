//this file was generated by RACC
//source grammar:..\Tests\RACC\test_cls\\test_cls.yrd
//date:12/9/2010 16:19:26

module RACC.Actions_Cls

open Yard.Generators.RACCGenerator

let value x =
    ((x:>Lexeme<string>).value)

let s0 expr = 
    match expr with
    | RESeq [x0] -> 
        let (lst) =
            let yardElemAction expr = 
                match expr with
                | REClosure(lst) -> 
                    let yardClsAction expr = 
                        match expr with
                        | RESeq [x0] -> 
                            let (m) =
                                let yardElemAction expr = 
                                    match expr with
                                    | RELeaf tMULT -> tMULT :?> 'a
                                    | x -> "Unexpected type of node\nType " + x.ToString() + " is not expected in this position\nRELeaf was expected." |> failwith

                                yardElemAction(x0)
                            box (m)
                        | x -> "Unexpected type of node\nType " + x.ToString() + " is not expected in this position\nRESeq was expected." |> failwith

                    List.map (fun x -> (yardClsAction x) :?>_) lst 
                | x -> "Unexpected type of node\nType " + x.ToString() + " is not expected in this position\nREClosure was expected." |> failwith

            yardElemAction(x0)
        box (List.map value lst |> String.concat ";")
    | x -> "Unexpected type of node\nType " + x.ToString() + " is not expected in this position\nRESeq was expected." |> failwith


let ruleToAction = dict [|("s",s0)|]

