//this file was generated by RACC
//source grammar:..\Tests\RACC\test_seq\\test_seq.yrd
//date:2/12/2011 10:56:49 AM

module RACC.Actions_Seq

open Yard.Generators.RACCGenerator

let getUnmatched x expectedType =
    "Unexpected type of node\nType " + x.ToString() + " is not expected in this position\n" + expectedType + " was expected." |> failwith

let value x = (x:>Lexeme<string>).value

let s0 expr = 
    let inner  = 
        match expr with
        | RESeq [x0; _; x1] -> 
            let (l) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tNUMBER -> tNUMBER :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(x0)

            let (r) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tNUMBER -> tNUMBER :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(x1)
            ((value l |> float) + (value r |> float))
        | x -> getUnmatched x "RESeq"
    box (inner)

let ruleToAction = dict [|("s",s0)|]


//test footer

