{
module Calc.Lexer
open AbstractLexer.Test.Calc.Parser
open AbstractLexer.Core

}

let digit = ['0'-'9']
let whitespace = [' ' '\t' '\r' '\n']

rule token = parse
| whitespace { MULT(lexeme,brs) }
| ['-']? digit+ ('.'digit+)? (['e' 'E'] digit+)? { NUMBER(lexeme,brs) }
| '-' { MINUS(lexeme,brs) }
| '(' { LBRACE(lexeme,brs) }
| ')' { RBRACE(lexeme,brs) }
| '/' { DIV(lexeme,brs) }
| '+' { PLUS(lexeme,brs) }
| "**" { POW(lexeme,brs) }
| '*' { MULT(lexeme,brs) }
| eof { RNGLR_EOF ("",[||]) }
| _ { failwithf "unexpected input: %s" <| "-" }
