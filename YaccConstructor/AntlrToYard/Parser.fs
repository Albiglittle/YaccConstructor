// Implementation file for parser generated by fsyacc
module AntlrToYard.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open AntlrToYard.IL
open AntlrToYard.Tokens
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

(* Run with fsyacc.exe --module AntlrToYard.Parser --open AntlrToYard.IL --open AntlrToYard.Tokens Parser.fsy *)


(*
Expr: ID { Val($1) }
     | INT {  Int($1)  }
     | FLOAT {  Float($1)  }
     | DECR LPAREN Expr RPAREN {  Decr($3)  }


 Stmt: ID ASSIGN Expr { Assign($1,$3) }
     | WHILE Expr DO Stmt { While($2,$4) }
     | BEGIN StmtList END { Seq(List.rev($2)) }
     | IF Expr THEN Stmt { IfThen($2,$4) }
     | IF Expr THEN Stmt ELSE Stmt { IfThenElse($2,$4,$6) }
     | PRINT Expr { Print($2) }


 StmtList: Stmt { [$1] }
        | StmtList SEMI Stmt { $3 :: $1  }

*)


# 34 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | DOUBLE_DOT
  | TILDE
  | EXCLAMATION
  | QUESTION
  | SEMICOLON
  | COLON
  | PLUS
  | STAR
  | EQUAL
  | BAR
  | RPAREN
  | LPAREN
  | LITERAL of (Lexeme)
  | IDENTIFIER of (Lexeme)
  | T_OPTIONS
  | T_GRAMMAR
  | EOF
  | ACTION_CODE of (Lexeme)
  | ACTION_NAME of (Lexeme)
  | SCOPE_NAME of (Lexeme)
  | SINGLELINE_COMMENT of (Lexeme)
  | MULTILINE_COMMENT of (Lexeme)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_DOUBLE_DOT
    | TOKEN_TILDE
    | TOKEN_EXCLAMATION
    | TOKEN_QUESTION
    | TOKEN_SEMICOLON
    | TOKEN_COLON
    | TOKEN_PLUS
    | TOKEN_STAR
    | TOKEN_EQUAL
    | TOKEN_BAR
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_LITERAL
    | TOKEN_IDENTIFIER
    | TOKEN_T_OPTIONS
    | TOKEN_T_GRAMMAR
    | TOKEN_EOF
    | TOKEN_ACTION_CODE
    | TOKEN_ACTION_NAME
    | TOKEN_SCOPE_NAME
    | TOKEN_SINGLELINE_COMMENT
    | TOKEN_MULTILINE_COMMENT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startParseAntlr
    | NONTERM_ParseAntlr
    | NONTERM_Rules
    | NONTERM_Rule
    | NONTERM_Options
    | NONTERM_RuleBody
    | NONTERM_RulePart

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | DOUBLE_DOT  -> 0 
  | TILDE  -> 1 
  | EXCLAMATION  -> 2 
  | QUESTION  -> 3 
  | SEMICOLON  -> 4 
  | COLON  -> 5 
  | PLUS  -> 6 
  | STAR  -> 7 
  | EQUAL  -> 8 
  | BAR  -> 9 
  | RPAREN  -> 10 
  | LPAREN  -> 11 
  | LITERAL _ -> 12 
  | IDENTIFIER _ -> 13 
  | T_OPTIONS  -> 14 
  | T_GRAMMAR  -> 15 
  | EOF  -> 16 
  | ACTION_CODE _ -> 17 
  | ACTION_NAME _ -> 18 
  | SCOPE_NAME _ -> 19 
  | SINGLELINE_COMMENT _ -> 20 
  | MULTILINE_COMMENT _ -> 21 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_DOUBLE_DOT 
  | 1 -> TOKEN_TILDE 
  | 2 -> TOKEN_EXCLAMATION 
  | 3 -> TOKEN_QUESTION 
  | 4 -> TOKEN_SEMICOLON 
  | 5 -> TOKEN_COLON 
  | 6 -> TOKEN_PLUS 
  | 7 -> TOKEN_STAR 
  | 8 -> TOKEN_EQUAL 
  | 9 -> TOKEN_BAR 
  | 10 -> TOKEN_RPAREN 
  | 11 -> TOKEN_LPAREN 
  | 12 -> TOKEN_LITERAL 
  | 13 -> TOKEN_IDENTIFIER 
  | 14 -> TOKEN_T_OPTIONS 
  | 15 -> TOKEN_T_GRAMMAR 
  | 16 -> TOKEN_EOF 
  | 17 -> TOKEN_ACTION_CODE 
  | 18 -> TOKEN_ACTION_NAME 
  | 19 -> TOKEN_SCOPE_NAME 
  | 20 -> TOKEN_SINGLELINE_COMMENT 
  | 21 -> TOKEN_MULTILINE_COMMENT 
  | 24 -> TOKEN_end_of_input
  | 22 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startParseAntlr 
    | 1 -> NONTERM_ParseAntlr 
    | 2 -> NONTERM_Rules 
    | 3 -> NONTERM_Rules 
    | 4 -> NONTERM_Rule 
    | 5 -> NONTERM_Options 
    | 6 -> NONTERM_Options 
    | 7 -> NONTERM_RuleBody 
    | 8 -> NONTERM_RuleBody 
    | 9 -> NONTERM_RulePart 
    | 10 -> NONTERM_RulePart 
    | 11 -> NONTERM_RulePart 
    | 12 -> NONTERM_RulePart 
    | 13 -> NONTERM_RulePart 
    | 14 -> NONTERM_RulePart 
    | 15 -> NONTERM_RulePart 
    | 16 -> NONTERM_RulePart 
    | 17 -> NONTERM_RulePart 
    | 18 -> NONTERM_RulePart 
    | 19 -> NONTERM_RulePart 
    | 20 -> NONTERM_RulePart 
    | 21 -> NONTERM_RulePart 
    | 22 -> NONTERM_RulePart 
    | 23 -> NONTERM_RulePart 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 24 
let _fsyacc_tagOfErrorTerminal = 22

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | DOUBLE_DOT  -> "DOUBLE_DOT" 
  | TILDE  -> "TILDE" 
  | EXCLAMATION  -> "EXCLAMATION" 
  | QUESTION  -> "QUESTION" 
  | SEMICOLON  -> "SEMICOLON" 
  | COLON  -> "COLON" 
  | PLUS  -> "PLUS" 
  | STAR  -> "STAR" 
  | EQUAL  -> "EQUAL" 
  | BAR  -> "BAR" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | LITERAL _ -> "LITERAL" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | T_OPTIONS  -> "T_OPTIONS" 
  | T_GRAMMAR  -> "T_GRAMMAR" 
  | EOF  -> "EOF" 
  | ACTION_CODE _ -> "ACTION_CODE" 
  | ACTION_NAME _ -> "ACTION_NAME" 
  | SCOPE_NAME _ -> "SCOPE_NAME" 
  | SINGLELINE_COMMENT _ -> "SINGLELINE_COMMENT" 
  | MULTILINE_COMMENT _ -> "MULTILINE_COMMENT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | DOUBLE_DOT  -> (null : System.Object) 
  | TILDE  -> (null : System.Object) 
  | EXCLAMATION  -> (null : System.Object) 
  | QUESTION  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | BAR  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | T_OPTIONS  -> (null : System.Object) 
  | T_GRAMMAR  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | ACTION_CODE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ACTION_NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SCOPE_NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SINGLELINE_COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MULTILINE_COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 2us; 65535us; 0us; 4us; 2us; 5us; 1us; 65535us; 6us; 7us; 1us; 65535us; 8us; 9us; 2us; 65535us; 8us; 13us; 9us; 14us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 10us; 12us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 3us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 4us; 2us; 4us; 8us; 1us; 4us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 11us; 13us; 15us; 17us; 19us; 22us; 24us; 26us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; |]
let _fsyacc_action_rows = 30
let _fsyacc_actionTableElements = [|1us; 32768us; 13us; 6us; 0us; 49152us; 2us; 32768us; 13us; 6us; 16us; 3us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 1us; 16389us; 14us; 11us; 1us; 32768us; 5us; 8us; 15us; 32768us; 0us; 15us; 1us; 16us; 2us; 18us; 3us; 17us; 6us; 19us; 7us; 20us; 8us; 21us; 9us; 22us; 10us; 23us; 11us; 24us; 12us; 25us; 13us; 26us; 17us; 27us; 18us; 28us; 19us; 29us; 16us; 32768us; 0us; 15us; 1us; 16us; 2us; 18us; 3us; 17us; 4us; 10us; 6us; 19us; 7us; 20us; 8us; 21us; 9us; 22us; 10us; 23us; 11us; 24us; 12us; 25us; 13us; 26us; 17us; 27us; 18us; 28us; 19us; 29us; 0us; 16388us; 1us; 32768us; 17us; 12us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 0us; 16407us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 6us; 7us; 8us; 9us; 11us; 13us; 29us; 46us; 47us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 2us; 5us; 0us; 2us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 16387us; 65535us; 65535us; 65535us; 65535us; 16388us; 65535us; 16390us; 16391us; 16392us; 16393us; 16394us; 16395us; 16396us; 16397us; 16398us; 16399us; 16400us; 16401us; 16402us; 16403us; 16404us; 16405us; 16406us; 16407us; |]
let _fsyacc_reductions ()  =    [| 
# 244 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startParseAntlr));
# 253 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Rules)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                             {yo = "sdfdsf"} 
                   )
# 58 "Parser.fsy"
                 : Prog));
# 264 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Rule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                  
                   )
# 60 "Parser.fsy"
                 : 'Rules));
# 275 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Rules)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Rule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                       
                   )
# 61 "Parser.fsy"
                 : 'Rules));
# 287 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Lexeme)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Options)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'RuleBody)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                                        
                   )
# 63 "Parser.fsy"
                 : 'Rule));
# 300 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                               
                   )
# 65 "Parser.fsy"
                 : 'Options));
# 310 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Lexeme)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                          
                   )
# 65 "Parser.fsy"
                 : 'Options));
# 321 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'RulePart)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                         
                   )
# 67 "Parser.fsy"
                 : 'RuleBody));
# 332 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'RuleBody)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'RulePart)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                                                
                   )
# 67 "Parser.fsy"
                 : 'RuleBody));
# 344 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                   
                   )
# 70 "Parser.fsy"
                 : 'RulePart));
# 354 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                
                   )
# 71 "Parser.fsy"
                 : 'RulePart));
# 364 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                   
                   )
# 72 "Parser.fsy"
                 : 'RulePart));
# 374 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                      
                   )
# 73 "Parser.fsy"
                 : 'RulePart));
# 384 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                               
                   )
# 74 "Parser.fsy"
                 : 'RulePart));
# 394 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                               
                   )
# 75 "Parser.fsy"
                 : 'RulePart));
# 404 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                
                   )
# 76 "Parser.fsy"
                 : 'RulePart));
# 414 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                              
                   )
# 77 "Parser.fsy"
                 : 'RulePart));
# 424 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                 
                   )
# 78 "Parser.fsy"
                 : 'RulePart));
# 434 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                 
                   )
# 79 "Parser.fsy"
                 : 'RulePart));
# 444 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Lexeme)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                  
                   )
# 80 "Parser.fsy"
                 : 'RulePart));
# 455 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Lexeme)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                     
                   )
# 81 "Parser.fsy"
                 : 'RulePart));
# 466 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Lexeme)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                      
                   )
# 82 "Parser.fsy"
                 : 'RulePart));
# 477 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Lexeme)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                      
                   )
# 83 "Parser.fsy"
                 : 'RulePart));
# 488 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Lexeme)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                     
                   )
# 84 "Parser.fsy"
                 : 'RulePart));
|]
# 500 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 25;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let ParseAntlr lexer lexbuf : Prog =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
