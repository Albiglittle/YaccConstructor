// Implementation file for parser generated by fsyacc
module AntlrToYard.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Yard.Core.IL
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


open Yard.Core.IL.Production

(* Run with fsyacc.exe --module AntlrToYard.Parser --open Yard.Core.IL Parser.fsy *)


(*
Expr: ID { Val($1) }
     | INT {  Int($1)  }
     | FLOAT {  Float($1)  }
     | DECR LPAREN Expr RPAREN {  Decr($3)  }


 Stmt: ID ASSIGN Expr { Assign($1,$3) }
     | WHILE Expr DO Stmt { While($2,$4) }
     | BEGIN StmtList END { Seq(List.rev($2)) }
     | IF Expr THEN Stmt { IfThen($2,$4) }
     | IF Expr THEN Stmt ELSE Stmt { IfThenElse($2,$4,$6) }
     | PRINT Expr { Print($2) }


 StmtList: Stmt { [$1] }
        | StmtList SEMI Stmt { $3 :: $1  }

*)

let makeModifiedRule innerProduction modifier =
    match modifier with
    | "+" -> PSome(innerProduction)
    | "*" -> PMany(innerProduction)
    | "?" -> POpt(innerProduction)
    | "!" -> innerProduction // Not included in AST
    | "" -> innerProduction

let makePSeq (productionList, actionCode) =
    PSeq( List.map (fun prod -> {omit = false; rule = prod; binding = None; checker = None;}) productionList , actionCode )
    

# 47 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | DOUBLE_DOT
  | TILDE
  | EXCLAMATION
  | QUESTION
  | SEMICOLON
  | COLON
  | PLUS
  | STAR
  | EQUAL
  | BAR
  | RPAREN
  | LPAREN
  | LITERAL of (Source.t)
  | IDENTIFIER of (Source.t)
  | T_OPTIONS
  | T_GRAMMAR
  | EOF
  | ACTION_CODE of (Source.t)
  | ACTION_NAME of (Source.t)
  | SCOPE_NAME of (Source.t)
  | SINGLELINE_COMMENT of (Source.t)
  | MULTILINE_COMMENT of (Source.t)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_DOUBLE_DOT
    | TOKEN_TILDE
    | TOKEN_EXCLAMATION
    | TOKEN_QUESTION
    | TOKEN_SEMICOLON
    | TOKEN_COLON
    | TOKEN_PLUS
    | TOKEN_STAR
    | TOKEN_EQUAL
    | TOKEN_BAR
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_LITERAL
    | TOKEN_IDENTIFIER
    | TOKEN_T_OPTIONS
    | TOKEN_T_GRAMMAR
    | TOKEN_EOF
    | TOKEN_ACTION_CODE
    | TOKEN_ACTION_NAME
    | TOKEN_SCOPE_NAME
    | TOKEN_SINGLELINE_COMMENT
    | TOKEN_MULTILINE_COMMENT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startParseAntlr
    | NONTERM_ParseAntlr
    | NONTERM_TopLevelDefs
    | NONTERM_TopLevelDef
    | NONTERM_Rule
    | NONTERM_Options
    | NONTERM_RuleBody
    | NONTERM_Alt
    | NONTERM_ActionCodeOptional
    | NONTERM_Seq
    | NONTERM_Modifier
    | NONTERM_SimpleProduction
    | NONTERM_RulePart

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | DOUBLE_DOT  -> 0 
  | TILDE  -> 1 
  | EXCLAMATION  -> 2 
  | QUESTION  -> 3 
  | SEMICOLON  -> 4 
  | COLON  -> 5 
  | PLUS  -> 6 
  | STAR  -> 7 
  | EQUAL  -> 8 
  | BAR  -> 9 
  | RPAREN  -> 10 
  | LPAREN  -> 11 
  | LITERAL _ -> 12 
  | IDENTIFIER _ -> 13 
  | T_OPTIONS  -> 14 
  | T_GRAMMAR  -> 15 
  | EOF  -> 16 
  | ACTION_CODE _ -> 17 
  | ACTION_NAME _ -> 18 
  | SCOPE_NAME _ -> 19 
  | SINGLELINE_COMMENT _ -> 20 
  | MULTILINE_COMMENT _ -> 21 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_DOUBLE_DOT 
  | 1 -> TOKEN_TILDE 
  | 2 -> TOKEN_EXCLAMATION 
  | 3 -> TOKEN_QUESTION 
  | 4 -> TOKEN_SEMICOLON 
  | 5 -> TOKEN_COLON 
  | 6 -> TOKEN_PLUS 
  | 7 -> TOKEN_STAR 
  | 8 -> TOKEN_EQUAL 
  | 9 -> TOKEN_BAR 
  | 10 -> TOKEN_RPAREN 
  | 11 -> TOKEN_LPAREN 
  | 12 -> TOKEN_LITERAL 
  | 13 -> TOKEN_IDENTIFIER 
  | 14 -> TOKEN_T_OPTIONS 
  | 15 -> TOKEN_T_GRAMMAR 
  | 16 -> TOKEN_EOF 
  | 17 -> TOKEN_ACTION_CODE 
  | 18 -> TOKEN_ACTION_NAME 
  | 19 -> TOKEN_SCOPE_NAME 
  | 20 -> TOKEN_SINGLELINE_COMMENT 
  | 21 -> TOKEN_MULTILINE_COMMENT 
  | 24 -> TOKEN_end_of_input
  | 22 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startParseAntlr 
    | 1 -> NONTERM_ParseAntlr 
    | 2 -> NONTERM_TopLevelDefs 
    | 3 -> NONTERM_TopLevelDefs 
    | 4 -> NONTERM_TopLevelDef 
    | 5 -> NONTERM_TopLevelDef 
    | 6 -> NONTERM_Rule 
    | 7 -> NONTERM_Options 
    | 8 -> NONTERM_Options 
    | 9 -> NONTERM_RuleBody 
    | 10 -> NONTERM_RuleBody 
    | 11 -> NONTERM_Alt 
    | 12 -> NONTERM_Alt 
    | 13 -> NONTERM_ActionCodeOptional 
    | 14 -> NONTERM_ActionCodeOptional 
    | 15 -> NONTERM_Seq 
    | 16 -> NONTERM_Seq 
    | 17 -> NONTERM_Modifier 
    | 18 -> NONTERM_Modifier 
    | 19 -> NONTERM_Modifier 
    | 20 -> NONTERM_Modifier 
    | 21 -> NONTERM_Modifier 
    | 22 -> NONTERM_SimpleProduction 
    | 23 -> NONTERM_SimpleProduction 
    | 24 -> NONTERM_SimpleProduction 
    | 25 -> NONTERM_RulePart 
    | 26 -> NONTERM_RulePart 
    | 27 -> NONTERM_RulePart 
    | 28 -> NONTERM_RulePart 
    | 29 -> NONTERM_RulePart 
    | 30 -> NONTERM_RulePart 
    | 31 -> NONTERM_RulePart 
    | 32 -> NONTERM_RulePart 
    | 33 -> NONTERM_RulePart 
    | 34 -> NONTERM_RulePart 
    | 35 -> NONTERM_RulePart 
    | 36 -> NONTERM_RulePart 
    | 37 -> NONTERM_RulePart 
    | 38 -> NONTERM_RulePart 
    | 39 -> NONTERM_RulePart 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 24 
let _fsyacc_tagOfErrorTerminal = 22

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | DOUBLE_DOT  -> "DOUBLE_DOT" 
  | TILDE  -> "TILDE" 
  | EXCLAMATION  -> "EXCLAMATION" 
  | QUESTION  -> "QUESTION" 
  | SEMICOLON  -> "SEMICOLON" 
  | COLON  -> "COLON" 
  | PLUS  -> "PLUS" 
  | STAR  -> "STAR" 
  | EQUAL  -> "EQUAL" 
  | BAR  -> "BAR" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | LITERAL _ -> "LITERAL" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | T_OPTIONS  -> "T_OPTIONS" 
  | T_GRAMMAR  -> "T_GRAMMAR" 
  | EOF  -> "EOF" 
  | ACTION_CODE _ -> "ACTION_CODE" 
  | ACTION_NAME _ -> "ACTION_NAME" 
  | SCOPE_NAME _ -> "SCOPE_NAME" 
  | SINGLELINE_COMMENT _ -> "SINGLELINE_COMMENT" 
  | MULTILINE_COMMENT _ -> "MULTILINE_COMMENT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | DOUBLE_DOT  -> (null : System.Object) 
  | TILDE  -> (null : System.Object) 
  | EXCLAMATION  -> (null : System.Object) 
  | QUESTION  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | BAR  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | T_OPTIONS  -> (null : System.Object) 
  | T_GRAMMAR  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | ACTION_CODE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ACTION_NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SCOPE_NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SINGLELINE_COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MULTILINE_COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 2us; 65535us; 0us; 4us; 2us; 5us; 2us; 65535us; 0us; 6us; 2us; 6us; 1us; 65535us; 9us; 10us; 2us; 65535us; 11us; 12us; 24us; 17us; 4us; 65535us; 11us; 16us; 18us; 19us; 20us; 22us; 24us; 16us; 1us; 65535us; 20us; 21us; 4us; 65535us; 11us; 20us; 18us; 20us; 20us; 20us; 24us; 20us; 2us; 65535us; 25us; 26us; 27us; 28us; 4us; 65535us; 11us; 27us; 18us; 27us; 20us; 27us; 24us; 27us; 0us; 65535us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 11us; 13us; 16us; 21us; 23us; 28us; 31us; 36us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 3us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 6us; 2us; 6us; 10us; 1us; 6us; 1us; 8us; 1us; 8us; 1us; 9us; 2us; 10us; 15us; 1us; 10us; 1us; 10us; 2us; 11us; 12us; 1us; 11us; 1us; 12us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 22us; 2us; 23us; 24us; 1us; 23us; 1us; 23us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 11us; 13us; 15us; 17us; 19us; 21us; 23us; 25us; 28us; 30us; 32us; 34us; 36us; 39us; 41us; 43us; 46us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 72us; 75us; 77us; |]
let _fsyacc_action_rows = 37
let _fsyacc_actionTableElements = [|2us; 32768us; 13us; 9us; 14us; 7us; 0us; 49152us; 3us; 32768us; 13us; 9us; 14us; 7us; 16us; 3us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 1us; 32768us; 17us; 8us; 0us; 16389us; 1us; 16391us; 14us; 14us; 1us; 32768us; 5us; 11us; 3us; 32768us; 11us; 24us; 12us; 34us; 13us; 33us; 2us; 32768us; 4us; 13us; 9us; 18us; 0us; 16390us; 1us; 32768us; 17us; 15us; 0us; 16392us; 0us; 16393us; 2us; 32768us; 9us; 18us; 10us; 25us; 3us; 32768us; 11us; 24us; 12us; 34us; 13us; 33us; 0us; 16394us; 4us; 16397us; 11us; 24us; 12us; 34us; 13us; 33us; 17us; 23us; 0us; 16395us; 0us; 16396us; 0us; 16398us; 3us; 32768us; 11us; 24us; 12us; 34us; 13us; 33us; 4us; 16405us; 2us; 32us; 3us; 31us; 6us; 29us; 7us; 30us; 0us; 16399us; 4us; 16405us; 2us; 32us; 3us; 31us; 6us; 29us; 7us; 30us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 0us; 16406us; 1us; 16408us; 0us; 35us; 1us; 32768us; 12us; 36us; 0us; 16407us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 3us; 4us; 8us; 9us; 10us; 11us; 12us; 14us; 15us; 17us; 19us; 23us; 26us; 27us; 29us; 30us; 31us; 34us; 38us; 39us; 44us; 45us; 46us; 47us; 51us; 56us; 57us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 70us; 72us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 2us; 1us; 2us; 5us; 0us; 2us; 1us; 3us; 2us; 2us; 0us; 1us; 4us; 2us; 1us; 1us; 1us; 1us; 0us; 1us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; 10us; 10us; 10us; 11us; 11us; 11us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 16387us; 16388us; 65535us; 16389us; 65535us; 65535us; 65535us; 65535us; 16390us; 65535us; 16392us; 16393us; 65535us; 65535us; 16394us; 65535us; 16395us; 16396us; 16398us; 65535us; 65535us; 16399us; 65535us; 16400us; 16401us; 16402us; 16403us; 16404us; 16406us; 65535us; 65535us; 16407us; |]
let _fsyacc_reductions ()  =    [| 
# 279 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : (Source.t, Source.t)Grammar.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startParseAntlr));
# 288 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TopLevelDefs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                                    _1 
                   )
# 72 "Parser.fsy"
                 : (Source.t, Source.t)Grammar.t));
# 299 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TopLevelDef)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                 _1 
                   )
# 74 "Parser.fsy"
                 : 'TopLevelDefs));
# 310 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TopLevelDefs)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'TopLevelDef)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                                      _1 @ _2 
                   )
# 75 "Parser.fsy"
                 : 'TopLevelDefs));
# 322 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Rule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                         [_1] 
                   )
# 77 "Parser.fsy"
                 : 'TopLevelDef));
# 333 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                   [] 
                   )
# 78 "Parser.fsy"
                 : 'TopLevelDef));
# 344 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Options)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'RuleBody)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                                                         { new Rule.t<Source.t, Source.t> with name = fst(_1) and args = [] and body = _4 and _public = false and metaArgs = [] } 
                   )
# 80 "Parser.fsy"
                 : 'Rule));
# 357 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                               
                   )
# 82 "Parser.fsy"
                 : 'Options));
# 367 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                                          
                   )
# 82 "Parser.fsy"
                 : 'Options));
# 378 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Alt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                     makePSeq (_1) 
                   )
# 84 "Parser.fsy"
                 : 'RuleBody));
# 389 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'RuleBody)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Alt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                                                          PAlt(_1, makePSeq (_3)) 
                   )
# 84 "Parser.fsy"
                 : 'RuleBody));
# 401 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Seq)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ActionCodeOptional)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                                   ([_1], _2) 
                   )
# 86 "Parser.fsy"
                 : 'Alt));
# 413 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Seq)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Alt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                                                            _1 :: fst(_2), None 
                   )
# 86 "Parser.fsy"
                 : 'Alt));
# 425 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                           None 
                   )
# 88 "Parser.fsy"
                 : 'ActionCodeOptional));
# 435 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                         Some(_1) 
                   )
# 89 "Parser.fsy"
                 : 'ActionCodeOptional));
# 446 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'RuleBody)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Modifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                                                            makeModifiedRule _2 _4 
                   )
# 91 "Parser.fsy"
                 : 'Seq));
# 458 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'SimpleProduction)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Modifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                       makeModifiedRule (_1) _2 
                   )
# 92 "Parser.fsy"
                 : 'Seq));
# 470 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                      "+" 
                   )
# 94 "Parser.fsy"
                 : 'Modifier));
# 480 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                  "*" 
                   )
# 95 "Parser.fsy"
                 : 'Modifier));
# 490 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                      "?" 
                   )
# 96 "Parser.fsy"
                 : 'Modifier));
# 500 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                         "!" 
                   )
# 97 "Parser.fsy"
                 : 'Modifier));
# 510 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                             "" 
                   )
# 98 "Parser.fsy"
                 : 'Modifier));
# 520 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                                    PRef(_1, None) 
                   )
# 100 "Parser.fsy"
                 : 'SimpleProduction));
# 531 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                                        
                             match ((_1), (_3)) with
                             | (("0",_), ("9", _)) -> PToken("NUMBER", (0,0))
                             | (("\\0",_), ("\\255", _)) -> PToken("CHAR", (0,0))
                             | (("a",_), ("z", _)) -> PToken("LOWER_LATIN", (0,0))
                             | (("A",_), ("Z", _)) -> PToken("UPPER_LATIN", (0,0))
                             | x -> failwith (sprintf "unsupported interval %A" x)
                             
                   )
# 101 "Parser.fsy"
                 : 'SimpleProduction));
# 550 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                     PLiteral(_1) 
                   )
# 109 "Parser.fsy"
                 : 'SimpleProduction));
# 561 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                   
                   )
# 113 "Parser.fsy"
                 : 'RulePart));
# 571 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                
                   )
# 114 "Parser.fsy"
                 : 'RulePart));
# 581 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                   
                   )
# 115 "Parser.fsy"
                 : 'RulePart));
# 591 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                      
                   )
# 116 "Parser.fsy"
                 : 'RulePart));
# 601 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                               
                   )
# 117 "Parser.fsy"
                 : 'RulePart));
# 611 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                               
                   )
# 118 "Parser.fsy"
                 : 'RulePart));
# 621 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                
                   )
# 119 "Parser.fsy"
                 : 'RulePart));
# 631 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                              
                   )
# 120 "Parser.fsy"
                 : 'RulePart));
# 641 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                 
                   )
# 121 "Parser.fsy"
                 : 'RulePart));
# 651 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                 
                   )
# 122 "Parser.fsy"
                 : 'RulePart));
# 661 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                  
                   )
# 123 "Parser.fsy"
                 : 'RulePart));
# 672 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                                     
                   )
# 124 "Parser.fsy"
                 : 'RulePart));
# 683 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                      
                   )
# 125 "Parser.fsy"
                 : 'RulePart));
# 694 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                      
                   )
# 126 "Parser.fsy"
                 : 'RulePart));
# 705 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                     
                   )
# 127 "Parser.fsy"
                 : 'RulePart));
|]
# 717 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 25;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let ParseAntlr lexer lexbuf : (Source.t, Source.t)Grammar.t =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
