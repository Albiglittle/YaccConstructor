// Signature file for parser generated by fsyacc
module AntlrToYard.Parser
open AntlrToYard.IL
open AntlrToYard.Tokens
type token = 
  | DOUBLE_DOT
  | TILDE
  | EXCLAMATION
  | QUESTION
  | SEMICOLON
  | COLON
  | PLUS
  | STAR
  | EQUAL
  | BAR
  | RPAREN
  | LPAREN
  | LITERAL of (Lexeme)
  | IDENTIFIER of (Lexeme)
  | T_OPTIONS
  | T_GRAMMAR
  | EOF
  | ACTION_CODE of (Lexeme)
  | ACTION_NAME of (Lexeme)
  | SCOPE_NAME of (Lexeme)
  | SINGLELINE_COMMENT of (Lexeme)
  | MULTILINE_COMMENT of (Lexeme)
type tokenId = 
    | TOKEN_DOUBLE_DOT
    | TOKEN_TILDE
    | TOKEN_EXCLAMATION
    | TOKEN_QUESTION
    | TOKEN_SEMICOLON
    | TOKEN_COLON
    | TOKEN_PLUS
    | TOKEN_STAR
    | TOKEN_EQUAL
    | TOKEN_BAR
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_LITERAL
    | TOKEN_IDENTIFIER
    | TOKEN_T_OPTIONS
    | TOKEN_T_GRAMMAR
    | TOKEN_EOF
    | TOKEN_ACTION_CODE
    | TOKEN_ACTION_NAME
    | TOKEN_SCOPE_NAME
    | TOKEN_SINGLELINE_COMMENT
    | TOKEN_MULTILINE_COMMENT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startParseAntlr
    | NONTERM_ParseAntlr
    | NONTERM_Rules
    | NONTERM_Rule
    | NONTERM_Options
    | NONTERM_RuleBody
    | NONTERM_RulePart
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val ParseAntlr : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (Prog) 
