%{
(* Run with fsyacc.exe --module AntlrToYard.Parser --open AntlrToYard.IL --open AntlrToYard.Tokens Parser.fsy *)


(*
Expr: ID { Val($1) }
     | INT {  Int($1)  }
     | FLOAT {  Float($1)  }
     | DECR LPAREN Expr RPAREN {  Decr($3)  }


 Stmt: ID ASSIGN Expr { Assign($1,$3) }
     | WHILE Expr DO Stmt { While($2,$4) }
     | BEGIN StmtList END { Seq(List.rev($2)) }
     | IF Expr THEN Stmt { IfThen($2,$4) }
     | IF Expr THEN Stmt ELSE Stmt { IfThenElse($2,$4,$6) }
     | PRINT Expr { Print($2) }


 StmtList: Stmt { [$1] }
        | StmtList SEMI Stmt { $3 :: $1  }

*)

%}

%token <Lexeme> MULTILINE_COMMENT
%token <Lexeme> SINGLELINE_COMMENT
%token <Lexeme> SCOPE_NAME
%token <Lexeme> ACTION_NAME
%token <Lexeme> ACTION_CODE
%token EOF
%token T_GRAMMAR
%token T_OPTIONS
%token <Lexeme> IDENTIFIER
%token <Lexeme> LITERAL
%token LPAREN 
%token RPAREN
%token BAR
%token EQUAL
%token STAR
%token PLUS
%token COLON
%token SEMICOLON
%token QUESTION
%token EXCLAMATION
%token TILDE
%token DOUBLE_DOT

%start ParseAntlr
%type <Prog> ParseAntlr


%%

//file: GrammarDeclaration Options GlobalScope Header Members Rules { Prog() }

ParseAntlr: Rules EOF { {yo = "sdfdsf"} }

Rules: Rule {}
    | Rules Rule {}
    
Rule: IDENTIFIER Options COLON RuleBody SEMICOLON {}

Options: {} | T_OPTIONS ACTION_CODE {}

RuleBody: RulePart {} | RuleBody RulePart {}

RulePart: 
  DOUBLE_DOT {}
  | TILDE {}
  | QUESTION {}
  | EXCLAMATION {}
  | PLUS {}
  | STAR {}
  | EQUAL {}
  | BAR {}
  | RPAREN {}
  | LPAREN {}
  | LITERAL {}
  | IDENTIFIER {}
  | ACTION_CODE {}
  | ACTION_NAME {}
  | SCOPE_NAME {}