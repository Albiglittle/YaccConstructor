{
(* Run with fslex.exe --unicode Lexer.fsl *)

module Yard.Frontends.AntlrFrontend.Lexer

open Yard.Frontends.AntlrFrontend.Parser // using tokens type 
open Microsoft.FSharp.Text.Lexing

let comment_depth = ref 0
let source = ref ""
let lexeme_start = ref 0

let make_lexeme (n1, n2) = source.Value.Substring(n1, n2-n1), (n1, n2)

// checks if the given identifier is keyword
let identifier lexeme = 
  match fst(lexeme) with
  | "grammar" -> T_GRAMMAR
  | "options" -> T_OPTIONS
  | s when System.Char.IsUpper s.[0]-> TERMINAL(lexeme)
  | s when System.Char.IsLower s.[0]-> IDENTIFIER(lexeme)
}

let eol = "\r\n" | '\n'
let lowerchar = ['a'-'z']
let upperchar = ['A'-'Z']
let identchar =  ['A'-'Z' 'a'-'z' '_' '-' '\192'-'\214' '\216'-'\246' '\248'-'\255' '0'-'9']

rule main = parse
  | "{" { lexeme_start := lexbuf.EndPos.AbsoluteOffset; comment_depth := 1; action_code lexbuf }
  | '@' identchar* { SCOPE_NAME(make_lexeme(lexbuf.StartPos.AbsoluteOffset+1, lexbuf.EndPos.AbsoluteOffset)) }
  | "::" identchar* { ACTION_NAME(make_lexeme(lexbuf.StartPos.AbsoluteOffset+2, lexbuf.EndPos.AbsoluteOffset)) }
  | "/*" { lexeme_start := lexbuf.EndPos.AbsoluteOffset; comment_depth := 1; multiline_comment lexbuf }
  | "//" { lexeme_start := lexbuf.EndPos.AbsoluteOffset; singleline_comment lexbuf }
  | '\'' { lexeme_start := lexbuf.EndPos.AbsoluteOffset; literal lexbuf }
  | '"' { lexeme_start := lexbuf.EndPos.AbsoluteOffset; literal2 lexbuf }
  | identchar* { identifier(make_lexeme(lexbuf.StartPos.AbsoluteOffset, lexbuf.EndPos.AbsoluteOffset)) }
  | '(' { LPAREN }
  | ')' { RPAREN }
  | '|' { BAR }
  | '=' { EQUAL }
  | '*' { STAR }
  | '+' { PLUS }
  | ':' { COLON }
  | ';' { SEMICOLON }
  | '?' { QUESTION }
  | '!' { EXCLAMATION }
  | '~' { TILDE }
  | ".." { DOUBLE_DOT }
  | eof { EOF }
  | _ { main lexbuf }
and multiline_comment = parse
  | "/*" 
    { incr comment_depth; multiline_comment lexbuf }
  | "*/"
    { decr comment_depth;
      if !comment_depth = 0 then main lexbuf else multiline_comment lexbuf }
  | eof { EOF }
  | _ { multiline_comment lexbuf }
and singleline_comment = parse
  | eol { main lexbuf }
  | _ { singleline_comment lexbuf }
  | eof { EOF }
and action_code = parse
  // TODO: breaks if brace is commented in code - we don't know target language comment syntax
  | "{" 
    { incr comment_depth; action_code lexbuf }
  | "}"
    { decr comment_depth;
      if !comment_depth = 0 then ACTION_CODE(make_lexeme(!lexeme_start, lexbuf.StartPos.AbsoluteOffset)) else action_code lexbuf }
  | '\'' { literal lexbuf; action_code lexbuf }
  | '"' { literal2 lexbuf; action_code lexbuf }
  | eof { EOF }
  | _ { action_code lexbuf }
and literal = parse
  | '\'' { LITERAL(make_lexeme(!lexeme_start, lexbuf.StartPos.AbsoluteOffset)) }
  | "\\\\" | "\\'" | _ { literal lexbuf }
and literal2 = parse
  | '"' { LITERAL(make_lexeme(!lexeme_start, lexbuf.StartPos.AbsoluteOffset)) }
  | "\\\\" | "\\\"" | _ { literal2 lexbuf }
