//this file was generated by GNESCC
//source grammar:left_implicit.yrd
//date:20.12.2011 17:44:14

module GNESCC.Actions_left_implicit

open Yard.Generators.GNESCCGenerator

let getUnmatched x expectedType =
    "Unexpected type of node\nType " + x.ToString() + " is not expected in this position\n" + expectedType + " was expected." |> failwith
let s0 expr = 
    let inner  = 
        match expr with
        | REAlt(Some(x), None) -> 
            let yardLAltAction expr = 
                match expr with
                | RESeq [gnescc_x0; gnescc_x1; gnescc_x2] -> 
                    let (gnescc_x0) =
                        let yardElemAction expr = 
                            match expr with
                            | REOpt(opt) -> 
                                let yardOptAction expr = 
                                    match expr with
                                    | RELeaf b -> (b :?> _ ) 
                                    | x -> getUnmatched x "RELeaf"

                                if opt.IsSome then Some (yardOptAction opt.Value) else None 
                            | x -> getUnmatched x "REOpt"

                        yardElemAction(gnescc_x0)
                    let (gnescc_x1) =
                        let yardElemAction expr = 
                            match expr with
                            | RELeaf s -> (s :?> _ ) 
                            | x -> getUnmatched x "RELeaf"

                        yardElemAction(gnescc_x1)
                    let (gnescc_x2) =
                        let yardElemAction expr = 
                            match expr with
                            | RELeaf tA -> tA :?> 'a
                            | x -> getUnmatched x "RELeaf"

                        yardElemAction(gnescc_x2)
                    (gnescc_x0,gnescc_x1,gnescc_x2 )
                | x -> getUnmatched x "RESeq"

            yardLAltAction x 
        | REAlt(None, Some(x)) -> 
            let yardRAltAction expr = 
                match expr with
                | RESeq [gnescc_x0] -> 
                    let (gnescc_x0) =
                        let yardElemAction expr = 
                            match expr with
                            | RELeaf tA -> tA :?> 'a
                            | x -> getUnmatched x "RELeaf"

                        yardElemAction(gnescc_x0)
                    (gnescc_x0 )
                | x -> getUnmatched x "RESeq"

            yardRAltAction x 
        | x -> getUnmatched x "REAlt"
    box (inner)
let b1 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tC -> tC :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            (gnescc_x0 )
        | x -> getUnmatched x "RESeq"
    box (inner)

let ruleToAction = dict [|(2,b1); (1,s0)|]

