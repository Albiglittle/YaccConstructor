//this file was generated by YARD Recursive-Ascent 
//source grammar:..\..\..\..\Tests\test002.yrd
//date:19/08/2010 09:46:49
#light "off"

module Actions
open Yard.Core
open Yard.Generators.RecursiveAscent.REAST




let s1_action  arg0 = 
 (fun arg0 ->  match arg0 with 
    | RESeq(lst) -> 
        match lst with 
        | x0::tl -> let (res) = 
(fun x -> 
    match x with 
    | RELeaf(_val) -> _val :?> _)x0
 in 
res) arg0


let expr2_action  arg0 = 
 (fun arg0 ->  match arg0 with 
    | RESeq(lst) -> 
        match lst with 
        | x0::x1::x2::tl -> let (n1:string) = 
(fun x -> 
    match x with 
    | RELeaf(_val) -> _val :?> _)x0
 in 
let (_) = 
(fun x -> 
    match x with 
    | RELeaf(_val) -> _val :?> _)x1
 in 
let (n2:string) = 
(fun x -> 
    match x with 
    | RELeaf(_val) -> _val :?> _)x2
 in 
float n1 + float n2) arg0
