 {
module Calc.Lexer
open GLL.Calc2
open Microsoft.FSharp.Text.Lexing

let lexnum = ref -1
let lexeme lexbuf =  lexnum := !lexnum + 1; !lexnum
}



let digit = ['0'-'9']
let whitespace = [' ' '\t' '\r' '\n']

rule token = parse
| whitespace { token lexbuf }
| ['-']? digit+ ('.'digit+)? (['e' 'E'] digit+)? { NUMBER <| lexeme lexbuf }
| '-' { MINUS <| lexeme lexbuf }
| '(' { LBRACE <| lexeme lexbuf }
| ')' { RBRACE <| lexeme lexbuf }
| '/' { DIV <| lexeme lexbuf }
| '+' { PLUS <| lexeme lexbuf }
| "**" { POW <| lexeme lexbuf }
| '*' { MULT <| lexeme lexbuf }
| eof { RNGLR_EOF <| lexeme lexbuf }
| _ { failwithf "unexpected input: %d" <| lexeme lexbuf }
