//this file was generated by GNESCC
//source grammar:../../../Tests/GNESCC/customers/rl/RL.yrd
//date:10/24/2011 11:49:20

module GNESCC.Actions_RL

open Yard.Generators.GNESCCGenerator

let getUnmatched x expectedType =
    "Unexpected type of node\nType " + x.ToString() + " is not expected in this position\n" + expectedType + " was expected." |> failwith
let file0 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | REClosure(lst) -> 
                        let yardClsAction expr = 
                            match expr with
                            | RESeq [gnescc_x0; gnescc_x1] -> 
                                let (gnescc_x0) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf statement -> (statement :?> _ ) 
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x0)
                                let (gnescc_x1) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf tDELIMITER -> tDELIMITER :?> 'a
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x1)
                                (gnescc_x0,gnescc_x1 )
                            | x -> getUnmatched x "RESeq"

                        List.map yardClsAction lst 
                    | x -> getUnmatched x "REClosure"

                yardElemAction(gnescc_x0)
            (gnescc_x0 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let name1 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tSTRING_LITERAL -> tSTRING_LITERAL :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            (gnescc_x0 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let module2 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0; gnescc_x1; gnescc_x2] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf moduleHeader -> (moduleHeader :?> _ ) 
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            let (gnescc_x1) =
                let yardElemAction expr = 
                    match expr with
                    | REClosure(lst) -> 
                        let yardClsAction expr = 
                            match expr with
                            | RELeaf attribute -> (attribute :?> _ ) 
                            | x -> getUnmatched x "RELeaf"

                        List.map yardClsAction lst 
                    | x -> getUnmatched x "REClosure"

                yardElemAction(gnescc_x1)
            let (gnescc_x2) =
                let yardElemAction expr = 
                    match expr with
                    | REOpt(opt) -> 
                        let yardOptAction expr = 
                            match expr with
                            | RELeaf moduleBody -> (moduleBody :?> _ ) 
                            | x -> getUnmatched x "RELeaf"

                        if opt.IsSome then Some (yardOptAction opt.Value) else None 
                    | x -> getUnmatched x "REOpt"

                yardElemAction(gnescc_x2)
            (gnescc_x0,gnescc_x1,gnescc_x2 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let moduleHeader3 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0; gnescc_x1; gnescc_x2; gnescc_x3] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tKEYWORD_MODULE -> tKEYWORD_MODULE :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            let (gnescc_x1) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tBRACKET_ROUND_OPEN -> tBRACKET_ROUND_OPEN :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x1)
            let (gnescc_x2) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf fields -> (fields :?> _ ) 
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x2)
            let (gnescc_x3) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tBRACKET_ROUND_CLOSE -> tBRACKET_ROUND_CLOSE :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x3)
            (gnescc_x0,gnescc_x1,gnescc_x2,gnescc_x3 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let fields4 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | REOpt(opt) -> 
                        let yardOptAction expr = 
                            match expr with
                            | RESeq [gnescc_x0; gnescc_x1] -> 
                                let (gnescc_x0) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf name -> (name :?> _ ) 
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x0)
                                let (gnescc_x1) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | REClosure(lst) -> 
                                            let yardClsAction expr = 
                                                match expr with
                                                | RESeq [gnescc_x0; gnescc_x1] -> 
                                                    let (gnescc_x0) =
                                                        let yardElemAction expr = 
                                                            match expr with
                                                            | RELeaf tCOMMA -> tCOMMA :?> 'a
                                                            | x -> getUnmatched x "RELeaf"

                                                        yardElemAction(gnescc_x0)
                                                    let (gnescc_x1) =
                                                        let yardElemAction expr = 
                                                            match expr with
                                                            | RELeaf name -> (name :?> _ ) 
                                                            | x -> getUnmatched x "RELeaf"

                                                        yardElemAction(gnescc_x1)
                                                    (gnescc_x0,gnescc_x1 )
                                                | x -> getUnmatched x "RESeq"

                                            List.map yardClsAction lst 
                                        | x -> getUnmatched x "REClosure"

                                    yardElemAction(gnescc_x1)
                                (gnescc_x0,gnescc_x1 )
                            | x -> getUnmatched x "RESeq"

                        if opt.IsSome then Some (yardOptAction opt.Value) else None 
                    | x -> getUnmatched x "REOpt"

                yardElemAction(gnescc_x0)
            (gnescc_x0 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let attribute5 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0; gnescc_x1; gnescc_x2; gnescc_x3] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tBRACKET_SQUARE_OPEN -> tBRACKET_SQUARE_OPEN :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            let (gnescc_x1) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf name -> (name :?> _ ) 
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x1)
            let (gnescc_x2) =
                let yardElemAction expr = 
                    match expr with
                    | REClosure(lst) -> 
                        let yardClsAction expr = 
                            match expr with
                            | RESeq [gnescc_x0; gnescc_x1] -> 
                                let (gnescc_x0) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf attributeEntry -> (attributeEntry :?> _ ) 
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x0)
                                let (gnescc_x1) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf tDELIMITER -> tDELIMITER :?> 'a
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x1)
                                (gnescc_x0,gnescc_x1 )
                            | x -> getUnmatched x "RESeq"

                        List.map yardClsAction lst 
                    | x -> getUnmatched x "REClosure"

                yardElemAction(gnescc_x2)
            let (gnescc_x3) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tBRACKET_SQUARE_CLOSE -> tBRACKET_SQUARE_CLOSE :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x3)
            (gnescc_x0,gnescc_x1,gnescc_x2,gnescc_x3 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let attributeEntry6 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0; gnescc_x1; gnescc_x2] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf name -> (name :?> _ ) 
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            let (gnescc_x1) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tSPEC -> tSPEC :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x1)
            let (gnescc_x2) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf expression -> (expression :?> _ ) 
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x2)
            (gnescc_x0,gnescc_x1,gnescc_x2 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let moduleBody7 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0; gnescc_x1; gnescc_x2] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tBRACKET_CURLY_OPEN -> tBRACKET_CURLY_OPEN :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            let (gnescc_x1) =
                let yardElemAction expr = 
                    match expr with
                    | REClosure(lst) -> 
                        let yardClsAction expr = 
                            match expr with
                            | RESeq [gnescc_x0; gnescc_x1] -> 
                                let (gnescc_x0) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf statement -> (statement :?> _ ) 
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x0)
                                let (gnescc_x1) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf tDELIMITER -> tDELIMITER :?> 'a
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x1)
                                (gnescc_x0,gnescc_x1 )
                            | x -> getUnmatched x "RESeq"

                        List.map yardClsAction lst 
                    | x -> getUnmatched x "REClosure"

                yardElemAction(gnescc_x1)
            let (gnescc_x2) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tBRACKET_CURLY_CLOSE -> tBRACKET_CURLY_CLOSE :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x2)
            (gnescc_x0,gnescc_x1,gnescc_x2 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let statement8 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0; gnescc_x1; gnescc_x2] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf expression -> (expression :?> _ ) 
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            let (gnescc_x1) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf operation -> (operation :?> _ ) 
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x1)
            let (gnescc_x2) =
                let yardElemAction expr = 
                    match expr with
                    | REClosure(lst) -> 
                        let yardClsAction expr = 
                            match expr with
                            | RESeq [gnescc_x0; gnescc_x1] -> 
                                let (gnescc_x0) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf tCOMMA -> tCOMMA :?> 'a
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x0)
                                let (gnescc_x1) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf operation -> (operation :?> _ ) 
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x1)
                                (gnescc_x0,gnescc_x1 )
                            | x -> getUnmatched x "RESeq"

                        List.map yardClsAction lst 
                    | x -> getUnmatched x "REClosure"

                yardElemAction(gnescc_x2)
            (gnescc_x0,gnescc_x1,gnescc_x2 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let operation9 expr = 
    let inner  = 
        match expr with
        | REAlt(Some(x), None) -> 
            let yardLAltAction expr = 
                match expr with
                | RESeq [gnescc_x0] -> 
                    let (gnescc_x0) =
                        let yardElemAction expr = 
                            match expr with
                            | RELeaf assign -> (assign :?> _ ) 
                            | x -> getUnmatched x "RELeaf"

                        yardElemAction(gnescc_x0)
                    (gnescc_x0 )
                | x -> getUnmatched x "RESeq"

            yardLAltAction x 
        | REAlt(None, Some(x)) -> 
            let yardRAltAction expr = 
                match expr with
                | REAlt(Some(x), None) -> 
                    let yardLAltAction expr = 
                        match expr with
                        | RESeq [gnescc_x0] -> 
                            let (gnescc_x0) =
                                let yardElemAction expr = 
                                    match expr with
                                    | RELeaf bind -> (bind :?> _ ) 
                                    | x -> getUnmatched x "RELeaf"

                                yardElemAction(gnescc_x0)
                            (gnescc_x0 )
                        | x -> getUnmatched x "RESeq"

                    yardLAltAction x 
                | REAlt(None, Some(x)) -> 
                    let yardRAltAction expr = 
                        match expr with
                        | RESeq [gnescc_x0] -> 
                            let (gnescc_x0) =
                                let yardElemAction expr = 
                                    match expr with
                                    | RELeaf bindHandler -> (bindHandler :?> _ ) 
                                    | x -> getUnmatched x "RELeaf"

                                yardElemAction(gnescc_x0)
                            (gnescc_x0 )
                        | x -> getUnmatched x "RESeq"

                    yardRAltAction x 
                | x -> getUnmatched x "REAlt"

            yardRAltAction x 
        | x -> getUnmatched x "REAlt"
    box (inner)
let assign10 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0; gnescc_x1] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tASSIGN -> tASSIGN :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            let (gnescc_x1) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf expression -> (expression :?> _ ) 
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x1)
            (gnescc_x0,gnescc_x1 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let bind11 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0; gnescc_x1] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tBIND -> tBIND :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            let (gnescc_x1) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf expression -> (expression :?> _ ) 
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x1)
            (gnescc_x0,gnescc_x1 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let bindHandler12 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0; gnescc_x1] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tBIND_HANDLER -> tBIND_HANDLER :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            let (gnescc_x1) =
                let yardElemAction expr = 
                    match expr with
                    | REAlt(Some(x), None) -> 
                        let yardLAltAction expr = 
                            match expr with
                            | RESeq [gnescc_x0] -> 
                                let (gnescc_x0) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf name -> (name :?> _ ) 
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x0)
                                (gnescc_x0 )
                            | x -> getUnmatched x "RESeq"

                        yardLAltAction x 
                    | REAlt(None, Some(x)) -> 
                        let yardRAltAction expr = 
                            match expr with
                            | RESeq [gnescc_x0] -> 
                                let (gnescc_x0) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf handler -> (handler :?> _ ) 
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x0)
                                (gnescc_x0 )
                            | x -> getUnmatched x "RESeq"

                        yardRAltAction x 
                    | x -> getUnmatched x "REAlt"

                yardElemAction(gnescc_x1)
            (gnescc_x0,gnescc_x1 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let expression13 expr = 
    let inner  = 
        match expr with
        | REAlt(Some(x), None) -> 
            let yardLAltAction expr = 
                match expr with
                | RESeq [gnescc_x0] -> 
                    let (gnescc_x0) =
                        let yardElemAction expr = 
                            match expr with
                            | RELeaf expression_b -> (expression_b :?> _ ) 
                            | x -> getUnmatched x "RELeaf"

                        yardElemAction(gnescc_x0)
                    (gnescc_x0 )
                | x -> getUnmatched x "RESeq"

            yardLAltAction x 
        | REAlt(None, Some(x)) -> 
            let yardRAltAction expr = 
                match expr with
                | REAlt(Some(x), None) -> 
                    let yardLAltAction expr = 
                        match expr with
                        | RESeq [gnescc_x0] -> 
                            let (gnescc_x0) =
                                let yardElemAction expr = 
                                    match expr with
                                    | RELeaf expression_i -> (expression_i :?> _ ) 
                                    | x -> getUnmatched x "RELeaf"

                                yardElemAction(gnescc_x0)
                            (gnescc_x0 )
                        | x -> getUnmatched x "RESeq"

                    yardLAltAction x 
                | REAlt(None, Some(x)) -> 
                    let yardRAltAction expr = 
                        match expr with
                        | REAlt(Some(x), None) -> 
                            let yardLAltAction expr = 
                                match expr with
                                | RESeq [gnescc_x0] -> 
                                    let (gnescc_x0) =
                                        let yardElemAction expr = 
                                            match expr with
                                            | RELeaf expression_v -> (expression_v :?> _ ) 
                                            | x -> getUnmatched x "RELeaf"

                                        yardElemAction(gnescc_x0)
                                    (gnescc_x0 )
                                | x -> getUnmatched x "RESeq"

                            yardLAltAction x 
                        | REAlt(None, Some(x)) -> 
                            let yardRAltAction expr = 
                                match expr with
                                | RESeq [gnescc_x0] -> 
                                    let (gnescc_x0) =
                                        let yardElemAction expr = 
                                            match expr with
                                            | RELeaf expressionList -> (expressionList :?> _ ) 
                                            | x -> getUnmatched x "RELeaf"

                                        yardElemAction(gnescc_x0)
                                    (gnescc_x0 )
                                | x -> getUnmatched x "RESeq"

                            yardRAltAction x 
                        | x -> getUnmatched x "REAlt"

                    yardRAltAction x 
                | x -> getUnmatched x "REAlt"

            yardRAltAction x 
        | x -> getUnmatched x "REAlt"
    box (inner)
let expressionList14 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0; gnescc_x1; gnescc_x2] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tBRACKET_SQUARE_OPEN -> tBRACKET_SQUARE_OPEN :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            let (gnescc_x1) =
                let yardElemAction expr = 
                    match expr with
                    | REOpt(opt) -> 
                        let yardOptAction expr = 
                            match expr with
                            | RESeq [gnescc_x0; gnescc_x1] -> 
                                let (gnescc_x0) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf expression -> (expression :?> _ ) 
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x0)
                                let (gnescc_x1) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | REClosure(lst) -> 
                                            let yardClsAction expr = 
                                                match expr with
                                                | RESeq [gnescc_x0; gnescc_x1] -> 
                                                    let (gnescc_x0) =
                                                        let yardElemAction expr = 
                                                            match expr with
                                                            | RELeaf tCOMMA -> tCOMMA :?> 'a
                                                            | x -> getUnmatched x "RELeaf"

                                                        yardElemAction(gnescc_x0)
                                                    let (gnescc_x1) =
                                                        let yardElemAction expr = 
                                                            match expr with
                                                            | RELeaf expression -> (expression :?> _ ) 
                                                            | x -> getUnmatched x "RELeaf"

                                                        yardElemAction(gnescc_x1)
                                                    (gnescc_x0,gnescc_x1 )
                                                | x -> getUnmatched x "RESeq"

                                            List.map yardClsAction lst 
                                        | x -> getUnmatched x "REClosure"

                                    yardElemAction(gnescc_x1)
                                (gnescc_x0,gnescc_x1 )
                            | x -> getUnmatched x "RESeq"

                        if opt.IsSome then Some (yardOptAction opt.Value) else None 
                    | x -> getUnmatched x "REOpt"

                yardElemAction(gnescc_x1)
            let (gnescc_x2) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tBRACKET_SQUARE_CLOSE -> tBRACKET_SQUARE_CLOSE :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x2)
            (gnescc_x0,gnescc_x1,gnescc_x2 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let expression_b15 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0; gnescc_x1] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf expression_b1 -> (expression_b1 :?> _ ) 
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            let (gnescc_x1) =
                let yardElemAction expr = 
                    match expr with
                    | REOpt(opt) -> 
                        let yardOptAction expr = 
                            match expr with
                            | RESeq [gnescc_x0; gnescc_x1] -> 
                                let (gnescc_x0) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | REAlt(Some(x), None) -> 
                                            let yardLAltAction expr = 
                                                match expr with
                                                | RESeq [gnescc_x0] -> 
                                                    let (gnescc_x0) =
                                                        let yardElemAction expr = 
                                                            match expr with
                                                            | RELeaf tEQ -> tEQ :?> 'a
                                                            | x -> getUnmatched x "RELeaf"

                                                        yardElemAction(gnescc_x0)
                                                    (gnescc_x0 )
                                                | x -> getUnmatched x "RESeq"

                                            yardLAltAction x 
                                        | REAlt(None, Some(x)) -> 
                                            let yardRAltAction expr = 
                                                match expr with
                                                | REAlt(Some(x), None) -> 
                                                    let yardLAltAction expr = 
                                                        match expr with
                                                        | RESeq [gnescc_x0] -> 
                                                            let (gnescc_x0) =
                                                                let yardElemAction expr = 
                                                                    match expr with
                                                                    | RELeaf tGREATEREQ -> tGREATEREQ :?> 'a
                                                                    | x -> getUnmatched x "RELeaf"

                                                                yardElemAction(gnescc_x0)
                                                            (gnescc_x0 )
                                                        | x -> getUnmatched x "RESeq"

                                                    yardLAltAction x 
                                                | REAlt(None, Some(x)) -> 
                                                    let yardRAltAction expr = 
                                                        match expr with
                                                        | REAlt(Some(x), None) -> 
                                                            let yardLAltAction expr = 
                                                                match expr with
                                                                | RESeq [gnescc_x0] -> 
                                                                    let (gnescc_x0) =
                                                                        let yardElemAction expr = 
                                                                            match expr with
                                                                            | RELeaf tLESSEREQ -> tLESSEREQ :?> 'a
                                                                            | x -> getUnmatched x "RELeaf"

                                                                        yardElemAction(gnescc_x0)
                                                                    (gnescc_x0 )
                                                                | x -> getUnmatched x "RESeq"

                                                            yardLAltAction x 
                                                        | REAlt(None, Some(x)) -> 
                                                            let yardRAltAction expr = 
                                                                match expr with
                                                                | REAlt(Some(x), None) -> 
                                                                    let yardLAltAction expr = 
                                                                        match expr with
                                                                        | RESeq [gnescc_x0] -> 
                                                                            let (gnescc_x0) =
                                                                                let yardElemAction expr = 
                                                                                    match expr with
                                                                                    | RELeaf tGREATER -> tGREATER :?> 'a
                                                                                    | x -> getUnmatched x "RELeaf"

                                                                                yardElemAction(gnescc_x0)
                                                                            (gnescc_x0 )
                                                                        | x -> getUnmatched x "RESeq"

                                                                    yardLAltAction x 
                                                                | REAlt(None, Some(x)) -> 
                                                                    let yardRAltAction expr = 
                                                                        match expr with
                                                                        | RESeq [gnescc_x0] -> 
                                                                            let (gnescc_x0) =
                                                                                let yardElemAction expr = 
                                                                                    match expr with
                                                                                    | RELeaf tLESSER -> tLESSER :?> 'a
                                                                                    | x -> getUnmatched x "RELeaf"

                                                                                yardElemAction(gnescc_x0)
                                                                            (gnescc_x0 )
                                                                        | x -> getUnmatched x "RESeq"

                                                                    yardRAltAction x 
                                                                | x -> getUnmatched x "REAlt"

                                                            yardRAltAction x 
                                                        | x -> getUnmatched x "REAlt"

                                                    yardRAltAction x 
                                                | x -> getUnmatched x "REAlt"

                                            yardRAltAction x 
                                        | x -> getUnmatched x "REAlt"

                                    yardElemAction(gnescc_x0)
                                let (gnescc_x1) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf expression_b1 -> (expression_b1 :?> _ ) 
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x1)
                                (gnescc_x0,gnescc_x1 )
                            | x -> getUnmatched x "RESeq"

                        if opt.IsSome then Some (yardOptAction opt.Value) else None 
                    | x -> getUnmatched x "REOpt"

                yardElemAction(gnescc_x1)
            (gnescc_x0,gnescc_x1 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let expression_b116 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0; gnescc_x1] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf expression_b2 -> (expression_b2 :?> _ ) 
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            let (gnescc_x1) =
                let yardElemAction expr = 
                    match expr with
                    | REClosure(lst) -> 
                        let yardClsAction expr = 
                            match expr with
                            | RESeq [gnescc_x0; gnescc_x1] -> 
                                let (gnescc_x0) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf tOR -> tOR :?> 'a
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x0)
                                let (gnescc_x1) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf expression_b2 -> (expression_b2 :?> _ ) 
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x1)
                                (gnescc_x0,gnescc_x1 )
                            | x -> getUnmatched x "RESeq"

                        List.map yardClsAction lst 
                    | x -> getUnmatched x "REClosure"

                yardElemAction(gnescc_x1)
            (gnescc_x0,gnescc_x1 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let expression_b217 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0; gnescc_x1] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf expression_b3 -> (expression_b3 :?> _ ) 
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            let (gnescc_x1) =
                let yardElemAction expr = 
                    match expr with
                    | REClosure(lst) -> 
                        let yardClsAction expr = 
                            match expr with
                            | RESeq [gnescc_x0; gnescc_x1] -> 
                                let (gnescc_x0) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf tAND -> tAND :?> 'a
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x0)
                                let (gnescc_x1) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf expression_b3 -> (expression_b3 :?> _ ) 
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x1)
                                (gnescc_x0,gnescc_x1 )
                            | x -> getUnmatched x "RESeq"

                        List.map yardClsAction lst 
                    | x -> getUnmatched x "REClosure"

                yardElemAction(gnescc_x1)
            (gnescc_x0,gnescc_x1 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let expression_b318 expr = 
    let inner  = 
        match expr with
        | REAlt(Some(x), None) -> 
            let yardLAltAction expr = 
                match expr with
                | RESeq [gnescc_x0] -> 
                    let (gnescc_x0) =
                        let yardElemAction expr = 
                            match expr with
                            | RELeaf tKEYWORD_TRUE -> tKEYWORD_TRUE :?> 'a
                            | x -> getUnmatched x "RELeaf"

                        yardElemAction(gnescc_x0)
                    (gnescc_x0 )
                | x -> getUnmatched x "RESeq"

            yardLAltAction x 
        | REAlt(None, Some(x)) -> 
            let yardRAltAction expr = 
                match expr with
                | REAlt(Some(x), None) -> 
                    let yardLAltAction expr = 
                        match expr with
                        | RESeq [gnescc_x0] -> 
                            let (gnescc_x0) =
                                let yardElemAction expr = 
                                    match expr with
                                    | RELeaf tKEYWORD_FALSE -> tKEYWORD_FALSE :?> 'a
                                    | x -> getUnmatched x "RELeaf"

                                yardElemAction(gnescc_x0)
                            (gnescc_x0 )
                        | x -> getUnmatched x "RESeq"

                    yardLAltAction x 
                | REAlt(None, Some(x)) -> 
                    let yardRAltAction expr = 
                        match expr with
                        | REAlt(Some(x), None) -> 
                            let yardLAltAction expr = 
                                match expr with
                                | RESeq [gnescc_x0] -> 
                                    let (gnescc_x0) =
                                        let yardElemAction expr = 
                                            match expr with
                                            | RELeaf name -> (name :?> _ ) 
                                            | x -> getUnmatched x "RELeaf"

                                        yardElemAction(gnescc_x0)
                                    (gnescc_x0 )
                                | x -> getUnmatched x "RESeq"

                            yardLAltAction x 
                        | REAlt(None, Some(x)) -> 
                            let yardRAltAction expr = 
                                match expr with
                                | REAlt(Some(x), None) -> 
                                    let yardLAltAction expr = 
                                        match expr with
                                        | RESeq [gnescc_x0] -> 
                                            let (gnescc_x0) =
                                                let yardElemAction expr = 
                                                    match expr with
                                                    | RELeaf apply -> (apply :?> _ ) 
                                                    | x -> getUnmatched x "RELeaf"

                                                yardElemAction(gnescc_x0)
                                            (gnescc_x0 )
                                        | x -> getUnmatched x "RESeq"

                                    yardLAltAction x 
                                | REAlt(None, Some(x)) -> 
                                    let yardRAltAction expr = 
                                        match expr with
                                        | RESeq [gnescc_x0] -> 
                                            let (gnescc_x0) =
                                                let yardElemAction expr = 
                                                    match expr with
                                                    | RESeq [gnescc_x0; gnescc_x1; gnescc_x2] -> 
                                                        let (gnescc_x0) =
                                                            let yardElemAction expr = 
                                                                match expr with
                                                                | RELeaf tBRACKET_ROUND_OPEN -> tBRACKET_ROUND_OPEN :?> 'a
                                                                | x -> getUnmatched x "RELeaf"

                                                            yardElemAction(gnescc_x0)
                                                        let (gnescc_x1) =
                                                            let yardElemAction expr = 
                                                                match expr with
                                                                | RELeaf expression_b -> (expression_b :?> _ ) 
                                                                | x -> getUnmatched x "RELeaf"

                                                            yardElemAction(gnescc_x1)
                                                        let (gnescc_x2) =
                                                            let yardElemAction expr = 
                                                                match expr with
                                                                | RELeaf tBRACKET_ROUND_CLOSE -> tBRACKET_ROUND_CLOSE :?> 'a
                                                                | x -> getUnmatched x "RELeaf"

                                                            yardElemAction(gnescc_x2)
                                                        (gnescc_x0,gnescc_x1,gnescc_x2 )
                                                    | x -> getUnmatched x "RESeq"

                                                yardElemAction(gnescc_x0)
                                            (gnescc_x0 )
                                        | x -> getUnmatched x "RESeq"

                                    yardRAltAction x 
                                | x -> getUnmatched x "REAlt"

                            yardRAltAction x 
                        | x -> getUnmatched x "REAlt"

                    yardRAltAction x 
                | x -> getUnmatched x "REAlt"

            yardRAltAction x 
        | x -> getUnmatched x "REAlt"
    box (inner)
let expression_v19 expr = 
    let inner  = 
        match expr with
        | REAlt(Some(x), None) -> 
            let yardLAltAction expr = 
                match expr with
                | RESeq [gnescc_x0] -> 
                    let (gnescc_x0) =
                        let yardElemAction expr = 
                            match expr with
                            | RELeaf module -> (module :?> _ ) 
                            | x -> getUnmatched x "RELeaf"

                        yardElemAction(gnescc_x0)
                    (gnescc_x0 )
                | x -> getUnmatched x "RESeq"

            yardLAltAction x 
        | REAlt(None, Some(x)) -> 
            let yardRAltAction expr = 
                match expr with
                | REAlt(Some(x), None) -> 
                    let yardLAltAction expr = 
                        match expr with
                        | RESeq [gnescc_x0] -> 
                            let (gnescc_x0) =
                                let yardElemAction expr = 
                                    match expr with
                                    | RELeaf function -> (function :?> _ ) 
                                    | x -> getUnmatched x "RELeaf"

                                yardElemAction(gnescc_x0)
                            (gnescc_x0 )
                        | x -> getUnmatched x "RESeq"

                    yardLAltAction x 
                | REAlt(None, Some(x)) -> 
                    let yardRAltAction expr = 
                        match expr with
                        | REAlt(Some(x), None) -> 
                            let yardLAltAction expr = 
                                match expr with
                                | RESeq [gnescc_x0] -> 
                                    let (gnescc_x0) =
                                        let yardElemAction expr = 
                                            match expr with
                                            | RELeaf event -> (event :?> _ ) 
                                            | x -> getUnmatched x "RELeaf"

                                        yardElemAction(gnescc_x0)
                                    (gnescc_x0 )
                                | x -> getUnmatched x "RESeq"

                            yardLAltAction x 
                        | REAlt(None, Some(x)) -> 
                            let yardRAltAction expr = 
                                match expr with
                                | REAlt(Some(x), None) -> 
                                    let yardLAltAction expr = 
                                        match expr with
                                        | RESeq [gnescc_x0] -> 
                                            let (gnescc_x0) =
                                                let yardElemAction expr = 
                                                    match expr with
                                                    | RELeaf handler -> (handler :?> _ ) 
                                                    | x -> getUnmatched x "RELeaf"

                                                yardElemAction(gnescc_x0)
                                            (gnescc_x0 )
                                        | x -> getUnmatched x "RESeq"

                                    yardLAltAction x 
                                | REAlt(None, Some(x)) -> 
                                    let yardRAltAction expr = 
                                        match expr with
                                        | RESeq [gnescc_x0] -> 
                                            let (gnescc_x0) =
                                                let yardElemAction expr = 
                                                    match expr with
                                                    | RELeaf name -> (name :?> _ ) 
                                                    | x -> getUnmatched x "RELeaf"

                                                yardElemAction(gnescc_x0)
                                            (gnescc_x0 )
                                        | x -> getUnmatched x "RESeq"

                                    yardRAltAction x 
                                | x -> getUnmatched x "REAlt"

                            yardRAltAction x 
                        | x -> getUnmatched x "REAlt"

                    yardRAltAction x 
                | x -> getUnmatched x "REAlt"

            yardRAltAction x 
        | x -> getUnmatched x "REAlt"
    box (inner)
let expression_i20 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0; gnescc_x1] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf expression_i1 -> (expression_i1 :?> _ ) 
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            let (gnescc_x1) =
                let yardElemAction expr = 
                    match expr with
                    | REOpt(opt) -> 
                        let yardOptAction expr = 
                            match expr with
                            | RESeq [gnescc_x0; gnescc_x1] -> 
                                let (gnescc_x0) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | REAlt(Some(x), None) -> 
                                            let yardLAltAction expr = 
                                                match expr with
                                                | RESeq [gnescc_x0] -> 
                                                    let (gnescc_x0) =
                                                        let yardElemAction expr = 
                                                            match expr with
                                                            | RELeaf tPLUS -> tPLUS :?> 'a
                                                            | x -> getUnmatched x "RELeaf"

                                                        yardElemAction(gnescc_x0)
                                                    (gnescc_x0 )
                                                | x -> getUnmatched x "RESeq"

                                            yardLAltAction x 
                                        | REAlt(None, Some(x)) -> 
                                            let yardRAltAction expr = 
                                                match expr with
                                                | RESeq [gnescc_x0] -> 
                                                    let (gnescc_x0) =
                                                        let yardElemAction expr = 
                                                            match expr with
                                                            | RELeaf tSUB -> tSUB :?> 'a
                                                            | x -> getUnmatched x "RELeaf"

                                                        yardElemAction(gnescc_x0)
                                                    (gnescc_x0 )
                                                | x -> getUnmatched x "RESeq"

                                            yardRAltAction x 
                                        | x -> getUnmatched x "REAlt"

                                    yardElemAction(gnescc_x0)
                                let (gnescc_x1) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf expression_i -> (expression_i :?> _ ) 
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x1)
                                (gnescc_x0,gnescc_x1 )
                            | x -> getUnmatched x "RESeq"

                        if opt.IsSome then Some (yardOptAction opt.Value) else None 
                    | x -> getUnmatched x "REOpt"

                yardElemAction(gnescc_x1)
            (gnescc_x0,gnescc_x1 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let expression_i121 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0; gnescc_x1] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf expression_i2 -> (expression_i2 :?> _ ) 
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            let (gnescc_x1) =
                let yardElemAction expr = 
                    match expr with
                    | REOpt(opt) -> 
                        let yardOptAction expr = 
                            match expr with
                            | RESeq [gnescc_x0; gnescc_x1] -> 
                                let (gnescc_x0) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | REAlt(Some(x), None) -> 
                                            let yardLAltAction expr = 
                                                match expr with
                                                | RESeq [gnescc_x0] -> 
                                                    let (gnescc_x0) =
                                                        let yardElemAction expr = 
                                                            match expr with
                                                            | RELeaf tMULT -> tMULT :?> 'a
                                                            | x -> getUnmatched x "RELeaf"

                                                        yardElemAction(gnescc_x0)
                                                    (gnescc_x0 )
                                                | x -> getUnmatched x "RESeq"

                                            yardLAltAction x 
                                        | REAlt(None, Some(x)) -> 
                                            let yardRAltAction expr = 
                                                match expr with
                                                | RESeq [gnescc_x0] -> 
                                                    let (gnescc_x0) =
                                                        let yardElemAction expr = 
                                                            match expr with
                                                            | RELeaf tDIV -> tDIV :?> 'a
                                                            | x -> getUnmatched x "RELeaf"

                                                        yardElemAction(gnescc_x0)
                                                    (gnescc_x0 )
                                                | x -> getUnmatched x "RESeq"

                                            yardRAltAction x 
                                        | x -> getUnmatched x "REAlt"

                                    yardElemAction(gnescc_x0)
                                let (gnescc_x1) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf expression_i -> (expression_i :?> _ ) 
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x1)
                                (gnescc_x0,gnescc_x1 )
                            | x -> getUnmatched x "RESeq"

                        if opt.IsSome then Some (yardOptAction opt.Value) else None 
                    | x -> getUnmatched x "REOpt"

                yardElemAction(gnescc_x1)
            (gnescc_x0,gnescc_x1 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let expression_i222 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0; gnescc_x1] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf expression_i3 -> (expression_i3 :?> _ ) 
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            let (gnescc_x1) =
                let yardElemAction expr = 
                    match expr with
                    | REClosure(lst) -> 
                        let yardClsAction expr = 
                            match expr with
                            | RESeq [gnescc_x0; gnescc_x1] -> 
                                let (gnescc_x0) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf tDOT -> tDOT :?> 'a
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x0)
                                let (gnescc_x1) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | REAlt(Some(x), None) -> 
                                            let yardLAltAction expr = 
                                                match expr with
                                                | RESeq [gnescc_x0] -> 
                                                    let (gnescc_x0) =
                                                        let yardElemAction expr = 
                                                            match expr with
                                                            | RELeaf name -> (name :?> _ ) 
                                                            | x -> getUnmatched x "RELeaf"

                                                        yardElemAction(gnescc_x0)
                                                    (gnescc_x0 )
                                                | x -> getUnmatched x "RESeq"

                                            yardLAltAction x 
                                        | REAlt(None, Some(x)) -> 
                                            let yardRAltAction expr = 
                                                match expr with
                                                | RESeq [gnescc_x0] -> 
                                                    let (gnescc_x0) =
                                                        let yardElemAction expr = 
                                                            match expr with
                                                            | RELeaf apply -> (apply :?> _ ) 
                                                            | x -> getUnmatched x "RELeaf"

                                                        yardElemAction(gnescc_x0)
                                                    (gnescc_x0 )
                                                | x -> getUnmatched x "RESeq"

                                            yardRAltAction x 
                                        | x -> getUnmatched x "REAlt"

                                    yardElemAction(gnescc_x1)
                                (gnescc_x0,gnescc_x1 )
                            | x -> getUnmatched x "RESeq"

                        List.map yardClsAction lst 
                    | x -> getUnmatched x "REClosure"

                yardElemAction(gnescc_x1)
            (gnescc_x0,gnescc_x1 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let expression_i323 expr = 
    let inner  = 
        match expr with
        | REAlt(Some(x), None) -> 
            let yardLAltAction expr = 
                match expr with
                | RESeq [gnescc_x0] -> 
                    let (gnescc_x0) =
                        let yardElemAction expr = 
                            match expr with
                            | RELeaf value_i -> (value_i :?> _ ) 
                            | x -> getUnmatched x "RELeaf"

                        yardElemAction(gnescc_x0)
                    (gnescc_x0 )
                | x -> getUnmatched x "RESeq"

            yardLAltAction x 
        | REAlt(None, Some(x)) -> 
            let yardRAltAction expr = 
                match expr with
                | REAlt(Some(x), None) -> 
                    let yardLAltAction expr = 
                        match expr with
                        | RESeq [gnescc_x0] -> 
                            let (gnescc_x0) =
                                let yardElemAction expr = 
                                    match expr with
                                    | RELeaf name -> (name :?> _ ) 
                                    | x -> getUnmatched x "RELeaf"

                                yardElemAction(gnescc_x0)
                            (gnescc_x0 )
                        | x -> getUnmatched x "RESeq"

                    yardLAltAction x 
                | REAlt(None, Some(x)) -> 
                    let yardRAltAction expr = 
                        match expr with
                        | REAlt(Some(x), None) -> 
                            let yardLAltAction expr = 
                                match expr with
                                | RESeq [gnescc_x0] -> 
                                    let (gnescc_x0) =
                                        let yardElemAction expr = 
                                            match expr with
                                            | RELeaf apply -> (apply :?> _ ) 
                                            | x -> getUnmatched x "RELeaf"

                                        yardElemAction(gnescc_x0)
                                    (gnescc_x0 )
                                | x -> getUnmatched x "RESeq"

                            yardLAltAction x 
                        | REAlt(None, Some(x)) -> 
                            let yardRAltAction expr = 
                                match expr with
                                | RESeq [gnescc_x0] -> 
                                    let (gnescc_x0) =
                                        let yardElemAction expr = 
                                            match expr with
                                            | RESeq [gnescc_x0; gnescc_x1; gnescc_x2] -> 
                                                let (gnescc_x0) =
                                                    let yardElemAction expr = 
                                                        match expr with
                                                        | RELeaf tBRACKET_ROUND_OPEN -> tBRACKET_ROUND_OPEN :?> 'a
                                                        | x -> getUnmatched x "RELeaf"

                                                    yardElemAction(gnescc_x0)
                                                let (gnescc_x1) =
                                                    let yardElemAction expr = 
                                                        match expr with
                                                        | RELeaf expression_i -> (expression_i :?> _ ) 
                                                        | x -> getUnmatched x "RELeaf"

                                                    yardElemAction(gnescc_x1)
                                                let (gnescc_x2) =
                                                    let yardElemAction expr = 
                                                        match expr with
                                                        | RELeaf tBRACKET_ROUND_CLOSE -> tBRACKET_ROUND_CLOSE :?> 'a
                                                        | x -> getUnmatched x "RELeaf"

                                                    yardElemAction(gnescc_x2)
                                                (gnescc_x0,gnescc_x1,gnescc_x2 )
                                            | x -> getUnmatched x "RESeq"

                                        yardElemAction(gnescc_x0)
                                    (gnescc_x0 )
                                | x -> getUnmatched x "RESeq"

                            yardRAltAction x 
                        | x -> getUnmatched x "REAlt"

                    yardRAltAction x 
                | x -> getUnmatched x "REAlt"

            yardRAltAction x 
        | x -> getUnmatched x "REAlt"
    box (inner)
let apply24 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0; gnescc_x1; gnescc_x2; gnescc_x3] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf name -> (name :?> _ ) 
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            let (gnescc_x1) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tBRACKET_ROUND_OPEN -> tBRACKET_ROUND_OPEN :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x1)
            let (gnescc_x2) =
                let yardElemAction expr = 
                    match expr with
                    | REOpt(opt) -> 
                        let yardOptAction expr = 
                            match expr with
                            | RESeq [gnescc_x0; gnescc_x1] -> 
                                let (gnescc_x0) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf expression -> (expression :?> _ ) 
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x0)
                                let (gnescc_x1) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | REClosure(lst) -> 
                                            let yardClsAction expr = 
                                                match expr with
                                                | RESeq [gnescc_x0; gnescc_x1] -> 
                                                    let (gnescc_x0) =
                                                        let yardElemAction expr = 
                                                            match expr with
                                                            | RELeaf tCOMMA -> tCOMMA :?> 'a
                                                            | x -> getUnmatched x "RELeaf"

                                                        yardElemAction(gnescc_x0)
                                                    let (gnescc_x1) =
                                                        let yardElemAction expr = 
                                                            match expr with
                                                            | RELeaf expression -> (expression :?> _ ) 
                                                            | x -> getUnmatched x "RELeaf"

                                                        yardElemAction(gnescc_x1)
                                                    (gnescc_x0,gnescc_x1 )
                                                | x -> getUnmatched x "RESeq"

                                            List.map yardClsAction lst 
                                        | x -> getUnmatched x "REClosure"

                                    yardElemAction(gnescc_x1)
                                (gnescc_x0,gnescc_x1 )
                            | x -> getUnmatched x "RESeq"

                        if opt.IsSome then Some (yardOptAction opt.Value) else None 
                    | x -> getUnmatched x "REOpt"

                yardElemAction(gnescc_x2)
            let (gnescc_x3) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tBRACKET_ROUND_CLOSE -> tBRACKET_ROUND_CLOSE :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x3)
            (gnescc_x0,gnescc_x1,gnescc_x2,gnescc_x3 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let value_i25 expr = 
    let inner  = 
        match expr with
        | REAlt(Some(x), None) -> 
            let yardLAltAction expr = 
                match expr with
                | RESeq [gnescc_x0] -> 
                    let (gnescc_x0) =
                        let yardElemAction expr = 
                            match expr with
                            | RELeaf tNUMBER -> tNUMBER :?> 'a
                            | x -> getUnmatched x "RELeaf"

                        yardElemAction(gnescc_x0)
                    (gnescc_x0 )
                | x -> getUnmatched x "RESeq"

            yardLAltAction x 
        | REAlt(None, Some(x)) -> 
            let yardRAltAction expr = 
                match expr with
                | RESeq [gnescc_x0] -> 
                    let (gnescc_x0) =
                        let yardElemAction expr = 
                            match expr with
                            | RELeaf tSTRING_CONSTANT -> tSTRING_CONSTANT :?> 'a
                            | x -> getUnmatched x "RELeaf"

                        yardElemAction(gnescc_x0)
                    (gnescc_x0 )
                | x -> getUnmatched x "RESeq"

            yardRAltAction x 
        | x -> getUnmatched x "REAlt"
    box (inner)
let function26 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0; gnescc_x1; gnescc_x2] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf functionHeader -> (functionHeader :?> _ ) 
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            let (gnescc_x1) =
                let yardElemAction expr = 
                    match expr with
                    | REClosure(lst) -> 
                        let yardClsAction expr = 
                            match expr with
                            | RELeaf attribute -> (attribute :?> _ ) 
                            | x -> getUnmatched x "RELeaf"

                        List.map yardClsAction lst 
                    | x -> getUnmatched x "REClosure"

                yardElemAction(gnescc_x1)
            let (gnescc_x2) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf functionBody -> (functionBody :?> _ ) 
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x2)
            (gnescc_x0,gnescc_x1,gnescc_x2 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let functionHeader27 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0; gnescc_x1; gnescc_x2; gnescc_x3] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tKEYWORD_FUN -> tKEYWORD_FUN :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            let (gnescc_x1) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tBRACKET_ROUND_OPEN -> tBRACKET_ROUND_OPEN :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x1)
            let (gnescc_x2) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf fields -> (fields :?> _ ) 
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x2)
            let (gnescc_x3) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tBRACKET_ROUND_CLOSE -> tBRACKET_ROUND_CLOSE :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x3)
            (gnescc_x0,gnescc_x1,gnescc_x2,gnescc_x3 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let functionBody28 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0; gnescc_x1; gnescc_x2] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tBRACKET_CURLY_OPEN -> tBRACKET_CURLY_OPEN :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            let (gnescc_x1) =
                let yardElemAction expr = 
                    match expr with
                    | REClosure(lst) -> 
                        let yardClsAction expr = 
                            match expr with
                            | RESeq [gnescc_x0; gnescc_x1] -> 
                                let (gnescc_x0) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf statement -> (statement :?> _ ) 
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x0)
                                let (gnescc_x1) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf tDELIMITER -> tDELIMITER :?> 'a
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x1)
                                (gnescc_x0,gnescc_x1 )
                            | x -> getUnmatched x "RESeq"

                        List.map yardClsAction lst 
                    | x -> getUnmatched x "REClosure"

                yardElemAction(gnescc_x1)
            let (gnescc_x2) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tBRACKET_CURLY_CLOSE -> tBRACKET_CURLY_CLOSE :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x2)
            (gnescc_x0,gnescc_x1,gnescc_x2 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let event29 expr = 
    let inner  = 
        match expr with
        | REAlt(Some(x), None) -> 
            let yardLAltAction expr = 
                match expr with
                | RESeq [gnescc_x0] -> 
                    let (gnescc_x0) =
                        let yardElemAction expr = 
                            match expr with
                            | RESeq [gnescc_x0; gnescc_x1] -> 
                                let (gnescc_x0) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf eventHeader -> (eventHeader :?> _ ) 
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x0)
                                let (gnescc_x1) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | REClosure(lst) -> 
                                            let yardClsAction expr = 
                                                match expr with
                                                | RELeaf attribute -> (attribute :?> _ ) 
                                                | x -> getUnmatched x "RELeaf"

                                            List.map yardClsAction lst 
                                        | x -> getUnmatched x "REClosure"

                                    yardElemAction(gnescc_x1)
                                (gnescc_x0,gnescc_x1 )
                            | x -> getUnmatched x "RESeq"

                        yardElemAction(gnescc_x0)
                    (gnescc_x0 )
                | x -> getUnmatched x "RESeq"

            yardLAltAction x 
        | REAlt(None, Some(x)) -> 
            let yardRAltAction expr = 
                match expr with
                | RESeq [gnescc_x0] -> 
                    let (gnescc_x0) =
                        let yardElemAction expr = 
                            match expr with
                            | RESeq [gnescc_x0; gnescc_x1; gnescc_x2; gnescc_x3; gnescc_x4; gnescc_x5] -> 
                                let (gnescc_x0) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf tKEYWORD_EVENT_SHORT -> tKEYWORD_EVENT_SHORT :?> 'a
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x0)
                                let (gnescc_x1) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf tBRACKET_ROUND_OPEN -> tBRACKET_ROUND_OPEN :?> 'a
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x1)
                                let (gnescc_x2) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf expression -> (expression :?> _ ) 
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x2)
                                let (gnescc_x3) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf tCOMMA -> tCOMMA :?> 'a
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x3)
                                let (gnescc_x4) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf fieldList -> (fieldList :?> _ ) 
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x4)
                                let (gnescc_x5) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf tBRACKET_ROUND_CLOSE -> tBRACKET_ROUND_CLOSE :?> 'a
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x5)
                                (gnescc_x0,gnescc_x1,gnescc_x2,gnescc_x3,gnescc_x4,gnescc_x5 )
                            | x -> getUnmatched x "RESeq"

                        yardElemAction(gnescc_x0)
                    (gnescc_x0 )
                | x -> getUnmatched x "RESeq"

            yardRAltAction x 
        | x -> getUnmatched x "REAlt"
    box (inner)
let eventHeader30 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tKEYWORD_EVENT -> tKEYWORD_EVENT :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            (gnescc_x0 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let handler31 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0; gnescc_x1; gnescc_x2] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf handlerHeader -> (handlerHeader :?> _ ) 
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            let (gnescc_x1) =
                let yardElemAction expr = 
                    match expr with
                    | REClosure(lst) -> 
                        let yardClsAction expr = 
                            match expr with
                            | RELeaf attribute -> (attribute :?> _ ) 
                            | x -> getUnmatched x "RELeaf"

                        List.map yardClsAction lst 
                    | x -> getUnmatched x "REClosure"

                yardElemAction(gnescc_x1)
            let (gnescc_x2) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf handlerBody -> (handlerBody :?> _ ) 
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x2)
            (gnescc_x0,gnescc_x1,gnescc_x2 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let handlerHeader32 expr = 
    let inner  = 
        match expr with
        | REAlt(Some(x), None) -> 
            let yardLAltAction expr = 
                match expr with
                | RESeq [gnescc_x0] -> 
                    let (gnescc_x0) =
                        let yardElemAction expr = 
                            match expr with
                            | RELeaf tKEYWORD_HANDLER -> tKEYWORD_HANDLER :?> 'a
                            | x -> getUnmatched x "RELeaf"

                        yardElemAction(gnescc_x0)
                    (gnescc_x0 )
                | x -> getUnmatched x "RESeq"

            yardLAltAction x 
        | REAlt(None, Some(x)) -> 
            let yardRAltAction expr = 
                match expr with
                | RESeq [gnescc_x0] -> 
                    let (gnescc_x0) =
                        let yardElemAction expr = 
                            match expr with
                            | RELeaf tKEYWORD_HANDLER_SHORT -> tKEYWORD_HANDLER_SHORT :?> 'a
                            | x -> getUnmatched x "RELeaf"

                        yardElemAction(gnescc_x0)
                    (gnescc_x0 )
                | x -> getUnmatched x "RESeq"

            yardRAltAction x 
        | x -> getUnmatched x "REAlt"
    box (inner)
let handlerBody33 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0; gnescc_x1; gnescc_x2] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tBRACKET_CURLY_OPEN -> tBRACKET_CURLY_OPEN :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            let (gnescc_x1) =
                let yardElemAction expr = 
                    match expr with
                    | REClosure(lst) -> 
                        let yardClsAction expr = 
                            match expr with
                            | RESeq [gnescc_x0; gnescc_x1] -> 
                                let (gnescc_x0) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf statement -> (statement :?> _ ) 
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x0)
                                let (gnescc_x1) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf tDELIMITER -> tDELIMITER :?> 'a
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x1)
                                (gnescc_x0,gnescc_x1 )
                            | x -> getUnmatched x "RESeq"

                        List.map yardClsAction lst 
                    | x -> getUnmatched x "REClosure"

                yardElemAction(gnescc_x1)
            let (gnescc_x2) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tBRACKET_CURLY_CLOSE -> tBRACKET_CURLY_CLOSE :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x2)
            (gnescc_x0,gnescc_x1,gnescc_x2 )
        | x -> getUnmatched x "RESeq"
    box (inner)
let fieldList34 expr = 
    let inner  = 
        match expr with
        | RESeq [gnescc_x0; gnescc_x1; gnescc_x2] -> 
            let (gnescc_x0) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tBRACKET_SQUARE_OPEN -> tBRACKET_SQUARE_OPEN :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x0)
            let (gnescc_x1) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf fields -> (fields :?> _ ) 
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x1)
            let (gnescc_x2) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tBRACKET_SQUARE_CLOSE -> tBRACKET_SQUARE_CLOSE :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(gnescc_x2)
            (gnescc_x0,gnescc_x1,gnescc_x2 )
        | x -> getUnmatched x "RESeq"
    box (inner)

let ruleToAction = dict [|(28,fieldList34); (35,handlerBody33); (34,handlerHeader32); (19,handler31); (12,eventHeader30); (25,event29); (32,functionBody28); (29,functionHeader27); (24,function26); (31,value_i25); (22,apply24); (27,expression_i323); (30,expression_i222); (33,expression_i121); (14,expression_i20); (15,expression_v19); (26,expression_b318); (17,expression_b217); (20,expression_b116); (18,expression_b15); (16,expressionList14); (6,expression13); (9,bindHandler12); (8,bind11); (7,assign10); (13,operation9); (1,statement8); (10,moduleBody7); (11,attributeEntry6); (3,attribute5); (4,fields4); (21,moduleHeader3); (23,module2); (5,name1); (0,file0)|]

