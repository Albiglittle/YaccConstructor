//this file was generated by GNESCC
//source grammar:../../../Tests/GNESCC/test_cls_with_tail/test_cls_with_tail.yrd
//date:10/12/2011 16:53:50

module GNESCC.Actions_cls_with_tail

open Yard.Generators.GNESCCGenerator

let getUnmatched x expectedType =
    "Unexpected type of node\nType " + x.ToString() + " is not expected in this position\n" + expectedType + " was expected." |> failwith

let value x = (x:>Lexer_cls_with_tail.MyLexeme).MValue

let s0 expr = 
    let inner  = 
        match expr with
        | RESeq [x0; x1] -> 
            let (res) =
                let yardElemAction expr = 
                    match expr with
                    | REClosure(lst) -> 
                        let yardClsAction expr = 
                            match expr with
                            | RESeq [gnescc_x0] -> 
                                let (gnescc_x0) =
                                    let yardElemAction expr = 
                                        match expr with
                                        | RELeaf tMINUS -> tMINUS :?> 'a
                                        | x -> getUnmatched x "RELeaf"

                                    yardElemAction(gnescc_x0)
                                ("list minus")
                            | x -> getUnmatched x "RESeq"

                        List.map yardClsAction lst 
                    | x -> getUnmatched x "REClosure"

                yardElemAction(x0)
            let (oneMinus) =
                let yardElemAction expr = 
                    match expr with
                    | RELeaf tMINUS -> tMINUS :?> 'a
                    | x -> getUnmatched x "RELeaf"

                yardElemAction(x1)
            (res |> fun x -> x @ ["tail minus"] |> String.concat ";")
        | x -> getUnmatched x "RESeq"
    box (inner)

let ruleToAction = dict [|(1,s0)|]

