//this file was generated by GNESCC
//source grammar:../../../Tests/GNESCC/test_seq/test_seq.yrd
//date:10/9/2011 12:01:29 AM

module GNESCC.Regexp_seq

open Yard.Generators.GNESCCGenerator
open System.Text.RegularExpressions

let buildIndexMap kvLst =
    let ks = List.map (fun (x:string,y) -> x.Length + 2,y) kvLst
    List.fold (fun (bl,blst) (l,v) -> bl+l,((bl,v)::blst)) (0,[]) ks
    |> snd
    |> dict

let buildStr kvLst =
    let sep = ";;"
    List.map fst kvLst 
    |> String.concat sep
    |> fun s -> ";" + s + ";"

let s childsLst = 
    let str = buildStr childsLst
    let idxValMap = buildIndexMap childsLst
    let re = new Regex("((;5;)(;6;)(;5;))")
    let elts = re.Match(str).Groups
    let e2 =
        idxValMap.[elts.[4].Captures.[0].Index] |> RELeaf
    let e1 =
        idxValMap.[elts.[3].Captures.[0].Index] |> RELeaf
    let e0 =
        idxValMap.[elts.[2].Captures.[0].Index] |> RELeaf
    RESeq [e0; e1; e2]

let ruleToRegex = dict [|(1,s)|]

