//this file was generated by GNESCC
//source grammar:../../../Tests/GNESCC/test_5/test_5.yrd
//date:11/4/2011 2:49:32 PM

module GNESCC.Actions_test_5

open Yard.Generators.GNESCCGenerator

let getUnmatched x expectedType =
    "Unexpected type of node\nType " + x.ToString() + " is not expected in this position\n" + expectedType + " was expected." |> failwith
let s0 expr = 
    let inner  = 
        match expr with
        | REAlt(Some(x), None) -> 
            let yardLAltAction expr = 
                match expr with
                | RESeq [gnescc_x0] -> 
                    let (gnescc_x0) =
                        let yardElemAction expr = 
                            match expr with
                            | RELeaf tNUMBER -> tNUMBER :?> 'a
                            | x -> getUnmatched x "RELeaf"

                        yardElemAction(gnescc_x0)
                    (gnescc_x0 )
                | x -> getUnmatched x "RESeq"

            yardLAltAction x 
        | REAlt(None, Some(x)) -> 
            let yardRAltAction expr = 
                match expr with
                | RESeq [gnescc_x0; gnescc_x1; gnescc_x2] -> 
                    let (gnescc_x0) =
                        let yardElemAction expr = 
                            match expr with
                            | RELeaf s -> (s :?> _ ) 
                            | x -> getUnmatched x "RELeaf"

                        yardElemAction(gnescc_x0)
                    let (gnescc_x1) =
                        let yardElemAction expr = 
                            match expr with
                            | RELeaf tPLUS -> tPLUS :?> 'a
                            | x -> getUnmatched x "RELeaf"

                        yardElemAction(gnescc_x1)
                    let (gnescc_x2) =
                        let yardElemAction expr = 
                            match expr with
                            | RELeaf s -> (s :?> _ ) 
                            | x -> getUnmatched x "RELeaf"

                        yardElemAction(gnescc_x2)
                    (gnescc_x0,gnescc_x1,gnescc_x2 )
                | x -> getUnmatched x "RESeq"

            yardRAltAction x 
        | x -> getUnmatched x "REAlt"
    box (inner)

let ruleToAction = dict [|(1,s0)|]

