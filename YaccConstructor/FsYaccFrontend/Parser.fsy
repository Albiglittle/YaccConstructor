%{

open Yard.Core.IL
open Yard.Core.IL.Production

%}
%token EOF
%token DOUBLE_PERC
%token TOKEN_KW
%token ASSOC_KW
%token START_KW
%token <string> TYPE
%token TYPE_KW
%token BAR
%token COLON
%token <string> IDENT
%token <string> ACTION_CODE
%token <string> HEAD

%start s

%type <'a> s

%%

alternative : yard_list_12 ACTION_CODE
              {let lst=$1 in let ac=$2 in  PSeq(List.map (fun prod -> {new Production.elem<Source.t, Source.t> with omit=false and rule=prod and binding=None and checker=None}) lst, Some(ac,(0,0))) }

yard_list_12 : { [] }
             | yard_item_2 yard_list_12
               {let yard_h=$1 in let yard_t=$2 in  yard_h::yard_t }

yard_item_2 : IDENT {let s=$1 in  PRef((s,(0,0)), None) }

rule : IDENT COLON alternative yard_list_11
       {let name=$1 in let alt=$3 in let opt_alts=$4 in  { new Rule.t<Source.t, Source.t> with 
            name=name 
            and args=[] 
            and body=if opt_alts=[] then alt else PAlt(alt, List.reduce (fun acc prod -> PAlt(prod, alt)) opt_alts)
            and _public=false
            and metaArgs=[] } }

yard_list_11 : { [] }
             | yard_item_1 yard_list_11
               {let yard_h=$1 in let yard_t=$2 in  yard_h::yard_t }

yard_item_1 : BAR alternative {let alt=$2 in alt}

typedef : TYPE_KW TYPE IDENT { }

start : START_KW yard_nlist_10 {let name=$2 in  name }

assoc : ASSOC_KW yard_nlist_10 { }

token : TOKEN_KW yard_option_9 yard_nlist_10 {let tokens=$3 in  tokens }

yard_nlist_10 : IDENT {let yard_h=$1 in  [yard_h] }
              | IDENT yard_nlist_10
                {let yard_h=$1 in let yard_t=$2 in  yard_h::yard_t }

yard_option_9 : TYPE {let yard_item=$1 in  Some yard_item }
              | { None }

s : yard_option_3 yard_list_4 yard_list_5 start yard_nlist_6 DOUBLE_PERC
    yard_list_7 yard_option_8 EOF
    {let h=$1 in let tokens=$2 in let st=$4 in let rules=$7 in  h, List.concat tokens, st, rules }

yard_option_8 : DOUBLE_PERC { }
              | { }

yard_list_7 : { [] }
            | rule yard_list_7
              {let yard_h=$1 in let yard_t=$2 in  yard_h::yard_t }

yard_nlist_6 : typedef {let yard_h=$1 in  [yard_h] }
             | typedef yard_nlist_6
               {let yard_h=$1 in let yard_t=$2 in  yard_h::yard_t }

yard_list_5 : { [] }
            | assoc yard_list_5
              {let yard_h=$1 in let yard_t=$2 in  yard_h::yard_t }

yard_list_4 : { [] }
            | token yard_list_4
              {let yard_h=$1 in let yard_t=$2 in  yard_h::yard_t }

yard_option_3 : HEAD {let yard_item=$1 in  Some yard_item }
              | { None }
