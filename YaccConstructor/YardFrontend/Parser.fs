// Implementation file for parser generated by fsyacc
#light "off"
module Yard.Frontends.YardFrontend.GrammarParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Yard.Core
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

//  Copyright 2009 Jake Kirilenko
//
//  This file is part of YaccConctructor.
//
//  YaccConstructor is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#nowarn "62";; 
open Microsoft.FSharp.Text
open Yard.Core.IL
open Yard.Core.IL.Production
 
type Range = struct
	val Start: Lexing.Position
	val End: Lexing.Position

	new (start,end_) = {Start = start; End = end_}
end

exception Parse_error
let FrontendsManager = Yard.Core.FrontendsManager.FrontendsManager()  
let currentFilename = ref ""
let o2l = function Some x -> [x] | None -> []
let getList = function Some x -> x | None -> []

let joinMaps (p:Map<'a,'b>) (q:Map<'a,'b>) = 
    Map(Seq.concat [ (Map.toSeq p) ; (Map.toSeq q) ])

let makeNewSeq seq lbl = 
	match seq with 
	| PSeq(els,ac,_) ->PSeq (els,ac,Some {label=fst lbl; weight=None})
	| x -> x

let missing name = System.Console.WriteLine("Missing " + name)
let createSeqElem bnd omitted r check =
    { binding = bnd; omit = omitted; rule = r; checker = check }

let parseRules (filename:string) : (IL.Source.t, IL.Source.t)IL.Definition.t =
    let ext = filename.Substring(filename.LastIndexOf(".") + 1) in
    let frontend = FrontendsManager.GetByExtension ext in
    let userDefs =
        let args = (!currentFilename).Trim().Split('%') in
        if args.Length = 2
        then args.[1]
        else ""
	in
    let sameDirFilename = System.IO.Path.Combine(System.IO.Path.GetDirectoryName !currentFilename, filename) in

    match FrontendsManager.GetByExtension ext with
    | Some(frontend) -> 
        frontend.Value.ParseGrammar (sameDirFilename + "%" + userDefs)
    | None -> 
        failwith (sprintf "Not supported extension %s in file %s" ext filename )

# 74 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | DLABEL of (IL.Source.t)
  | SHARPLINE of (string)
  | PATTERN of (IL.Source.t)
  | PARAM of (IL.Source.t)
  | PREDICATE of (IL.Source.t)
  | ACTION of (IL.Source.t)
  | STRING of (IL.Source.t)
  | LIDENT of (IL.Source.t)
  | UIDENT of (IL.Source.t)
  | SET
  | INCLUDE
  | COMMUT
  | DLESS
  | DGREAT
  | RPAREN of (Range)
  | LPAREN of (Range)
  | EXCLAMATION
  | QUESTION
  | MINUS
  | PLUS
  | STAR
  | BAR
  | EQUAL
  | COMMA
  | SEMICOLON of (Range)
  | COLON
  | EOF
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_DLABEL
    | TOKEN_SHARPLINE
    | TOKEN_PATTERN
    | TOKEN_PARAM
    | TOKEN_PREDICATE
    | TOKEN_ACTION
    | TOKEN_STRING
    | TOKEN_LIDENT
    | TOKEN_UIDENT
    | TOKEN_SET
    | TOKEN_INCLUDE
    | TOKEN_COMMUT
    | TOKEN_DLESS
    | TOKEN_DGREAT
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_EXCLAMATION
    | TOKEN_QUESTION
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_STAR
    | TOKEN_BAR
    | TOKEN_EQUAL
    | TOKEN_COMMA
    | TOKEN_SEMICOLON
    | TOKEN_COLON
    | TOKEN_EOF
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startfile
    | NONTERM_file
    | NONTERM_action_opt
    | NONTERM_rule_nlist
    | NONTERM_rule
    | NONTERM_plus_opt
    | NONTERM_formal_meta_param_opt
    | NONTERM_formal_meta_list
    | NONTERM_param_opt
    | NONTERM_alts
    | NONTERM_bar_seq_nlist
    | NONTERM_seq
    | NONTERM_no_lbl_seq
    | NONTERM_lbl_seq
    | NONTERM_seq_elem_list
    | NONTERM_seq_elem
    | NONTERM_omit_opt
    | NONTERM_predicate_opt
    | NONTERM_bound
    | NONTERM_patt
    | NONTERM_prim
    | NONTERM_meta_param
    | NONTERM_meta_params
    | NONTERM_meta_param_opt
    | NONTERM_call
    | NONTERM_option_opt
    | NONTERM_option_params
    | NONTERM_option_param

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | DLABEL _ -> 0 
  | SHARPLINE _ -> 1 
  | PATTERN _ -> 2 
  | PARAM _ -> 3 
  | PREDICATE _ -> 4 
  | ACTION _ -> 5 
  | STRING _ -> 6 
  | LIDENT _ -> 7 
  | UIDENT _ -> 8 
  | SET  -> 9 
  | INCLUDE  -> 10 
  | COMMUT  -> 11 
  | DLESS  -> 12 
  | DGREAT  -> 13 
  | RPAREN _ -> 14 
  | LPAREN _ -> 15 
  | EXCLAMATION  -> 16 
  | QUESTION  -> 17 
  | MINUS  -> 18 
  | PLUS  -> 19 
  | STAR  -> 20 
  | BAR  -> 21 
  | EQUAL  -> 22 
  | COMMA  -> 23 
  | SEMICOLON _ -> 24 
  | COLON  -> 25 
  | EOF  -> 26 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_DLABEL 
  | 1 -> TOKEN_SHARPLINE 
  | 2 -> TOKEN_PATTERN 
  | 3 -> TOKEN_PARAM 
  | 4 -> TOKEN_PREDICATE 
  | 5 -> TOKEN_ACTION 
  | 6 -> TOKEN_STRING 
  | 7 -> TOKEN_LIDENT 
  | 8 -> TOKEN_UIDENT 
  | 9 -> TOKEN_SET 
  | 10 -> TOKEN_INCLUDE 
  | 11 -> TOKEN_COMMUT 
  | 12 -> TOKEN_DLESS 
  | 13 -> TOKEN_DGREAT 
  | 14 -> TOKEN_RPAREN 
  | 15 -> TOKEN_LPAREN 
  | 16 -> TOKEN_EXCLAMATION 
  | 17 -> TOKEN_QUESTION 
  | 18 -> TOKEN_MINUS 
  | 19 -> TOKEN_PLUS 
  | 20 -> TOKEN_STAR 
  | 21 -> TOKEN_BAR 
  | 22 -> TOKEN_EQUAL 
  | 23 -> TOKEN_COMMA 
  | 24 -> TOKEN_SEMICOLON 
  | 25 -> TOKEN_COLON 
  | 26 -> TOKEN_EOF 
  | 29 -> TOKEN_end_of_input
  | 27 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startfile 
    | 1 -> NONTERM_file 
    | 2 -> NONTERM_action_opt 
    | 3 -> NONTERM_action_opt 
    | 4 -> NONTERM_rule_nlist 
    | 5 -> NONTERM_rule_nlist 
    | 6 -> NONTERM_rule_nlist 
    | 7 -> NONTERM_rule_nlist 
    | 8 -> NONTERM_rule 
    | 9 -> NONTERM_plus_opt 
    | 10 -> NONTERM_plus_opt 
    | 11 -> NONTERM_formal_meta_param_opt 
    | 12 -> NONTERM_formal_meta_param_opt 
    | 13 -> NONTERM_formal_meta_list 
    | 14 -> NONTERM_formal_meta_list 
    | 15 -> NONTERM_param_opt 
    | 16 -> NONTERM_param_opt 
    | 17 -> NONTERM_alts 
    | 18 -> NONTERM_alts 
    | 19 -> NONTERM_bar_seq_nlist 
    | 20 -> NONTERM_bar_seq_nlist 
    | 21 -> NONTERM_seq 
    | 22 -> NONTERM_seq 
    | 23 -> NONTERM_no_lbl_seq 
    | 24 -> NONTERM_no_lbl_seq 
    | 25 -> NONTERM_lbl_seq 
    | 26 -> NONTERM_seq_elem_list 
    | 27 -> NONTERM_seq_elem_list 
    | 28 -> NONTERM_seq_elem 
    | 29 -> NONTERM_omit_opt 
    | 30 -> NONTERM_omit_opt 
    | 31 -> NONTERM_predicate_opt 
    | 32 -> NONTERM_predicate_opt 
    | 33 -> NONTERM_bound 
    | 34 -> NONTERM_bound 
    | 35 -> NONTERM_patt 
    | 36 -> NONTERM_patt 
    | 37 -> NONTERM_prim 
    | 38 -> NONTERM_prim 
    | 39 -> NONTERM_prim 
    | 40 -> NONTERM_prim 
    | 41 -> NONTERM_prim 
    | 42 -> NONTERM_prim 
    | 43 -> NONTERM_prim 
    | 44 -> NONTERM_meta_param 
    | 45 -> NONTERM_meta_params 
    | 46 -> NONTERM_meta_params 
    | 47 -> NONTERM_meta_param_opt 
    | 48 -> NONTERM_meta_param_opt 
    | 49 -> NONTERM_call 
    | 50 -> NONTERM_call 
    | 51 -> NONTERM_option_opt 
    | 52 -> NONTERM_option_opt 
    | 53 -> NONTERM_option_params 
    | 54 -> NONTERM_option_params 
    | 55 -> NONTERM_option_param 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 29 
let _fsyacc_tagOfErrorTerminal = 27

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | DLABEL _ -> "DLABEL" 
  | SHARPLINE _ -> "SHARPLINE" 
  | PATTERN _ -> "PATTERN" 
  | PARAM _ -> "PARAM" 
  | PREDICATE _ -> "PREDICATE" 
  | ACTION _ -> "ACTION" 
  | STRING _ -> "STRING" 
  | LIDENT _ -> "LIDENT" 
  | UIDENT _ -> "UIDENT" 
  | SET  -> "SET" 
  | INCLUDE  -> "INCLUDE" 
  | COMMUT  -> "COMMUT" 
  | DLESS  -> "DLESS" 
  | DGREAT  -> "DGREAT" 
  | RPAREN _ -> "RPAREN" 
  | LPAREN _ -> "LPAREN" 
  | EXCLAMATION  -> "EXCLAMATION" 
  | QUESTION  -> "QUESTION" 
  | MINUS  -> "MINUS" 
  | PLUS  -> "PLUS" 
  | STAR  -> "STAR" 
  | BAR  -> "BAR" 
  | EQUAL  -> "EQUAL" 
  | COMMA  -> "COMMA" 
  | SEMICOLON _ -> "SEMICOLON" 
  | COLON  -> "COLON" 
  | EOF  -> "EOF" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | DLABEL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SHARPLINE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PATTERN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PARAM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PREDICATE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ACTION _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LIDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UIDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SET  -> (null : System.Object) 
  | INCLUDE  -> (null : System.Object) 
  | COMMUT  -> (null : System.Object) 
  | DLESS  -> (null : System.Object) 
  | DGREAT  -> (null : System.Object) 
  | RPAREN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LPAREN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EXCLAMATION  -> (null : System.Object) 
  | QUESTION  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | BAR  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SEMICOLON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COLON  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 2us; 3us; 4us; 36us; 37us; 3us; 65535us; 2us; 3us; 8us; 9us; 11us; 12us; 3us; 65535us; 2us; 7us; 8us; 7us; 11us; 7us; 3us; 65535us; 2us; 14us; 8us; 14us; 11us; 14us; 1us; 65535us; 15us; 16us; 2us; 65535us; 22us; 23us; 25us; 26us; 2us; 65535us; 16us; 17us; 73us; 74us; 2us; 65535us; 19us; 20us; 60us; 61us; 2us; 65535us; 28us; 29us; 31us; 32us; 3us; 65535us; 19us; 28us; 30us; 31us; 60us; 28us; 4us; 65535us; 19us; 33us; 30us; 33us; 40us; 41us; 60us; 33us; 7us; 65535us; 19us; 34us; 30us; 34us; 45us; 64us; 51us; 64us; 60us; 34us; 66us; 64us; 68us; 64us; 2us; 65535us; 35us; 36us; 43us; 44us; 6us; 65535us; 19us; 35us; 30us; 35us; 35us; 43us; 40us; 35us; 43us; 43us; 60us; 35us; 6us; 65535us; 19us; 45us; 30us; 45us; 35us; 45us; 40us; 45us; 43us; 45us; 60us; 45us; 1us; 65535us; 46us; 47us; 1us; 65535us; 45us; 46us; 1us; 65535us; 45us; 50us; 4us; 65535us; 45us; 53us; 51us; 52us; 66us; 56us; 68us; 56us; 2us; 65535us; 66us; 66us; 68us; 66us; 2us; 65535us; 66us; 67us; 68us; 69us; 2us; 65535us; 54us; 73us; 72us; 73us; 4us; 65535us; 45us; 63us; 51us; 63us; 66us; 63us; 68us; 63us; 1us; 65535us; 18us; 19us; 2us; 65535us; 75us; 76us; 78us; 79us; 2us; 65535us; 75us; 77us; 78us; 77us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 11us; 15us; 19us; 21us; 24us; 27us; 30us; 33us; 37us; 42us; 50us; 53us; 60us; 67us; 69us; 71us; 73us; 78us; 81us; 84us; 87us; 92us; 94us; 97us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 4us; 7us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 11us; 1us; 11us; 1us; 11us; 2us; 13us; 14us; 1us; 14us; 1us; 15us; 2us; 17us; 18us; 1us; 18us; 2us; 19us; 20us; 2us; 19us; 20us; 1us; 19us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 29us; 1us; 31us; 1us; 33us; 1us; 33us; 4us; 33us; 37us; 38us; 39us; 4us; 34us; 37us; 38us; 39us; 2us; 35us; 50us; 1us; 36us; 4us; 37us; 38us; 39us; 44us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 40us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 2us; 45us; 46us; 1us; 46us; 1us; 48us; 1us; 48us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 50us; 1us; 50us; 1us; 51us; 1us; 51us; 2us; 53us; 54us; 1us; 54us; 1us; 54us; 1us; 55us; 1us; 55us; 1us; 55us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 17us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; 49us; 51us; 54us; 56us; 58us; 61us; 63us; 66us; 69us; 71us; 73us; 75us; 77us; 79us; 81us; 83us; 85us; 87us; 89us; 91us; 93us; 95us; 97us; 99us; 101us; 103us; 105us; 107us; 109us; 114us; 119us; 122us; 124us; 129us; 131us; 133us; 135us; 137us; 139us; 141us; 143us; 145us; 147us; 150us; 152us; 154us; 156us; 158us; 160us; 162us; 164us; 166us; 168us; 170us; 173us; 175us; 177us; 179us; 181us; |]
let _fsyacc_action_rows = 83
let _fsyacc_actionTableElements = [|1us; 16387us; 5us; 6us; 0us; 49152us; 3us; 16390us; 7us; 16394us; 10us; 10us; 19us; 21us; 1us; 16387us; 5us; 6us; 1us; 32768us; 26us; 5us; 0us; 16385us; 0us; 16386us; 2us; 32768us; 24us; 8us; 27us; 13us; 3us; 16390us; 7us; 16394us; 10us; 10us; 19us; 21us; 0us; 16388us; 1us; 32768us; 6us; 11us; 3us; 16390us; 7us; 16394us; 10us; 10us; 19us; 21us; 0us; 16389us; 0us; 16391us; 1us; 32768us; 7us; 15us; 1us; 16396us; 12us; 22us; 1us; 16400us; 3us; 27us; 1us; 32768us; 25us; 18us; 1us; 16436us; 9us; 75us; 3us; 16414us; 0us; 39us; 5us; 38us; 18us; 48us; 0us; 16392us; 0us; 16393us; 1us; 32768us; 7us; 25us; 1us; 32768us; 13us; 24us; 0us; 16395us; 1us; 16397us; 7us; 25us; 0us; 16398us; 0us; 16399us; 1us; 16401us; 21us; 30us; 0us; 16402us; 3us; 16414us; 0us; 39us; 5us; 38us; 18us; 48us; 1us; 16404us; 21us; 30us; 0us; 16403us; 0us; 16405us; 0us; 16406us; 7us; 16411us; 0us; 16414us; 2us; 16414us; 6us; 16414us; 7us; 16414us; 8us; 16414us; 15us; 16414us; 18us; 48us; 1us; 16387us; 5us; 6us; 0us; 16407us; 0us; 16408us; 1us; 32768us; 15us; 40us; 2us; 16414us; 5us; 38us; 18us; 48us; 1us; 32768us; 14us; 42us; 0us; 16409us; 7us; 16411us; 0us; 16414us; 2us; 16414us; 6us; 16414us; 7us; 16414us; 8us; 16414us; 15us; 16414us; 18us; 48us; 0us; 16410us; 6us; 32768us; 0us; 39us; 2us; 55us; 6us; 65us; 7us; 54us; 8us; 71us; 15us; 60us; 1us; 16416us; 4us; 49us; 0us; 16412us; 0us; 16413us; 0us; 16415us; 1us; 32768us; 22us; 51us; 5us; 32768us; 0us; 39us; 6us; 65us; 7us; 72us; 8us; 71us; 15us; 60us; 3us; 16417us; 17us; 59us; 19us; 58us; 20us; 57us; 3us; 16418us; 17us; 59us; 19us; 58us; 20us; 57us; 13us; 16431us; 1us; 16419us; 9us; 16419us; 10us; 16419us; 11us; 16419us; 12us; 68us; 13us; 16419us; 16us; 16419us; 22us; 16419us; 23us; 16419us; 25us; 16419us; 26us; 16419us; 28us; 16419us; 29us; 16419us; 0us; 16420us; 3us; 16428us; 17us; 59us; 19us; 58us; 20us; 57us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 3us; 16414us; 0us; 39us; 5us; 38us; 18us; 48us; 1us; 32768us; 14us; 62us; 0us; 16424us; 0us; 16425us; 0us; 16426us; 0us; 16427us; 5us; 16429us; 0us; 39us; 6us; 65us; 7us; 72us; 8us; 71us; 15us; 60us; 0us; 16430us; 5us; 32768us; 0us; 39us; 6us; 65us; 7us; 72us; 8us; 71us; 15us; 60us; 1us; 32768us; 13us; 70us; 0us; 16432us; 0us; 16433us; 1us; 16431us; 12us; 68us; 1us; 16400us; 3us; 27us; 0us; 16434us; 1us; 32768us; 7us; 80us; 0us; 16435us; 1us; 16437us; 23us; 78us; 1us; 32768us; 7us; 80us; 0us; 16438us; 1us; 32768us; 22us; 81us; 1us; 32768us; 6us; 82us; 0us; 16439us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 7us; 9us; 11us; 12us; 13us; 16us; 20us; 21us; 23us; 27us; 28us; 29us; 31us; 33us; 35us; 37us; 39us; 43us; 44us; 45us; 47us; 49us; 50us; 52us; 53us; 54us; 56us; 57us; 61us; 63us; 64us; 65us; 66us; 74us; 76us; 77us; 78us; 80us; 83us; 85us; 86us; 94us; 95us; 102us; 104us; 105us; 106us; 107us; 109us; 115us; 119us; 123us; 137us; 138us; 142us; 143us; 144us; 145us; 149us; 151us; 152us; 153us; 154us; 155us; 161us; 162us; 168us; 170us; 171us; 172us; 174us; 176us; 177us; 179us; 180us; 182us; 184us; 185us; 187us; 189us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 4us; 1us; 0us; 3us; 3us; 0us; 2us; 7us; 1us; 0us; 3us; 0us; 1us; 2us; 1us; 0us; 1us; 2us; 3us; 2us; 1us; 1us; 3us; 1us; 4us; 2us; 0us; 3us; 1us; 0us; 1us; 0us; 3us; 1us; 1us; 1us; 2us; 2us; 2us; 3us; 1us; 1us; 1us; 1us; 1us; 2us; 0us; 3us; 1us; 3us; 2us; 0us; 1us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 11us; 12us; 12us; 13us; 14us; 14us; 15us; 16us; 16us; 17us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 21us; 22us; 22us; 23us; 23us; 24us; 24us; 25us; 25us; 26us; 26us; 27us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 65535us; 16385us; 16386us; 65535us; 65535us; 16388us; 65535us; 65535us; 16389us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16392us; 16393us; 65535us; 65535us; 16395us; 65535us; 16398us; 16399us; 65535us; 16402us; 65535us; 65535us; 16403us; 16405us; 16406us; 65535us; 65535us; 16407us; 16408us; 65535us; 65535us; 65535us; 16409us; 65535us; 16410us; 65535us; 65535us; 16412us; 16413us; 16415us; 65535us; 65535us; 65535us; 65535us; 65535us; 16420us; 65535us; 16421us; 16422us; 16423us; 65535us; 65535us; 16424us; 16425us; 16426us; 16427us; 65535us; 16430us; 65535us; 65535us; 16432us; 16433us; 65535us; 65535us; 16434us; 65535us; 16435us; 65535us; 65535us; 16438us; 65535us; 65535us; 16439us; |]
let _fsyacc_reductions ()  =    [| 
# 367 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : (IL.Source.t, IL.Source.t)IL.Definition.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startfile));
# 376 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'action_opt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'rule_nlist)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'action_opt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                             
                             { Definition.empty with
                                 Definition.info = { fileName = !currentFilename }
                                 ; Definition.head = _1
                                 ; Definition.grammar = (fst _2)
                                 ; Definition.foot = _3
                                 ; Definition.options = (snd _2)
                             }
                           
                   )
# 101 "Parser.fsy"
                 : (IL.Source.t, IL.Source.t)IL.Definition.t));
# 397 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : IL.Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                          Some _1 
                   )
# 111 "Parser.fsy"
                 : 'action_opt));
# 408 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                                               None 
                   )
# 112 "Parser.fsy"
                 : 'action_opt));
# 418 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rule)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Range)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'rule_nlist)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                               ((fst _1) :: (fst _3), joinMaps (snd _1) (snd _3)) 
                   )
# 115 "Parser.fsy"
                 : 'rule_nlist));
# 431 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : IL.Source.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'rule_nlist)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                               let def = parseRules (fst _2) in
                               (def.grammar @ (fst _3), joinMaps def.options (snd _3)) 
                             
                   )
# 117 "Parser.fsy"
                 : 'rule_nlist));
# 445 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                             ([], Map.empty) 
                   )
# 120 "Parser.fsy"
                 : 'rule_nlist));
# 455 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                        missing "SEMI"; raise Parse_error  
                   )
# 121 "Parser.fsy"
                 : 'rule_nlist));
# 466 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'plus_opt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : IL.Source.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'formal_meta_param_opt)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'param_opt)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'option_opt)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'alts)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                             
                             let newRule = {Rule._public = _1
                                             ; Rule.name = Source.toString _2
                                             ; Rule.metaArgs = getList _3
                                             ; Rule.body = _7
                                             ; Rule.args = o2l _4
                                             }
                             in
                             match _6 with
                             | Some m ->
                                 (newRule, Map.empty.Add (newRule, m))
                             | None ->
                                 (newRule, Map.empty)
                            
                   )
# 124 "Parser.fsy"
                 : 'rule));
# 495 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                                          true
                   )
# 139 "Parser.fsy"
                 : 'plus_opt));
# 505 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                          false
                   )
# 140 "Parser.fsy"
                 : 'plus_opt));
# 515 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'formal_meta_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "Parser.fsy"
                                                                           Some _2
                   )
# 142 "Parser.fsy"
                 : 'formal_meta_param_opt));
# 526 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "Parser.fsy"
                                                         None
                   )
# 143 "Parser.fsy"
                 : 'formal_meta_param_opt));
# 536 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : IL.Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                               [_1]
                   )
# 145 "Parser.fsy"
                 : 'formal_meta_list));
# 547 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : IL.Source.t)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'formal_meta_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "Parser.fsy"
                                                                _1::_2
                   )
# 146 "Parser.fsy"
                 : 'formal_meta_list));
# 559 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : IL.Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "Parser.fsy"
                                       Some _1
                   )
# 148 "Parser.fsy"
                 : 'param_opt));
# 570 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "Parser.fsy"
                                                               None
                   )
# 148 "Parser.fsy"
                 : 'param_opt));
# 580 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                 _1 
                   )
# 150 "Parser.fsy"
                 : 'alts));
# 591 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'bar_seq_nlist)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                                           PAlt (_1,_2)
                   )
# 150 "Parser.fsy"
                 : 'alts));
# 603 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bar_seq_nlist)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "Parser.fsy"
                                                            PAlt(_2,_3)
                   )
# 152 "Parser.fsy"
                 : 'bar_seq_nlist));
# 615 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "Parser.fsy"
                                              _2
                   )
# 153 "Parser.fsy"
                 : 'bar_seq_nlist));
# 626 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'no_lbl_seq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                      _1
                   )
# 155 "Parser.fsy"
                 : 'seq));
# 637 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lbl_seq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                                     _1
                   )
# 155 "Parser.fsy"
                 : 'seq));
# 648 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq_elem)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq_elem_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'action_opt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "Parser.fsy"
                                                                     PSeq (_1::_2, _3, None) 
                   )
# 157 "Parser.fsy"
                 : 'no_lbl_seq));
# 661 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : IL.Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsy"
                                  PSeq([],Some _1, None)
                   )
# 158 "Parser.fsy"
                 : 'no_lbl_seq));
# 672 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : IL.Source.t)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Range)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'no_lbl_seq)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Range)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                                                               makeNewSeq _3 _1
                   )
# 160 "Parser.fsy"
                 : 'lbl_seq));
# 686 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq_elem)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'seq_elem_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                                                            _1::_2
                   )
# 162 "Parser.fsy"
                 : 'seq_elem_list));
# 698 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                                 []
                   )
# 163 "Parser.fsy"
                 : 'seq_elem_list));
# 708 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'omit_opt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'bound)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'predicate_opt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "Parser.fsy"
                                                             {_2 with checker = _3; omit = _1 }
                   )
# 165 "Parser.fsy"
                 : 'seq_elem));
# 721 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                       true 
                   )
# 167 "Parser.fsy"
                 : 'omit_opt));
# 731 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                                            false 
                   )
# 167 "Parser.fsy"
                 : 'omit_opt));
# 741 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : IL.Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "Parser.fsy"
                                                  Some _1 
                   )
# 169 "Parser.fsy"
                 : 'predicate_opt));
# 752 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "Parser.fsy"
                                                  None    
                   )
# 170 "Parser.fsy"
                 : 'predicate_opt));
# 762 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'patt)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'prim)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "Parser.fsy"
                                              createSeqElem (Some _1) false _3 None 
                   )
# 172 "Parser.fsy"
                 : 'bound));
# 774 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prim)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "Parser.fsy"
                                              createSeqElem None false _1 None      
                   )
# 173 "Parser.fsy"
                 : 'bound));
# 785 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : IL.Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "Parser.fsy"
                                   _1
                   )
# 175 "Parser.fsy"
                 : 'patt));
# 796 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : IL.Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "Parser.fsy"
                                                  _1
                   )
# 175 "Parser.fsy"
                 : 'patt));
# 807 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prim)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "Parser.fsy"
                                                PMany _1
                   )
# 177 "Parser.fsy"
                 : 'prim));
# 818 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prim)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "Parser.fsy"
                                                PSome _1
                   )
# 178 "Parser.fsy"
                 : 'prim));
# 829 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prim)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "Parser.fsy"
                                                POpt _1
                   )
# 179 "Parser.fsy"
                 : 'prim));
# 840 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Range)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'alts)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Range)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "Parser.fsy"
                                                _2
                   )
# 180 "Parser.fsy"
                 : 'prim));
# 853 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'call)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "Parser.fsy"
                                                _1
                   )
# 181 "Parser.fsy"
                 : 'prim));
# 864 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lbl_seq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "Parser.fsy"
                                             _1
                   )
# 182 "Parser.fsy"
                 : 'prim));
# 875 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : IL.Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "Parser.fsy"
                                                PLiteral _1
                   )
# 183 "Parser.fsy"
                 : 'prim));
# 886 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prim)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "Parser.fsy"
                                       _1
                   )
# 185 "Parser.fsy"
                 : 'meta_param));
# 897 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'meta_param)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "Parser.fsy"
                                              [_1]
                   )
# 187 "Parser.fsy"
                 : 'meta_params));
# 908 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'meta_param)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'meta_params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "Parser.fsy"
                                                          _1 :: _2
                   )
# 188 "Parser.fsy"
                 : 'meta_params));
# 920 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "Parser.fsy"
                                                  None
                   )
# 190 "Parser.fsy"
                 : 'meta_param_opt));
# 930 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'meta_params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "Parser.fsy"
                                                               Some _2
                   )
# 191 "Parser.fsy"
                 : 'meta_param_opt));
# 941 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : IL.Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "Parser.fsy"
                                               PToken _1
                   )
# 193 "Parser.fsy"
                 : 'call));
# 952 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : IL.Source.t)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'meta_param_opt)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'param_opt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "Parser.fsy"
                             match _2 with
                             None -> PRef  (_1, _3)
                             | Some x -> PMetaRef (_1,_3,x)
                           
                   )
# 195 "Parser.fsy"
                 : 'call));
# 968 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'option_params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "Parser.fsy"
                                                     Some _2 
                   )
# 200 "Parser.fsy"
                 : 'option_opt));
# 979 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "Parser.fsy"
                                         None 
                   )
# 201 "Parser.fsy"
                 : 'option_opt));
# 989 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'option_param)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "Parser.fsy"
                                                   Map.empty.Add _1
                   )
# 203 "Parser.fsy"
                 : 'option_params));
# 1000 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'option_param)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'option_params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "Parser.fsy"
                                                             (_3).Add _1
                   )
# 204 "Parser.fsy"
                 : 'option_params));
# 1012 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : IL.Source.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : IL.Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 206 "Parser.fsy"
                                                         (Source.toString _1, Source.toString _3) 
                   )
# 206 "Parser.fsy"
                 : 'option_param));
|]
# 1025 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 30;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let file lexer lexbuf : (IL.Source.t, IL.Source.t)IL.Definition.t =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
