//this file was generated by RACC
//source grammar:W:\Users\gsv2\Diploma\trunk\Tests\RACC\test_summator_2\\test_summator_2.yrd
//date:12/8/2010 15:37:41

module RACC.Actions

open Yard.Generators.RACCGenerator

let value x =
    ((x:>Lexeme<string>).value)

let s0 expr = 
    match expr with
    | RESeq [x0] -> 
        let (res) =
            let yardElemAction expr = 
                match expr with
                | RELeaf e -> e :?> 'a

            yardElemAction(x0)
        box (res)

let e1 expr = 
    match expr with
    | REAlt(Some(x), None) -> 
        let yardLAltAction expr = 
            match expr with
            | RESeq [x0] -> 
                let (n) =
                    let yardElemAction expr = 
                        match expr with
                        | RELeaf NUMBER -> NUMBER :?> 'a

                    yardElemAction(x0)
                box (value n |> int)

        yardLAltAction x 
    | REAlt(None, Some(x)) -> 
        let yardRAltAction expr = 
            match expr with
            | RESeq [x0; _; x1] -> 
                let (e1) =
                    let yardElemAction expr = 
                        match expr with
                        | RELeaf e -> e :?> 'a

                    yardElemAction(x0)

                let (e2) =
                    let yardElemAction expr = 
                        match expr with
                        | RELeaf e -> e :?> 'a

                    yardElemAction(x1)
                box (e1 + e2)

        yardRAltAction x 


let ruleToAction = dict [|("e",e1); ("s",s0)|]

