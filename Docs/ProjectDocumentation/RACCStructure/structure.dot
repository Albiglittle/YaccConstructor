digraph RACCStructure
{        
        subgraph cluster_Help
        {
                x1 [shape = none, label = "A"];
                x2 [shape = none, label = "B"];
                x1 -> x2 [style = dotted, label = " A used in B"];
                x3 [shape = none, label = "A"];
                x4 [shape = none, label = "B"];
//                x5 [shape = none, label = "A"];
                x3 -> x4 [label = " A call B"];                
        }
        
        InputGrammar [shape = note];
        f_ActionCode [shape = note, label = "ActionCode.fs"];
        f_Tables [shape = note, label = "Tables.fs"];
        //v_ASTTree1 [shape = note, label = "ParseTree"];
        //v_ASTTree2 [shape = note, label = "ParseTree"];

        subgraph cluster_UserApplication
        {
                label="UserApplication";
                Tables;
                ActionCode;
                Driver;
                Lexer;
                Tables -> Driver;                      
                ActionCode -> Driver;
                Lexer -> Driver;
        }

        ILexer -> Lexer;
        Driver -> Parser;
        Driver -> ASTInterpretator;
        
        subgraph cluster_Generator
        {
                label="Generator";                
                TablesGenerator;

                subgraph cluster_g_Driver
                {
                        label = "module Driver";
                        Generate [label = "Generate:(IL.Grammar:unit)"];
                        generateCode;
                        generateTables;
                        Generate -> generateCode;
                        Generate -> generateTables;
                }
                
                CodeGenerator;
                RuleToLDFA;
                generateCode -> CodeGenerator;
                generateTables -> TablesGenerator;
                TablesGenerator -> RuleToLDFA;
        }
        
        TablesGenerator -> f_Tables
        InputGrammar -> Generate;
        RuleToLDFA -> NLFAToDLFA;        
        CodeGenerator -> f_ActionCode;
        f_ActionCode -> ActionCode;
        f_Tables -> Tables

        subgraph cluster_Core
        {
                label="Core";
                Parser;
                ASTInterpretator; 
                TableInterpretator;
                subgraph cluster_AST
                {
                        label = "module AST"
                        AST;
                }
                
                
                AST -> ASTInterpretator [style = dotted];
                Parser -> TableInterpretator
        }

        ILexer -> Parser;
        
        subgraph cluster_Common
        {
                label="Common";

                subgraph cluster_ILexer
                {
                        label = "module ILexer";
                        ILexer [  shape = record
                                , label = "{<title> type ILexer | <next> Next:(unit:Lexeme(_))}"];
                        Lexeme [  shape = record
                                , label = "{<title> type Lexeme('a) | <l_name>  name:string | <value>  value:'a}"];
                        Lexeme:title -> ILexer:next [style = dotted];
                }                
        }
        
        subgraph cluster_FALib
        {
                label="Finite Automate Lib";


/*subgraph cluster_FA
{
label = "module FA";
}*/
                subgraph cluster_Rule
                {
                        label = "Rule"
                        Rule[  shape = record
                             , label = "{<title> type Rule('symbol, 'label) | <from>  FromStateID:int | <symbol>  Symbol('symbol) | <label>  Label('label) | <to> ToStateID:int}"];
                }

                subgraph cluster_NLFA
                {
                        label = "module NLFA";
                        NLFA [  shape = record
                              , label = "{ <title> type NLFA('state, 'symbol, 'label) | <IDToStateMap>  IDToStateMap:dict(int,'state) | <startStatesSet>  StartStatesSet:set(int) | <finaleStatesSet>  FinaleStatesSet:set(int) | <rulesList>  RulesList:List(Rule('symbol, 'label))}"];
                }
                
                Rule -> NLFA:rulesList [style = dotted];

                subgraph cluster_DLFA
                {
                        label = "module DLFA";
                        DLFA [  shape = record
                              , label = "{ <title> type DLFA('a) | <IDToStateMap>  IDToStateMap:dict(int,'a) | <startState>  StartState:int | <finaleStatesSet>  FinaleStatesSet:set(int) | <rulesList>  RulesList:List(Rule)}"];
                }

                Rule -> DLFA:rulesList [style = dotted];

                subgraph cluster_NLFAToDLFA
                {
                        label = "module NLFAToDLFA";
                        NLFAToDLFA [label = "NLFAToDLFA:(NLFA:DLFA)"];
                }

                NLFA -> NLFAToDLFA [style = dotted];
                DLFA -> NLFAToDLFA [style = dotted];
        }

}
