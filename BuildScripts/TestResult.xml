<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="C:\gsv\projects\recursive-ascent\Bin\Release\v40\AbstractLexer.Test.dll" total="132" errors="64" failures="41" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2014-09-25" time="15:52:09">
  <environment nunit-version="2.6.3.13283" clr-version="2.0.50727.8009" os-version="Microsoft Windows NT 6.2.9200.0" platform="Win32NT" cwd="C:\gsv\projects\recursive-ascent\BuildScripts" machine-name="UNIT-641" user="User" user-domain="UNIT-641" />
  <culture-info current-culture="en-GB" current-uiculture="en-GB" />
  <test-suite type="Test Project" name="" executed="True" result="Failure" success="False" time="7.575" asserts="0">
    <results>
      <test-suite type="Assembly" name="C:\gsv\projects\recursive-ascent\Bin\Release\v40\AbstractLexer.Test.dll" executed="True" result="Failure" success="False" time="0.423" asserts="0">
        <results>
          <test-suite type="Namespace" name="AbstractFsLex" executed="True" result="Failure" success="False" time="0.411" asserts="0">
            <results>
              <test-suite type="TestFixture" name="Test+Abstract lexer tests" executed="True" result="Failure" success="False" time="0.409" asserts="0">
                <results>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Calc with braces 2." executed="True" result="Error" success="False" time="0.024" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Calc with braces." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Calc. Branched binop or negation." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Calc. Branched binop." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Calc. Branched multy-digit numbers sum 1." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Calc. Branched multy-digit numbers sum 2." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Calc. Branched multy-digit numbers with Binop." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Calc. Branched multy-digit numbers." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Calc. Complex 0" executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Calc. Complex branched 1." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Calc. Complex branched 2." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Calc. Complex branched 3." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Calc. Epsilon edge 1." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Calc. Epsilon edge 2." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Calc. Simple number." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.Calc. Simple number.()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Calc. Simple sum." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Calc. Simple sum. Check back refs." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.Calc. Simple sum. Check back refs.()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Calc. Start from PLUS." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Calc. test 100" executed="True" result="Error" success="False" time="0.002" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.Calc. test 100()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Calc. Two-digit numbers sum." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Calc. Two-digit numbers sum. Check back refs." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.Calc. Two-digit numbers sum. Check back refs.()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Check break literals 1." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Check break literals 2." executed="True" result="Error" success="False" time="0.003" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.Check break literals 2.()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Check break literals 3." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.Check break literals 3.()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Eps_closure_1." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Eps_closure_2." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Eps_closure_3." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Eps_closure_4." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Eps_closure_5." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.Eps_closure_5.()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Example with eps." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Literals. Inner branch." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.literalsTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Literals. Outer branch." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.literalsTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Literals. Simple." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.literalsTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Literals. Splitted." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.literalsTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Load graph test from DOT" executed="True" result="Success" success="True" time="0.247" asserts="2" />
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Load graph test from DOT to lexer inner graph" executed="True" result="Error" success="False" time="0.003" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'Void AbstractAnalysis.Common.LexerEdge`2..ctor(Int32, Int32, Microsoft.FSharp.Core.FSharpOption`1<System.Tuple`2<!0,!1>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.loadLexerInputGraph(String gFile)
at AbstractFsLex.Test.Abstract lexer tests.Load graph test from DOT to lexer inner graph() in C:\gsv\projects\recursive-ascent\src\AbstractLexer.Test\AbstractLexerTests.fs:line 111
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Load graph test from DOT to lexer input graph" executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'Void AbstractAnalysis.Common.LexerEdge`2..ctor(Int32, Int32, Microsoft.FSharp.Core.FSharpOption`1<System.Tuple`2<!0,!1>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.Load graph test from DOT to lexer input graph()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Load graph test from DOT to QuickGraph" executed="True" result="Success" success="True" time="0.018" asserts="2" />
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Multi-digit with branch." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.Multi-digit with branch.()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Positions. Simple binop." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.Positions. Simple binop.()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Print info on edges." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.Print info on edges.()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Test with position." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.Test with position.()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Test with position. Ident and plus on edgs with branch" executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.Test with position. Ident and plus on edgs with branch()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Test with position. Ident on edgs with branch" executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.Test with position. Ident on edgs with branch()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Test with position. Ident on edgs with branch in begin." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.Test with position. Ident on edgs with branch in begin.()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Test with position. Ident on edgs with branch in begin_1." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.Test with position. Ident on edgs with branch in begin_1.()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Test with position. Ident on two edgs" executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.Test with position. Ident on two edgs()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Test with position. Several tokens on the one edge" executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.Test with position. Several tokens on the one edge()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Test with position. Two tokens on the one edge." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.Test with position. Two tokens on the one edge.()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Test with position. With branch and several tokens on the one edge" executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.Test with position. With branch and several tokens on the one edge()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Test with space and idents on edge." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="AbstractFsLex.Test+Abstract lexer tests.Test with space with branch." executed="True" result="Error" success="False" time="0.001" asserts="0">
                    <failure>
                      <message><![CDATA[System.MissingMethodException : Method not found: 'AbstractAnalysis.Common.ParserInputGraph`1<!!1> AbstractLexer.Core.UnicodeTables.Tokenize(Microsoft.FSharp.Core.FSharpFunc`2<Int32,Microsoft.FSharp.Core.FSharpFunc`2<System.String,Microsoft.FSharp.Core.FSharpFunc`2<AbstractLexer.Core.Position`1<!!0>[],Microsoft.FSharp.Core.FSharpOption`1<!!1>>>>, AbstractAnalysis.Common.LexerInputGraph`1<!!0>, !!1, Microsoft.FSharp.Core.FSharpOption`1<Microsoft.FSharp.Core.FSharpFunc`2<!!2,Microsoft.FSharp.Core.FSharpFunc`2<!!3,Microsoft.FSharp.Core.Unit>>>)'.]]></message>
                      <stack-trace><![CDATA[at AbstractFsLex.Test.Abstract lexer tests.calcTokenizationTest(String path, Int32 eCount, Int32 vCount)
]]></stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Assembly" name="C:\gsv\projects\recursive-ascent\Bin\Release\v40\YC.Common.Test.dll" executed="True" result="Failure" success="False" time="0.625" asserts="0">
        <results>
          <test-suite type="TestFixture" name="CommonTests+Checker test" executed="True" result="Failure" success="False" time="0.160" asserts="0">
            <results>
              <test-case name="CommonTests+Checker test.Metarules arguments count." executed="True" result="Error" success="False" time="0.072" asserts="0">
                <failure>
                  <message><![CDATA[System.TypeInitializationException : The type initializer for 'Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.TypeInitializationException : The type initializer for '<StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.IO.FileNotFoundException : Could not load file or assembly 'RNGLRCommon, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                  <stack-trace><![CDATA[at Yard.Frontends.YardFrontend.GrammarParser.get_parseFile()
at Yard.Frontends.YardFrontend.Main.ParseFile(String args) in C:\gsv\projects\recursive-ascent\src\YardFrontend\Main.fs:line 192
at Yard.Frontends.YardFrontend.YardFrontend.ParseGrammar(Object t) in C:\gsv\projects\recursive-ascent\src\YardFrontend\YardFrontend.fs:line 30
at CommonTests.Checker test.Metarules arguments count.() in C:\gsv\projects\recursive-ascent\src\Common.Test\CommonTests.fs:line 207
--TypeInitializationException
at Yard.Frontends.YardFrontend.GrammarParser..cctor() in C:\gsv\projects\recursive-ascent\src\YardFrontend\Parser.fsy:line 0
--FileNotFoundException
at <StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser..cctor()
]]></stack-trace>
                </failure>
              </test-case>
              <test-case name="CommonTests+Checker test.Single start rule. No start rule." executed="True" result="Error" success="False" time="0.001" asserts="0">
                <failure>
                  <message><![CDATA[System.TypeInitializationException : The type initializer for 'Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.TypeInitializationException : The type initializer for '<StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.IO.FileNotFoundException : Could not load file or assembly 'RNGLRCommon, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                  <stack-trace><![CDATA[at Yard.Frontends.YardFrontend.GrammarParser.get_parseFile()
at Yard.Frontends.YardFrontend.Main.ParseFile(String args) in C:\gsv\projects\recursive-ascent\src\YardFrontend\Main.fs:line 192
at Yard.Frontends.YardFrontend.YardFrontend.ParseGrammar(Object t) in C:\gsv\projects\recursive-ascent\src\YardFrontend\YardFrontend.fs:line 30
at CommonTests.Checker test.Single start rule. No start rule.() in C:\gsv\projects\recursive-ascent\src\Common.Test\CommonTests.fs:line 126
--TypeInitializationException
at Yard.Frontends.YardFrontend.GrammarParser..cctor() in C:\gsv\projects\recursive-ascent\src\YardFrontend\Parser.fsy:line 0
--FileNotFoundException
at <StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser..cctor()
]]></stack-trace>
                </failure>
              </test-case>
              <test-case name="CommonTests+Checker test.Single start rule. One start rule." executed="True" result="Error" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[System.TypeInitializationException : The type initializer for 'Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.TypeInitializationException : The type initializer for '<StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.IO.FileNotFoundException : Could not load file or assembly 'RNGLRCommon, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                  <stack-trace><![CDATA[at Yard.Frontends.YardFrontend.GrammarParser.get_parseFile()
at Yard.Frontends.YardFrontend.Main.ParseFile(String args) in C:\gsv\projects\recursive-ascent\src\YardFrontend\Main.fs:line 192
at Yard.Frontends.YardFrontend.YardFrontend.ParseGrammar(Object t) in C:\gsv\projects\recursive-ascent\src\YardFrontend\YardFrontend.fs:line 30
at CommonTests.Checker test.Single start rule. One start rule.() in C:\gsv\projects\recursive-ascent\src\Common.Test\CommonTests.fs:line 133
--TypeInitializationException
at Yard.Frontends.YardFrontend.GrammarParser..cctor() in C:\gsv\projects\recursive-ascent\src\YardFrontend\Parser.fsy:line 0
--FileNotFoundException
at <StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser..cctor()
]]></stack-trace>
                </failure>
              </test-case>
              <test-case name="CommonTests+Checker test.Single start rule. Two start rules." executed="True" result="Error" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[System.TypeInitializationException : The type initializer for 'Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.TypeInitializationException : The type initializer for '<StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.IO.FileNotFoundException : Could not load file or assembly 'RNGLRCommon, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                  <stack-trace><![CDATA[at Yard.Frontends.YardFrontend.GrammarParser.get_parseFile()
at Yard.Frontends.YardFrontend.Main.ParseFile(String args) in C:\gsv\projects\recursive-ascent\src\YardFrontend\Main.fs:line 192
at Yard.Frontends.YardFrontend.YardFrontend.ParseGrammar(Object t) in C:\gsv\projects\recursive-ascent\src\YardFrontend\YardFrontend.fs:line 30
at CommonTests.Checker test.Single start rule. Two start rules.() in C:\gsv\projects\recursive-ascent\src\Common.Test\CommonTests.fs:line 140
--TypeInitializationException
at Yard.Frontends.YardFrontend.GrammarParser..cctor() in C:\gsv\projects\recursive-ascent\src\YardFrontend\Parser.fsy:line 0
--FileNotFoundException
at <StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser..cctor()
]]></stack-trace>
                </failure>
              </test-case>
              <test-case name="CommonTests+Checker test.Start rule exists. No start rule." executed="True" result="Error" success="False" time="0.001" asserts="0">
                <failure>
                  <message><![CDATA[System.TypeInitializationException : The type initializer for 'Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.TypeInitializationException : The type initializer for '<StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.IO.FileNotFoundException : Could not load file or assembly 'RNGLRCommon, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                  <stack-trace><![CDATA[at Yard.Frontends.YardFrontend.GrammarParser.get_parseFile()
at Yard.Frontends.YardFrontend.Main.ParseFile(String args) in C:\gsv\projects\recursive-ascent\src\YardFrontend\Main.fs:line 192
at Yard.Frontends.YardFrontend.YardFrontend.ParseGrammar(Object t) in C:\gsv\projects\recursive-ascent\src\YardFrontend\YardFrontend.fs:line 30
at CommonTests.Checker test.Start rule exists. No start rule.() in C:\gsv\projects\recursive-ascent\src\Common.Test\CommonTests.fs:line 105
--TypeInitializationException
at Yard.Frontends.YardFrontend.GrammarParser..cctor() in C:\gsv\projects\recursive-ascent\src\YardFrontend\Parser.fsy:line 0
--FileNotFoundException
at <StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser..cctor()
]]></stack-trace>
                </failure>
              </test-case>
              <test-case name="CommonTests+Checker test.Start rule exists. One start rule." executed="True" result="Error" success="False" time="0.001" asserts="0">
                <failure>
                  <message><![CDATA[System.TypeInitializationException : The type initializer for 'Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.TypeInitializationException : The type initializer for '<StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.IO.FileNotFoundException : Could not load file or assembly 'RNGLRCommon, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                  <stack-trace><![CDATA[at Yard.Frontends.YardFrontend.GrammarParser.get_parseFile()
at Yard.Frontends.YardFrontend.Main.ParseFile(String args) in C:\gsv\projects\recursive-ascent\src\YardFrontend\Main.fs:line 192
at Yard.Frontends.YardFrontend.YardFrontend.ParseGrammar(Object t) in C:\gsv\projects\recursive-ascent\src\YardFrontend\YardFrontend.fs:line 30
at CommonTests.Checker test.Start rule exists. One start rule.() in C:\gsv\projects\recursive-ascent\src\Common.Test\CommonTests.fs:line 112
--TypeInitializationException
at Yard.Frontends.YardFrontend.GrammarParser..cctor() in C:\gsv\projects\recursive-ascent\src\YardFrontend\Parser.fsy:line 0
--FileNotFoundException
at <StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser..cctor()
]]></stack-trace>
                </failure>
              </test-case>
              <test-case name="CommonTests+Checker test.Start rule exists. Two start rules." executed="True" result="Error" success="False" time="0.001" asserts="0">
                <failure>
                  <message><![CDATA[System.TypeInitializationException : The type initializer for 'Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.TypeInitializationException : The type initializer for '<StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.IO.FileNotFoundException : Could not load file or assembly 'RNGLRCommon, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                  <stack-trace><![CDATA[at Yard.Frontends.YardFrontend.GrammarParser.get_parseFile()
at Yard.Frontends.YardFrontend.Main.ParseFile(String args) in C:\gsv\projects\recursive-ascent\src\YardFrontend\Main.fs:line 192
at Yard.Frontends.YardFrontend.YardFrontend.ParseGrammar(Object t) in C:\gsv\projects\recursive-ascent\src\YardFrontend\YardFrontend.fs:line 30
at CommonTests.Checker test.Start rule exists. Two start rules.() in C:\gsv\projects\recursive-ascent\src\Common.Test\CommonTests.fs:line 119
--TypeInitializationException
at Yard.Frontends.YardFrontend.GrammarParser..cctor() in C:\gsv\projects\recursive-ascent\src\YardFrontend\Parser.fsy:line 0
--FileNotFoundException
at <StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser..cctor()
]]></stack-trace>
                </failure>
              </test-case>
              <test-case name="CommonTests+Checker test.Undeclared nonterminals checker. Metarules. Right grammar." executed="True" result="Error" success="False" time="0.010" asserts="0">
                <failure>
                  <message><![CDATA[System.TypeInitializationException : The type initializer for 'Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.TypeInitializationException : The type initializer for '<StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.IO.FileNotFoundException : Could not load file or assembly 'RNGLRCommon, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                  <stack-trace><![CDATA[at Yard.Frontends.YardFrontend.GrammarParser.get_parseFile()
at Yard.Frontends.YardFrontend.Main.ParseFile(String args) in C:\gsv\projects\recursive-ascent\src\YardFrontend\Main.fs:line 192
at Yard.Frontends.YardFrontend.YardFrontend.ParseGrammar(Object t) in C:\gsv\projects\recursive-ascent\src\YardFrontend\YardFrontend.fs:line 30
at CommonTests.Checker test.getUndecl[a](a path) in C:\gsv\projects\recursive-ascent\src\Common.Test\CommonTests.fs:line 94
at CommonTests.Checker test.Undeclared nonterminals checker. Metarules. Right grammar.() in C:\gsv\projects\recursive-ascent\src\Common.Test\CommonTests.fs:line 147
--TypeInitializationException
at Yard.Frontends.YardFrontend.GrammarParser..cctor() in C:\gsv\projects\recursive-ascent\src\YardFrontend\Parser.fsy:line 0
--FileNotFoundException
at <StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser..cctor()
]]></stack-trace>
                </failure>
              </test-case>
              <test-case name="CommonTests+Checker test.Undeclared nonterminals checker. Metarules. Wrong grammar." executed="True" result="Error" success="False" time="0.004" asserts="0">
                <failure>
                  <message><![CDATA[System.TypeInitializationException : The type initializer for 'Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.TypeInitializationException : The type initializer for '<StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.IO.FileNotFoundException : Could not load file or assembly 'RNGLRCommon, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                  <stack-trace><![CDATA[at Yard.Frontends.YardFrontend.GrammarParser.get_parseFile()
at Yard.Frontends.YardFrontend.Main.ParseFile(String args) in C:\gsv\projects\recursive-ascent\src\YardFrontend\Main.fs:line 192
at Yard.Frontends.YardFrontend.YardFrontend.ParseGrammar(Object t) in C:\gsv\projects\recursive-ascent\src\YardFrontend\YardFrontend.fs:line 30
at CommonTests.Checker test.getUndecl[a](a path) in C:\gsv\projects\recursive-ascent\src\Common.Test\CommonTests.fs:line 94
at CommonTests.Checker test.Undeclared nonterminals checker. Metarules. Wrong grammar.() in C:\gsv\projects\recursive-ascent\src\Common.Test\CommonTests.fs:line 158
--TypeInitializationException
at Yard.Frontends.YardFrontend.GrammarParser..cctor() in C:\gsv\projects\recursive-ascent\src\YardFrontend\Parser.fsy:line 0
--FileNotFoundException
at <StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser..cctor()
]]></stack-trace>
                </failure>
              </test-case>
              <test-case name="CommonTests+Checker test.Undeclared nonterminals checker. Simple. Right grammar." executed="True" result="Error" success="False" time="0.002" asserts="0">
                <failure>
                  <message><![CDATA[System.TypeInitializationException : The type initializer for 'Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.TypeInitializationException : The type initializer for '<StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.IO.FileNotFoundException : Could not load file or assembly 'RNGLRCommon, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                  <stack-trace><![CDATA[at Yard.Frontends.YardFrontend.GrammarParser.get_parseFile()
at Yard.Frontends.YardFrontend.Main.ParseFile(String args) in C:\gsv\projects\recursive-ascent\src\YardFrontend\Main.fs:line 192
at Yard.Frontends.YardFrontend.YardFrontend.ParseGrammar(Object t) in C:\gsv\projects\recursive-ascent\src\YardFrontend\YardFrontend.fs:line 30
at CommonTests.Checker test.getUndecl[a](a path) in C:\gsv\projects\recursive-ascent\src\Common.Test\CommonTests.fs:line 94
at CommonTests.Checker test.Undeclared nonterminals checker. Simple. Right grammar.() in C:\gsv\projects\recursive-ascent\src\Common.Test\CommonTests.fs:line 170
--TypeInitializationException
at Yard.Frontends.YardFrontend.GrammarParser..cctor() in C:\gsv\projects\recursive-ascent\src\YardFrontend\Parser.fsy:line 0
--FileNotFoundException
at <StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser..cctor()
]]></stack-trace>
                </failure>
              </test-case>
              <test-case name="CommonTests+Checker test.Undeclared nonterminals checker. Simple. Wrong grammar." executed="True" result="Error" success="False" time="0.002" asserts="0">
                <failure>
                  <message><![CDATA[System.TypeInitializationException : The type initializer for 'Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.TypeInitializationException : The type initializer for '<StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.IO.FileNotFoundException : Could not load file or assembly 'RNGLRCommon, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                  <stack-trace><![CDATA[at Yard.Frontends.YardFrontend.GrammarParser.get_parseFile()
at Yard.Frontends.YardFrontend.Main.ParseFile(String args) in C:\gsv\projects\recursive-ascent\src\YardFrontend\Main.fs:line 192
at Yard.Frontends.YardFrontend.YardFrontend.ParseGrammar(Object t) in C:\gsv\projects\recursive-ascent\src\YardFrontend\YardFrontend.fs:line 30
at CommonTests.Checker test.getUndecl[a](a path) in C:\gsv\projects\recursive-ascent\src\Common.Test\CommonTests.fs:line 94
at CommonTests.Checker test.Undeclared nonterminals checker. Simple. Wrong grammar.() in C:\gsv\projects\recursive-ascent\src\Common.Test\CommonTests.fs:line 181
--TypeInitializationException
at Yard.Frontends.YardFrontend.GrammarParser..cctor() in C:\gsv\projects\recursive-ascent\src\YardFrontend\Parser.fsy:line 0
--FileNotFoundException
at <StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser..cctor()
]]></stack-trace>
                </failure>
              </test-case>
              <test-case name="CommonTests+Checker test.Unused nonterminals checker. Metarules. Right grammar." executed="True" result="Error" success="False" time="0.002" asserts="0">
                <failure>
                  <message><![CDATA[System.TypeInitializationException : The type initializer for 'Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.TypeInitializationException : The type initializer for '<StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.IO.FileNotFoundException : Could not load file or assembly 'RNGLRCommon, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                  <stack-trace><![CDATA[at Yard.Frontends.YardFrontend.GrammarParser.get_parseFile()
at Yard.Frontends.YardFrontend.Main.ParseFile(String args) in C:\gsv\projects\recursive-ascent\src\YardFrontend\Main.fs:line 192
at Yard.Frontends.YardFrontend.YardFrontend.ParseGrammar(Object t) in C:\gsv\projects\recursive-ascent\src\YardFrontend\YardFrontend.fs:line 30
at CommonTests.Checker test.Unused nonterminals checker. Metarules. Right grammar.() in C:\gsv\projects\recursive-ascent\src\Common.Test\CommonTests.fs:line 192
--TypeInitializationException
at Yard.Frontends.YardFrontend.GrammarParser..cctor() in C:\gsv\projects\recursive-ascent\src\YardFrontend\Parser.fsy:line 0
--FileNotFoundException
at <StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser..cctor()
]]></stack-trace>
                </failure>
              </test-case>
              <test-case name="CommonTests+Checker test.Unused nonterminals checker. Metarules. Wrong grammar." executed="True" result="Error" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[System.TypeInitializationException : The type initializer for 'Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.TypeInitializationException : The type initializer for '<StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser' threw an exception.
  ----> System.IO.FileNotFoundException : Could not load file or assembly 'RNGLRCommon, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                  <stack-trace><![CDATA[at Yard.Frontends.YardFrontend.GrammarParser.get_parseFile()
at Yard.Frontends.YardFrontend.Main.ParseFile(String args) in C:\gsv\projects\recursive-ascent\src\YardFrontend\Main.fs:line 192
at Yard.Frontends.YardFrontend.YardFrontend.ParseGrammar(Object t) in C:\gsv\projects\recursive-ascent\src\YardFrontend\YardFrontend.fs:line 30
at CommonTests.Checker test.Unused nonterminals checker. Metarules. Wrong grammar.() in C:\gsv\projects\recursive-ascent\src\Common.Test\CommonTests.fs:line 199
--TypeInitializationException
at Yard.Frontends.YardFrontend.GrammarParser..cctor() in C:\gsv\projects\recursive-ascent\src\YardFrontend\Parser.fsy:line 0
--FileNotFoundException
at <StartupCode$YardFrontend>.$Yard.Frontends.YardFrontend.GrammarParser..cctor()
]]></stack-trace>
                </failure>
              </test-case>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="CommonTests+Components loader tests" executed="True" result="Failure" success="False" time="0.447" asserts="0">
            <results>
              <test-case name="CommonTests+Components loader tests.All conversions" executed="True" result="Failure" success="False" time="0.344" asserts="1">
                <failure>
                  <message><![CDATA[  Expected and actual are both <Microsoft.FSharp.Collections.FSharpList`1[System.String]>
  Values differ at index [0]
]]></message>
                  <stack-trace><![CDATA[]]></stack-trace>
                </failure>
              </test-case>
              <test-case name="CommonTests+Components loader tests.All frontends" executed="True" result="Failure" success="False" time="0.003" asserts="1">
                <failure>
                  <message><![CDATA[  Expected and actual are both <Microsoft.FSharp.Collections.FSharpList`1[System.String]>
  Values differ at index [0]
]]></message>
                  <stack-trace><![CDATA[]]></stack-trace>
                </failure>
              </test-case>
              <test-case name="CommonTests+Components loader tests.All generators" executed="True" result="Failure" success="False" time="0.003" asserts="1">
                <failure>
                  <message><![CDATA[  Expected and actual are both <Microsoft.FSharp.Collections.FSharpList`1[System.String]>
  Values differ at index [0]
]]></message>
                  <stack-trace><![CDATA[]]></stack-trace>
                </failure>
              </test-case>
              <test-case name="CommonTests+Components loader tests.Get generators name" executed="True" result="Failure" success="False" time="0.014" asserts="1">
                <failure>
                  <message><![CDATA[  Expected and actual are both <Microsoft.FSharp.Collections.FSharpList`1[System.Boolean]>
  Values differ at index [0]
  Expected: True
  But was:  False
]]></message>
                  <stack-trace><![CDATA[]]></stack-trace>
                </failure>
              </test-case>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Assembly" name="C:\gsv\projects\recursive-ascent\Bin\Release\v40\YC.Conversions.Test.dll" executed="True" result="Failure" success="False" time="0.165" asserts="0">
        <results>
          <test-suite type="TestFixture" name="ConversionsTests+Conversions tests" executed="True" result="Failure" success="False" time="0.108" asserts="0">
            <results>
              <test-case name="ConversionsTests+Conversions tests.ExpandBrackets. Sequence as sequence element test." executed="True" result="Error" success="False" time="0.100" asserts="0">
                <failure>
                  <message><![CDATA[System.MissingMethodException : Method not found: 'Microsoft.FSharp.Collections.FSharpList`1<Module`2<!0,!1>> t`2.get_grammar()'.]]></message>
                  <stack-trace><![CDATA[at ConversionsTests.Conversions tests.ExpandBrackets. Sequence as sequence element test.()
]]></stack-trace>
                </failure>
              </test-case>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ConversionsTests+Expand rop level alters" executed="True" result="Error" success="False" time="0.005" asserts="0">
            <failure>
              <message><![CDATA[SetUp : System.TypeInitializationException : The type initializer for '<StartupCode$YC-Conversions-Test>.$ConversionsTests' threw an exception.
  ----> System.MissingMethodException : Method not found: 'Void elem`2..ctor(Boolean, t`2<!0,!1>, Microsoft.FSharp.Core.FSharpOption`1<!0>, Microsoft.FSharp.Core.FSharpOption`1<!1>)'.]]></message>
              <stack-trace><![CDATA[at ConversionsTests.get_FrontendsManager()
at ConversionsTests.Expand rop level alters..ctor() in C:\gsv\projects\recursive-ascent\src\Conversions.Test\ConversionsTests.fs:line 140
--MissingMethodException
at <StartupCode$YC-Conversions-Test>.$ConversionsTests..cctor()
]]></stack-trace>
            </failure>
            <results>
              <test-case name="ConversionsTests+Expand rop level alters.Multi alters" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Expand rop level alters]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ConversionsTests+Expand rop level alters.No alter" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Expand rop level alters]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ConversionsTests+Expand rop level alters.One alter" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Expand rop level alters]]></message>
                  <stack-trace />
                </failure>
              </test-case>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="EliminateLeftRecursionTests+Conversions eliminate left recursion tests" executed="True" result="Error" success="False" time="0.002" asserts="0">
            <failure>
              <message><![CDATA[SetUp : System.TypeInitializationException : The type initializer for '<StartupCode$YC-Conversions-Test>.$ConversionsTests' threw an exception.
  ----> System.MissingMethodException : Method not found: 'Void elem`2..ctor(Boolean, t`2<!0,!1>, Microsoft.FSharp.Core.FSharpOption`1<!0>, Microsoft.FSharp.Core.FSharpOption`1<!1>)'.]]></message>
              <stack-trace><![CDATA[at ConversionsTests.get_FrontendsManager()
at EliminateLeftRecursionTests.Conversions eliminate left recursion tests..ctor() in C:\gsv\projects\recursive-ascent\src\Conversions.Test\EliminateLeftRecursionTests.fs:line 15
--MissingMethodException
at <StartupCode$YC-Conversions-Test>.$ConversionsTests..cctor()
]]></stack-trace>
            </failure>
            <results>
              <test-case name="EliminateLeftRecursionTests+Conversions eliminate left recursion tests.Test epsilon rule" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Conversions eliminate left recursion tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="EliminateLeftRecursionTests+Conversions eliminate left recursion tests.Test hidden recursion" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Conversions eliminate left recursion tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="EliminateLeftRecursionTests+Conversions eliminate left recursion tests.Test immediate recursion" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Conversions eliminate left recursion tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ExpandInnerAltTests+Expand inner alts tests" executed="True" result="Error" success="False" time="0.003" asserts="0">
            <failure>
              <message><![CDATA[SetUp : System.TypeInitializationException : The type initializer for '<StartupCode$YC-Conversions-Test>.$ConversionsTests' threw an exception.
  ----> System.MissingMethodException : Method not found: 'Void elem`2..ctor(Boolean, t`2<!0,!1>, Microsoft.FSharp.Core.FSharpOption`1<!0>, Microsoft.FSharp.Core.FSharpOption`1<!1>)'.]]></message>
              <stack-trace><![CDATA[at ConversionsTests.get_FrontendsManager()
at ExpandInnerAltTests.Expand inner alts tests..ctor() in C:\gsv\projects\recursive-ascent\src\Conversions.Test\ExpandInnerAltTests.fs:line 36
--MissingMethodException
at <StartupCode$YC-Conversions-Test>.$ConversionsTests..cctor()
]]></stack-trace>
            </failure>
            <results>
              <test-case name="ExpandInnerAltTests+Expand inner alts tests.Alt in seq 1" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Expand inner alts tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ExpandInnerAltTests+Expand inner alts tests.Alt in seq 2" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Expand inner alts tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ExpandInnerAltTests+Expand inner alts tests.Alts in seq" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Expand inner alts tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ExpandInnerAltTests+Expand inner alts tests.Nested alts" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Expand inner alts tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ExpandMetaTests+Conversions expand metarules tests" executed="True" result="Error" success="False" time="0.014" asserts="0">
            <failure>
              <message><![CDATA[SetUp : System.TypeInitializationException : The type initializer for '<StartupCode$YC-Conversions-Test>.$ConversionsTests' threw an exception.
  ----> System.MissingMethodException : Method not found: 'Void elem`2..ctor(Boolean, t`2<!0,!1>, Microsoft.FSharp.Core.FSharpOption`1<!0>, Microsoft.FSharp.Core.FSharpOption`1<!1>)'.]]></message>
              <stack-trace><![CDATA[at ConversionsTests.get_FrontendsManager()
at ExpandMetaTests.Conversions expand metarules tests..ctor() in C:\gsv\projects\recursive-ascent\src\Conversions.Test\ExpandMetaTests.fs:line 39
--MissingMethodException
at <StartupCode$YC-Conversions-Test>.$ConversionsTests..cctor()
]]></stack-trace>
            </failure>
            <results>
              <test-case name="ExpandMetaTests+Conversions expand metarules tests.Meta test 1" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Conversions expand metarules tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ExpandMetaTests+Conversions expand metarules tests.Meta test 2" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Conversions expand metarules tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ExpandMetaTests+Conversions expand metarules tests.Meta test args" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Conversions expand metarules tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ExpandMetaTests+Conversions expand metarules tests.Meta test args order" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Conversions expand metarules tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ExpandMetaTests+Conversions expand metarules tests.Meta test attributes" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Conversions expand metarules tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ExpandMetaTests+Conversions expand metarules tests.Meta test bindings" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Conversions expand metarules tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ExpandMetaTests+Conversions expand metarules tests.Meta test diff" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Conversions expand metarules tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ExpandMetaTests+Conversions expand metarules tests.Meta test duplicate" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Conversions expand metarules tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ExpandMetaTests+Conversions expand metarules tests.Meta test enclosure" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Conversions expand metarules tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ExpandMetaTests+Conversions expand metarules tests.Meta test enclosure simple" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Conversions expand metarules tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ExpandMetaTests+Conversions expand metarules tests.Meta test group" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Conversions expand metarules tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ExpandMetaTests+Conversions expand metarules tests.Meta test modules easy" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Conversions expand metarules tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ExpandMetaTests+Conversions expand metarules tests.Meta test modules hard" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Conversions expand metarules tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ExpandMetaTests+Conversions expand metarules tests.Meta test permutations" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Conversions expand metarules tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ExpandMetaTests+Conversions expand metarules tests.Meta test ptoken to pref" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Conversions expand metarules tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ExpandMetaTests+Conversions expand metarules tests.Meta test ptoken to pref 2" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Conversions expand metarules tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ExpandMetaTests+Conversions expand metarules tests.Meta test recursion 1" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Conversions expand metarules tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ExpandMetaTests+Conversions expand metarules tests.Meta test recursion 2" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Conversions expand metarules tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ExpandMetaTests+Conversions expand metarules tests.Meta test two calls" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Conversions expand metarules tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ExpandSubseqTests+Expand subseq tests" executed="True" result="Error" success="False" time="0.003" asserts="0">
            <failure>
              <message><![CDATA[SetUp : System.TypeInitializationException : The type initializer for '<StartupCode$YC-Conversions-Test>.$ConversionsTests' threw an exception.
  ----> System.MissingMethodException : Method not found: 'Void elem`2..ctor(Boolean, t`2<!0,!1>, Microsoft.FSharp.Core.FSharpOption`1<!0>, Microsoft.FSharp.Core.FSharpOption`1<!1>)'.]]></message>
              <stack-trace><![CDATA[at ConversionsTests.get_FrontendsManager()
at ExpandSubseqTests.Expand subseq tests..ctor() in C:\gsv\projects\recursive-ascent\src\Conversions.Test\ExpandSubseqTests.fs:line 37
--MissingMethodException
at <StartupCode$YC-Conversions-Test>.$ConversionsTests..cctor()
]]></stack-trace>
            </failure>
            <results>
              <test-case name="ExpandSubseqTests+Expand subseq tests.Inner subseq" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Expand subseq tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ExpandSubseqTests+Expand subseq tests.Subseq 1" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Expand subseq tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ExpandSubseqTests+Expand subseq tests.Subseq 2" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in Expand subseq tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ReplaceInlineTests+Inline tests" executed="True" result="Error" success="False" time="0.001" asserts="0">
            <failure>
              <message><![CDATA[SetUp : System.TypeInitializationException : The type initializer for '<StartupCode$YC-Conversions-Test>.$ConversionsTests' threw an exception.
  ----> System.MissingMethodException : Method not found: 'Void elem`2..ctor(Boolean, t`2<!0,!1>, Microsoft.FSharp.Core.FSharpOption`1<!0>, Microsoft.FSharp.Core.FSharpOption`1<!1>)'.]]></message>
              <stack-trace><![CDATA[at ConversionsTests.get_FrontendsManager()
at ReplaceInlineTests.Inline tests..ctor() in C:\gsv\projects\recursive-ascent\src\Conversions.Test\ReplaceInlineTests.fs:line 36
--MissingMethodException
at <StartupCode$YC-Conversions-Test>.$ConversionsTests..cctor()
]]></stack-trace>
            </failure>
          </test-suite>
          <test-suite type="TestFixture" name="ToCNFTests+CNF tests" executed="True" result="Error" success="False" time="0.004" asserts="0">
            <failure>
              <message><![CDATA[SetUp : System.TypeInitializationException : The type initializer for '<StartupCode$YC-Conversions-Test>.$ConversionsTests' threw an exception.
  ----> System.MissingMethodException : Method not found: 'Void elem`2..ctor(Boolean, t`2<!0,!1>, Microsoft.FSharp.Core.FSharpOption`1<!0>, Microsoft.FSharp.Core.FSharpOption`1<!1>)'.]]></message>
              <stack-trace><![CDATA[at ConversionsTests.get_FrontendsManager()
at ToCNFTests.CNF tests..ctor() in C:\gsv\projects\recursive-ascent\src\Conversions.Test\ToCNFTests.fs:line 37
--MissingMethodException
at <StartupCode$YC-Conversions-Test>.$ConversionsTests..cctor()
]]></stack-trace>
            </failure>
            <results>
              <test-case name="ToCNFTests+CNF tests.Delete chain-rule" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in CNF tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ToCNFTests+CNF tests.delete Eps rule test 1" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in CNF tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ToCNFTests+CNF tests.delete Eps rule test 2" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in CNF tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ToCNFTests+CNF tests.delete Eps rule test 3" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in CNF tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
              <test-case name="ToCNFTests+CNF tests.ToCNF test" executed="True" result="Failure" success="False" time="0.000" asserts="0">
                <failure>
                  <message><![CDATA[TestFixtureSetUp failed in CNF tests]]></message>
                  <stack-trace />
                </failure>
              </test-case>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Assembly" name="C:\gsv\projects\recursive-ascent\Bin\Release\v40\YC.YardFrontend.Test.dll" executed="True" result="Success" success="True" time="5.288" asserts="0">
        <results>
          <test-suite type="TestFixture" name="YardFrontendTester+Yard frontend preprocessor tests" executed="True" result="Success" success="True" time="3.051" asserts="0">
            <results>
              <test-case name="YardFrontendTester+Yard frontend preprocessor tests.elif with both defs." executed="True" result="Success" success="True" time="0.696" asserts="1" />
              <test-case name="YardFrontendTester+Yard frontend preprocessor tests.elif with first def." executed="True" result="Success" success="True" time="0.010" asserts="1" />
              <test-case name="YardFrontendTester+Yard frontend preprocessor tests.elif with no defs." executed="True" result="Success" success="True" time="0.008" asserts="1" />
              <test-case name="YardFrontendTester+Yard frontend preprocessor tests.elif with second def." executed="True" result="Success" success="True" time="0.009" asserts="1" />
              <test-case name="YardFrontendTester+Yard frontend preprocessor tests.if_else_end. No user defs." executed="True" result="Success" success="True" time="0.010" asserts="1" />
              <test-case name="YardFrontendTester+Yard frontend preprocessor tests.if_else_end. User defs." executed="True" result="Success" success="True" time="0.009" asserts="1" />
              <test-case name="YardFrontendTester+Yard frontend preprocessor tests.if_endif" executed="True" result="Success" success="True" time="0.018" asserts="1" />
              <test-case name="YardFrontendTester+Yard frontend preprocessor tests.Inner if. Full user defs." executed="True" result="Success" success="True" time="0.011" asserts="1" />
              <test-case name="YardFrontendTester+Yard frontend preprocessor tests.Inner if. Inner user defs." executed="True" result="Success" success="True" time="0.010" asserts="1" />
              <test-case name="YardFrontendTester+Yard frontend preprocessor tests.Inner if. No user defs." executed="True" result="Success" success="True" time="0.009" asserts="1" />
              <test-case name="YardFrontendTester+Yard frontend preprocessor tests.Inner if. Top user defs." executed="True" result="Success" success="True" time="0.011" asserts="1" />
              <test-case name="YardFrontendTester+Yard frontend preprocessor tests.noUserDefs" executed="True" result="Success" success="True" time="0.011" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="YardFrontendTester+YardFrontend Complete tests" executed="True" result="Success" success="True" time="0.091" asserts="0">
            <results>
              <test-case name="YardFrontendTester+YardFrontend Complete tests.L_attr test" executed="True" result="Success" success="True" time="0.090" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="YardFrontendTester+Yardfrontend label tests" executed="True" result="Success" success="True" time="0.463" asserts="0">
            <results>
              <test-case name="YardFrontendTester+Yardfrontend label tests.label test." executed="True" result="Success" success="True" time="0.021" asserts="1" />
              <test-case name="YardFrontendTester+Yardfrontend label tests.weight test correct input" executed="True" result="Success" success="True" time="0.013" asserts="0" />
              <test-case name="YardFrontendTester+Yardfrontend label tests.weight test incorrect input" executed="True" result="Success" success="True" time="0.045" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="YardFrontendTester+YardFrontend lexer tests" executed="True" result="Success" success="True" time="0.148" asserts="0">
            <results>
              <test-case name="YardFrontendTester+YardFrontend lexer tests.Include test" executed="True" result="Success" success="True" time="0.019" asserts="1" />
              <test-case name="YardFrontendTester+YardFrontend lexer tests.Lexer cls test" executed="True" result="Success" success="True" time="0.023" asserts="1" />
              <test-case name="YardFrontendTester+YardFrontend lexer tests.Lexer seq test" executed="True" result="Success" success="True" time="0.015" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="YardFrontendTester+YardFrontend options tests" executed="True" result="Success" success="True" time="0.048" asserts="0">
            <results>
              <test-case name="YardFrontendTester+YardFrontend options tests.Basic options test" executed="True" result="Success" success="True" time="0.048" asserts="2" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="YardFrontendTester+YardFrontend Parser tests" executed="True" result="Success" success="True" time="0.013" asserts="0">
            <results>
              <test-case name="YardFrontendTester+YardFrontend Parser tests.Seq test" executed="True" result="Success" success="True" time="0.012" asserts="0" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="YardFrontendTester+YardFrontend syntax tests" executed="True" result="Success" success="True" time="0.217" asserts="0">
            <results>
              <test-case name="YardFrontendTester+YardFrontend syntax tests.Literals test" executed="True" result="Success" success="True" time="0.012" asserts="0" />
              <test-case name="YardFrontendTester+YardFrontend syntax tests.Option seq test" executed="True" result="Success" success="True" time="0.016" asserts="0" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="YardFrontendTester+Yardfrontend token tests" executed="True" result="Success" success="True" time="0.136" asserts="0">
            <results>
              <test-case name="YardFrontendTester+Yardfrontend token tests.Empty tokens test." executed="True" result="Success" success="True" time="0.013" asserts="1" />
              <test-case name="YardFrontendTester+Yardfrontend token tests.Tokens test." executed="True" result="Success" success="True" time="0.121" asserts="1" />
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>